<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.MapPoint.Data</name>
    </assembly>
    <members>
        <member name="T:Microsoft.MapPoint.Data.AbstractName">
            <summary>
            The AbstractName is the base class for entity names in MapPoint.  There 
            are several types of entity names, a normal string, a street name with 
            separate elements parsed out, and a shield name which functions to 
            contain the information required for both road shield labeling and for 
            labeling other multi-line labels 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractName.#ctor(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.AbstractName"/> class.
            </summary>
            <param name="cultureInfo"></param>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractName.ToString">
            <summary>
            Convert the object to a string.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractName.NameRole">
            <summary>
            Gets the namerole for this name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractName.Culture">
            <summary>
            Gets the culture for this name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractName.BaseName">
            <summary>
            Gets very minimal version of the name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractName.FullName">
            <summary>
            Gets the entire name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractName.MapName">
            <summary>
            Gets a map-displayable name.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AddressBase">
            <summary>
            The AddressBase is the base class for addresses in MapPoint.  If inheriting from this class, be cautious in modifying
            protected fields.  An inconsistent state could result if it is then used as an Ontology property.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.AddressMaxStringLength">
            <summary>
            The maximum length a string component of an address may be.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.PostalCodeMaxStringLength">
            <summary>
            The maximum length a string representing a postal code may be.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.InternalAddressMaxNumber">
            <summary>
            The maximum number of internal address lines an address may have.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.PointsOfInterestMaxNumber">
            <summary>
            The maximum number of points of interest an address may have.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.StreetsMaxNumber">
            <summary>
            The maximum number of streets an address may have.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.NeighborhoodsMaxNumber">
            <summary>
            The maximum number of neighborhoods an address may have.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.emptyInternalAddressLines">
            <summary>
            internalAddressLinesText cannot be null. If null set it to emptyInternalAddressLines
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.emptyPointsOfInterest">
            <summary>
            points of interest cannot be null. If null set it to emptyPointsOfInterest
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.emptyStreets">
            <summary>
            streetsText cannot be null. If null set it to emptyStreets
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.emptyNeighborhoods">
            <summary>
             neighborhoodsText cannot be null. If null set it to emptyNeighborhoods
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.streetAddressText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            StreetAddress is not used for emerging markets
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.internalAddressLinesText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.pointsOfInterestText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.streetsText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            streetsText is used only for emerging markets.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.neighborhoodsText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            neighborhoodsText is used only for emerging markets. Also called localities
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.cityText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.secondaryCityText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.adminDivision2Text">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.administrativeDivisionText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.countryRegionText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AddressBase.postalCodeText">
            <summary>
            This is mutable from a derived class.  Design the class appropriately if it will be used in a context expecting immutability,
            such as Ontology properties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.#ctor(System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor. Geared towards US/UK markets to prevent existing code from breaking
            </summary>
            <param name="streetAddress">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="internalAddressLines">May be null but cannot contain nulls, nor can a member be longer than AddressMaxStringLength.</param>
            <param name="city">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="secondaryCity">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="adminDivision2">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="administrativeDivision">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="postalCode">May be null but cannot be longer than PostalCodeMaxStringLength.</param>
            <param name="countryRegion">May be null but cannot be longer than AddressMaxStringLength.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.#ctor(System.String,System.String[],System.String[],System.String[],System.String[],System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for emerging markets
            </summary>
            <param name="streetAddress">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="internalAddressLines">May be null but cannot contain nulls, nor can a member be longer than AddressMaxStringLength.</param>
            <param name="pointsOfInterest">May be null but cannot contain nulls, nor can a member be longer than AddressMaxStringLength.</param>
            <param name="streets">May be null but cannot contain nulls, nor can a member be longer than AddressMaxStringLength.</param>
            <param name="neighborhoods">May be null but cannot contain nulls, nor can a member be longer than AddressMaxStringLength.</param>
            <param name="city">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="secondaryCity">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="adminDivision2">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="administrativeDivision">May be null but cannot be longer than PostalCodeMaxStringLength.</param>
            <param name="postalCode">May be null but cannot be longer than PostalCodeMaxStringLength.</param>
            <param name="countryRegion">May be null but cannot be longer than AddressMaxStringLength.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor used for deserializing from a reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.GetInternalAddressLines">
            <summary>
            Gets the InternalAddressLines.  Internal mail routing information like department name, 
            suite number within a building, internal mailstop number, or similar properties may be 
            contained within the InternalStreetAddress element.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.GetPointsOfInterest">
            <summary>
            Gets the PointsOfInterest
            Points of interest are building names, shopping areas, parks, museums, etc that
            are typically not commercial and tend to be more permanent
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.GetStreets">
            <summary>
            Gets the Streets.  Used only by emerging markets
            For US market, the street is part of the StreetAddress parameter
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.GetNeighborhoods">
            <summary>
            Gets the neighborhoods.  Used only by emerging markets
            This is equivalent to localities
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes this AddressBase object to the provided writer.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.ToString">
            <summary>
            Convert the object to a string.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.Equals(Microsoft.MapPoint.Data.AddressBase)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="addressOther">Object to compare to this one.</param>
            <returns>True if the object equals this one.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj">Object to compare to this one.</param>
            <returns>True if the object equals this one.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.CompareStrings(System.String,System.String)">
            <summary>
            Compare two strings.
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.GetHashCode">
            <summary>Serves as a hash function for Address.  Does not guarantee a completely unique hash.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressBase.ValidateMembers(System.String,System.String[],System.String[],System.String[],System.String[],System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Validates and sets the members in the constructors.
            </summary>
            <param name="streetAddress"></param>
            <param name="internalAddressLines"></param>
            <param name="pointsOfInterest"></param>
            <param name="streets"></param>
            <param name="neighborhoods"></param>
            <param name="city"></param>
            <param name="secondaryCity"></param>
            <param name="adminDivision2"></param>
            <param name="administrativeDivision"></param>
            <param name="countryRegion"></param>
            <param name="postalCode"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressBase.StreetAddress">
            <summary>
            Gets the StreetAddress.  This element contains the most precise, official line for the 
            address relative to the postal agency servicing the area specified by the city(s)/postalCode. 
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressBase.City">
            <summary>
            Gets the city name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressBase.SecondaryCity">
            <summary>
            Gets the secondary city name.  This optional element defines the secondary city for this address. 
            Example types for this element include city district, city wards, postal towns, etc.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressBase.AdminDivision2">
            <summary>
            Gets the AdminDivision2.  This element contains the county / adminDivision2 name within the 
            country or region for this address.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressBase.AdministrativeDivision">
            <summary>
            Gets the AdministrativeDivision.  This element contains the official subdivision name within the 
            country or region for this address.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressBase.CountryRegion">
            <summary>
            Gets the name of the Country or Region.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressBase.PostalCode">
            <summary>
            Gets the postal code.  This element contains the official postal code for this address.  
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AddressRange">
            <summary>
            Address range using integers only.  The range may have even, odd, or both parity.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AddressRangeBase">
            <summary>
            Abstract base class for street address ranges.  Address ranges are surprisingly complicated.  
            They are not simply a start and end integer for the range.  
            
            Even the simplest case has to handle what side of the street the address range is associated 
            with, whether it’s odd, even or both.  It also has to handle whether it’s on the left, right, 
            or both sides of a segment.
            
            A more complex example might include mixed odd and even values along a given side or there 
            may be a single associated street name with this particular range – and not any of the other 
            names associated with the street.  For example, La Salle St. may have a different address 
            range than Main St. or Hwy 99 – two names for the same street.
            
            Further, even more complex cases such as Alphanumerics which are part of the range, combined 
            with odd/even mixed cases.  In these cases we would need a derived class that was able to 
            parse the alphanumerics in order to evaluate the range portion for matching and linear 
            interpolation.
            
            Finally, there are countries like Japan where there are no address ranges at all.  An abstract 
            base class such as this still allows us to implement a concrete class that holds instances of 
            addresses rather than ranges and still match and return results in a uniform way.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRangeBase.#ctor(Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Data.SegmentParity)">
            <summary>
            Constructor.
            </summary>
            <param name="side">Indicates which side of the feature, if any, this range is associated with.</param>
            <param name="parity">Indicates the Parity of the addresses; odd, even or both.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRangeBase.Interpolate(System.String,Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Does a match of the string to the address range and if there’s a match, interpolates the range 
            and returns a RelativePoint position from the primitive provided.
            </summary>
            <param name="addressValue">The address within the range.</param>
            <param name="primitive">The primitive to be interpolated against.</param>
            <returns>null if address is outside the range.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRangeBase.Interpolate(Microsoft.MapPoint.Data.RelativePoint)">
            <summary>
            Uses a RelativePoint along the feature to interpolate an address out of the range.
            </summary>
            <param name="relativePoint">The distance along the feature to find an address for.</param>
            <returns>null if position is outside the range.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRangeBase.ToString">
            <summary>
            Represents the object as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRangeBase.RangeStart">
            <summary>
            The start of the range.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRangeBase.RangeEnd">
            <summary>
            The end of the range.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRangeBase.Side">
            <summary>
            Indicates which side of the feature, if any, this range is associated with.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRangeBase.Parity">
            <summary>
            Indicates the Parity of the addresses; odd, even or both.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRangeBase.AssociatedSegmentName">
            <summary>
            The name of the feature that the range is associated with.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRange.#ctor(System.String,System.String,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Data.SegmentParity)">
            <summary>
            Constructor.
            </summary>
            <param name="rangeStart">The start of the range.</param>
            <param name="rangeEnd">The end of the range.</param>
            <param name="side">Indicates which side of the feature, if any, this range is associated with.</param>
            <param name="parity">Indicates the Parity of the addresses; odd, even or both.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRange.#ctor(System.Int32,System.Int32,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Data.SegmentParity)">
            <summary>
            Internal constructor that takes ints instead of strings.
            </summary>
            <param name="rangeStart"></param>
            <param name="rangeEnd"></param>
            <param name="side"></param>
            <param name="parity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRange.Interpolate(System.String,Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Does a match of the string to the address range and if there’s a match, interpolates the range 
            and returns a RelativePoint position from the primitive provided.
            </summary>
            <param name="addressValue">The address within the range.</param>
            <param name="primitive">The primitive to be interpolated against.  Must have this AddressRange as a property.</param>
            <returns>null if address is outside the range.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRange.Interpolate(Microsoft.MapPoint.Data.RelativePoint)">
            <summary>
            Uses a RelativePoint along the feature to interpolate an address out of the range.
            </summary>
            <param name="relativePoint">The distance along the feature to find an address for.  Its primitive must have this AddressRange as a property.</param>
            <returns>null if position is outside the range.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRange.MatchesParity(System.Int32)">
            <summary>
            Whether the given number is of the correct parity for this range.
            </summary>
            <param name="number">The number to check.</param>
            <returns>True if the number is in parity, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRange.ValidatePrimitiveProperty(Microsoft.MapPoint.Data.Primitive,System.String)">
            <summary>
            Validates that this AddressRange is a PropertyValue for the supplied primitive.
            </summary>
            <param name="prim"></param>
            <param name="argumentName"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRange.RangeStart">
            <summary>
            The start of the range.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRange.RangeEnd">
            <summary>
            The end of the range.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AddressRangeNamed">
            <summary>
            Address range using integers only, and only applicable to a specific feature name.  Some features have
            multiple names and an address range may apply to only one of them.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRangeNamed.#ctor(System.String,System.String,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Data.SegmentParity,Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Constructor.
            </summary>
            <param name="rangeStart">The start of the range.</param>
            <param name="rangeEnd">The end of the range.</param>
            <param name="side">Indicates which side of the feature, if any, this range is associated with.</param>
            <param name="parity">Indicates the Parity of the addresses; odd, even or both.</param>
            <param name="associatedSegmentName">The name of the feature that the range is associated to.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressRangeNamed.#ctor(System.Int32,System.Int32,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Data.SegmentParity,Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Constructor that takes ints instead of strings.
            </summary>
            <param name="rangeStart">The start of the range.</param>
            <param name="rangeEnd">The end of the range.</param>
            <param name="side">Indicates which side of the feature, if any, this range is associated with.</param>
            <param name="parity">Indicates the Parity of the addresses; odd, even or both.</param>
            <param name="associatedSegmentName">The name of the feature that the range is associated to.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AddressRangeNamed.AssociatedSegmentName">
            <summary>
            The start of the range.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.BestMapView">
            <summary>
            Creates a structure to store Coordinate2DFixedPoint(lat,long) and Scale
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BestMapView.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="center">Center point</param>
            <param name="scale">scale</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BestMapView.ToString">
            <summary>
            String represenation of BestMapView
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BestMapView.Center">
            <summary>
            Center point
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BestMapView.Scale">
            <summary>
            Scale
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataCoverageCapability">
            <summary>
            Class that describes the spatial extent of the data in the DataSource.  
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.CustomContentCapability">
            <summary>
            Base class for all custom content capability classes.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContentCapability">
            <summary>
            Base class for all content capability classes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapability.#ctor(System.String,Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            Cstor.
            </summary>
            <param name="keyName"></param>
            <param name="spatialExtent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapability.#ctor(System.String,System.String[],Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            The constructor that specifies storageGroup constraints.
            </summary>
            <param name="keyName"></param>
            <param name="storageGroupConstraints">storage group keynames</param>
            <param name="spatialExtent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapability.SetDataSource(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Provide a chance to the de-serialization to set the dataSource member.
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapability.GetStorageGroupConstraints">
            <summary>
            Gets a copy of the storageGroup contraints.  StorageGroup contraints provide the ability to specify 
            a particular storageGroup or storageGroups that are a constraint for the ContentCapability.
            The return value is a string array containing the keynames of the storage groups.  The keynames can
            be used to lookup storage groups at the datasource.
            </summary>
            <value>If the returned list is empty, then the capability applies to all storageGroups.</value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContentCapability.KeyName">
            <summary>
            Gets or sets the keyname of this capability.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContentCapability.SpatialExtent">
            <summary>
            Gets the spatial extent.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CustomContentCapability.#ctor(System.String,Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            Cstor.
            </summary>
            <param name="keyName"></param>
            <param name="spatialExtent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CustomContentCapability.#ctor(System.String,System.String[],Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            The constructor that specifies storageGroup constraints.
            </summary>
            <param name="keyName"></param>
            <param name="storageGroupConstraints">storage group keynames</param>
            <param name="spatialExtent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CustomContentCapability.SetDataSource(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Provide a chance to the de-serialization to set the dataSource member.
            </summary>
            <param name="dataSourceNew"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CustomContentCapability.DataSource">
            <summary>
            Gets the datasource object.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataCoverageCapability.#ctor(System.String,Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            Cstor.
            </summary>
            <param name="keyName"></param>
            <param name="spatialExtent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataCoverageCapability.#ctor(System.String,Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            Constructor that specifies a DataSource.
            </summary>
            <param name="keyName"></param>
            <param name="dataSource"></param>
            <param name="spatialExtent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataCoverageCapability.ContainsDataIn(Microsoft.MapPoint.Geometry.Geometry2D.Box2D,System.Double)">
            <summary>
            Checks if the DataSource contains data in the region and at the specified scale. If yes, returns “true”, otherwise returns “false”.
            If unable to determine, returns "true".
            </summary>
            <param name="boundingBox">The region to be queried.</param>
            <param name="scale">The scale to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataCoverageCapability.ContainsDataIn(Microsoft.MapPoint.Geometry.Geometry2.Box2,System.Double)">
            <summary>
            Checks if the DataSource contains data in the region and at the specified scale. If yes, returns “true”, otherwise returns “false”.
            If unable to determine, returns "true".
            </summary>
            <param name="boundingBox">The region to be queried.</param>
            <param name="scale">The scale to be queried.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataCoverageCapability.Contains(Microsoft.MapPoint.Geometry.AbstractGeometry,System.Double)">
            <summary>
            Checks if the DataSource contains data in the region and at the specified scale. If yes, returns “true”, otherwise returns “false”.
            If unable to determine, returns "true".
            </summary>
            <param name="abstractGeometry">The region to be queried.</param>
            <param name="scale">The scale to be queried.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.REACHDataCapability">
            <summary>
            The capability that describes the ability to provide REACH Data.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.REACHDataCapability.GetREACHDataCapabilityInstance">
            <summary>
            Gets the static instance of the REACH Data Capability
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.REACHDataCapability.REACHDataCapabilityKey">
            <summary>
            The string key used in the ContentCapabilityKeyedCollection for the REACHDataCapability
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.REACHDataCapabilitySerializer">
            <summary> A serializer for Content Capability</summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContentCapabilitySerializer">
            <summary>
            A serializer for ContentCapability
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilitySerializer.Serialize(Microsoft.MapPoint.Data.ContentCapability,System.IO.BinaryWriter)">
            <summary>
            Serialize a content capability.
            </summary>
            <param name="capability"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilitySerializer.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize a content capability.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilitySerializer.SerializeSpatialExtent(System.IO.BinaryWriter,Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            Serialize a spatial extent.
            </summary>
            <param name="writer"></param>
            <param name="spatialExtent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilitySerializer.DeserializeSpatialExtent(System.IO.BinaryReader)">
            <summary>
            De-serialize a spatial extent.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.REACHDataCapabilitySerializer.Serialize(Microsoft.MapPoint.Data.ContentCapability,System.IO.BinaryWriter)">
            <summary>
            Serialize a content capability.
            </summary>
            <param name="capability"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.REACHDataCapabilitySerializer.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize a content capability.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.TrafficCapability">
            <summary>Capability to expose road viability information</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.TrafficCapability.Key">
            <summary>TrafficCapability string key</summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TrafficCapability.#ctor(Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>Constructor</summary>
            <param name="spatialExtent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TrafficCapability.Instance">
            <summary>
            Gets the static instance of the REACH Data Capability
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.TrafficCapabilitySerializer">
            <summary> A serializer for Content Capability</summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TrafficCapabilitySerializer.Serialize(Microsoft.MapPoint.Data.ContentCapability,System.IO.BinaryWriter)">
            <summary>
            Serialize a content capability.
            </summary>
            <param name="capability"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TrafficCapabilitySerializer.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize a content capability.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Incident">
            <summary>An incident/event associated to one or more edges</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Id">
            <summary>Incident ID</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Impact">
            <summary>Incident criticality</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Type">
            <summary>Incident type</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Blocking">
            <summary>Road block type</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Description">
            <summary>Incident location description</summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Incident.#ctor(System.Int32,Microsoft.MapPoint.Data.Incident.Category,Microsoft.MapPoint.Data.Incident.Criticality,System.Boolean,System.String)">
            <summary>Constructor</summary>
            <param name="id"></param>
            <param name="type"></param>
            <param name="criticality"></param>
            <param name="isBlocking"></param>
            <param name="description"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Incident.Category">
            <summary>Incident types.  The values must match the Traffic database incident_type.id</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.Undefined">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.Accident">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.Congestion">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.DisabledVehicle">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.MassTransit">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.Miscellaneous">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.OtherNews">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.PlannedEvent">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.RoadHazard">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.ScheduleConstruction">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.UnscheduledConstruction">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Category.Weather">
            <summary></summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Incident.Criticality">
            <summary>Traffic Criticality</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Criticality.Undefined">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Criticality.LowImpact">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Criticality.Minor">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Criticality.Moderate">
            <summary></summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Incident.Criticality.Serious">
            <summary></summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Alt.Landmark">
            <summary>
            The AltLandmark class
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Alt.Landmark.Coordinate">
            <summary>
            Gets the coordinate of the landmark.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Alt.LandmarkDataSet">
            <summary>
            The AltDictionary class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Alt.LandmarkDataSet.GetLandmark(System.Int32)">
            <summary>
            Gets a landmark by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Alt.LandmarkDataSet.TryGetValue(Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.Alt.LandmarkDistances@)">
            <summary>
            Tries to get the landmark distances for an edge.
            </summary>
            <param name="node"></param>
            <param name="distances"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Alt.LandmarkDataSet.SetDistance(Microsoft.MapPoint.Data.Topology.Node,System.Int32,System.Boolean,System.Single)">
            <summary>
            Sets the distance from a node to a landmark.
            </summary>
            <param name="node"></param>
            <param name="landmarkIndex"></param>
            <param name="forwards"></param>
            <param name="distance"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Alt.LandmarkDataSet.Version">
            <summary>
            Gets the version of this dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Alt.LandmarkDistances">
            <summary>
            The LandmarkDistances class holds a collection of distances
            to and from a node in the graph from and to all of the landmarks.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Alt.LandmarkDistances.TryGetDistance(System.Int32,System.Boolean,System.Single@)">
            <summary>
            Tries to get the distance to or from a landmark.
            </summary>
            <param name="landmark"></param>
            <param name="forward"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Alt.LandmarkDistances.Count">
            <summary>
            Gets the number of landmarks in this collection.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MemoryDataSource">
            <summary>
            A data source whose contents are entirely stored in memory and not persisted.
            </summary>
            <summary>
            A data source whose contents are entirely stored in memory and not persisted.
            </summary>
            <summary>
            A data source whose contents are entirely stored in memory and not persisted.
            </summary>
            <summary>
            A data source whose contents are entirely stored in memory and not persisted.
            </summary>
            <summary>
            A data source whose contents are entirely stored in memory and not persisted.
            </summary>
            <summary>
            A data source whose contents are entirely stored in memory and not persisted.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource">
            <summary>
            Summary description for DataSource.
            </summary>
            <summary>
            Summary description for DataSource.
            </summary>
            <summary>
            Encapsulates all of the functionality necessary for querying and modifying a Data Source.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ICapableResource">
            <summary>
            An interface supported by resources which have one or more capabilities 
            that can be queried programmatically.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ICapableResource.GetCapabilities">
            <summary>
            The list of capabilities this resource has.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.IQueryPropByPrimitiveId">
            <summary>
            An interface that specifies methods on a DataSource that can be used to query properties
            by PrimitiveId
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.IQueryPropByPrimitiveId.GetPrimitivePropertyObject(Microsoft.MapPoint.Data.PrimitivePropertyObject,Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitivePropByRef@)">
            <summary>
            A method that allows accessing properties of a primitive by Prop and PrimitiveId directly,
            without going through the object representing the primitive (on the callers side).
            The property itself is a reference type property or a large value type property that is boxed
            and is stored by reference as System.Object in PrimitivePropByRef.
            </summary>
            <param name="prop">Which property to access</param>
            <param name="id">The PrimitiveId of the primitive whose property needs to be accessed</param>
            <param name="value">An out param that contains the result of the call, if it succeeds</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.IQueryPropByPrimitiveId.GetPrimitivePropertyValue(Microsoft.MapPoint.Data.PrimitivePropertyValue,Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitivePropByValue@)">
            <summary>
            A method that allows accessing properties of a primitive by Prop and PrimitiveId directly,
            without going through the object representing the primitive (on the callers side).
            The property itself is a small value type property (upto 4 bytes) and is stored by value in
            PrimitivePropByValue. Larger value types are boxed and stored in PrimitivePropByRef.
            </summary>
            <param name="prop">Which property to access</param>
            <param name="id">The PrimitiveId of the primitive whose property needs to be accessed</param>
            <param name="value">An out param that contains the result of the call, if it succeeds</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.ontologyStore">
            <summary>
            The store used to persist ontology data
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadOntology">
            <summary>
            Loads the ontology.  This method should be called from the constructor
            of the datasource derived class when connecting to an existing data store
            with a serialized ontology.  It should only be called after database connections 
            are open and it is ready to read out values using the OntologyStore derived
            object.
            DataSource implementors who call the function must also implement an OntologyStore
            derived object and override the GetOntologyLoader protected method to return it.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeriveOntology(Microsoft.MapPoint.Data.Ontology,System.String)">
            <summary>
            Derives the ontology from an existing ontology.  This method should be called from the constructor
            of the datasource derived class when creating a new data store.  If you support persistence,
            it should only be called after database connections are open and it is ready to persist 
            values using the OntologyStore derived object.
            </summary>
            <param name="oldOntology"></param>
            <param name="newKeyName"></param>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.KphToMpsMultiplier">
            <summary>
            Value to convert a kilometers per hour (kph) speed to meters per second (mps)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.dataSourceKeyName">
            <summary>
            A friendly name for the dataSource.  Not guaranteed to be unique. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.coordinateReferenceSystem">
            <summary>
            Each DataSource can store geometry from only one CoordinateReferenceSystem.  
            This is that CoordinateReferenceSystem as a reference.  On DataSource 
            creation this defaults to the decimal degrees WGS-84 datum CoordinateReferenceSystem 
            which correponds to MapPoint basemap data.  It can be set to any other 
            CoordinateReferenceSystem as long as the DataSource contains no geometry.  
            Once a DataSource contains geometry this property should throw if set.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.storageGroupNameLookup">
            <summary>
            Dictionary for translating from entity type key name to StorageGroup.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.ontologyLockObject">
            <summary>
            Lock object to use for ontology operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.Cache">
            <summary>
            Provides access to the cache.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ReferenceOfOntology(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Gets the reference object of the supplied ontology.
            </summary>
            <param name="ontology"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetOntologyInheritanceHierarchy(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Gets the inheritance hierarchy for the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.DataSource"/> class.
            Derived classes that call this constructor must also: set the 
            Data Source Reference (using SetReference), the Entity Authority
            Reference (using SetEntityAuthorityReference), and the Ontology
            (using SetOntology or OntologyStore.DeriveOntology).  
            Optionally a derived class may load counts (using 
            LoadCountsFromStore) if it uses that functionality.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.DataSource"/> class as
            its own EntityAuthority.
            Derived classes that call this constructor must also: set the 
            Ontology (using SetOntology or OntologyStore.DeriveOntology).  
            Optionally a derived class may load counts (using 
            LoadCountsFromStore) if it uses that functionality.
            </summary>
            <param name="dataSourceId">GUID uniquely identifying this DataSource.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.#ctor(System.Guid,System.Guid,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.DataSource"/> class 
            that references a disconnected Entity Authority.
            Derived classes that call this constructor must also: set the 
            Ontology (using SetOntology or OntologyStore.DeriveOntology).  
            Optionally a derived class may load counts (using 
            LoadCountsFromStore) if it uses that functionality.
            </summary>
            <param name="dataSourceId">GUID uniquely identifying this DataSource.</param>
            <param name="entityAuthorityId"></param>
            <param name="entityAuthorityVersion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OnDataChanged(Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            Derived datasources should call this function when their own data has changed.
            </summary>
            <param name="extent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetKeyNameInMemoryOnly(System.String)">
            <summary>
            Set the keyname in memory only(no writes to the underlying store).
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetReference(Microsoft.MapPoint.Data.DataSourceReference)">
            <summary>
            Sets the current version
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetEntityAuthorityReference(Microsoft.MapPoint.Data.EntityAuthorityReference,System.String)">
            <summary>
            Sets the EntityAuthority based on values read from the store
            </summary>
            <param name="reference"></param>
            <param name="description"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ValidateIsOwnEntityAuthority">
            <summary>
            Validate that the data source is its own entity authority.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ValidateDataSourceReferenceForPrimitiveIdArgument(Microsoft.MapPoint.Data.DataSourceReference,System.String,System.Int32,System.String)">
            <summary>
            Validates that a specified <see cref="T:Microsoft.MapPoint.Data.DataSourceReference"/>
            can be used with this instance of this data source.
            </summary>
            <param name="reference"></param>
            <param name="argumentName"></param>
            <param name="argumentIndex"></param>
            <param name="argumentSuffix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntities(Microsoft.MapPoint.Data.EntitySpatialQuery)">
            <summary>
            Execute a spatial query for entities.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SynchronizedQueryEntities(Microsoft.MapPoint.Data.EntitySpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Calls through to internal function, blocking on ontology updates
            </summary>
            <param name="specification"></param>
            <param name="queryProgress"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BeginQueryEntities(Microsoft.MapPoint.Data.EntitySpatialQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous spatial query for entities.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="callback">Callback to call when the asynchronous operation completes.</param>
            <param name="state">Optional parameter, returned back to caller in the returned AsyncQueryResult object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.EndQueryEntities(System.IAsyncResult)">
            <summary>
            Complete an asynchronous spatial query for entities.
            </summary>
            <param name="result">The IAsyncResult with which the query completed.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesByName(Microsoft.MapPoint.Data.EntityNameQuery)">
            <summary>
            Execute a query for entities by name.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SynchronizedQueryEntitiesByName(Microsoft.MapPoint.Data.EntityNameQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Calls through to internal function, blocking on ontology updates
            </summary>
            <param name="specification"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BeginQueryEntitiesByName(Microsoft.MapPoint.Data.EntityNameQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous query for entities by name.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="callback">Callback to call when the asynchronous operation completes.</param>
            <param name="state">Optional parameter, returned back to caller in the returned AsyncQueryResult object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.EndQueryEntitiesByName(System.IAsyncResult)">
            <summary>
            Complete an asynchronous query for entities by name.
            </summary>
            <param name="result">The IAsyncResult with which the query completed.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryBucketedPrimitives(Microsoft.MapPoint.Data.PrimitiveSpatialQuery)">
            <summary>
            Execute a query for bucketed primitives.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SynchronizedQueryBucketedPrimitives(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Calls through to internal function, blocking on ontology updates
            </summary>
            <param name="specification"></param>
            <param name="progress"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BeginQueryBucketedPrimitives(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous query for bucketed primitives.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="callback">Callback to call when the asynchronous operation completes.</param>
            <param name="state">Optional parameter, returned back to caller in the returned AsyncQueryResult object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.EndQueryBucketedPrimitives(System.IAsyncResult)">
            <summary>
            Complete an asynchronous query for bucketed primitives.
            </summary>
            <param name="result">The IAsyncResult with which the query completed.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitives(Microsoft.MapPoint.Data.PrimitiveSpatialQuery)">
            <summary>
            Execute a query for primitives.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SynchronizedQueryPrimitives(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Calls through to internal function, blocking on ontology updates
            </summary>
            <param name="specification"></param>
            <param name="progress"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SynchronizedQueryEdges(Microsoft.MapPoint.Data.EdgeSpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Calls through to internal function, blocking on ontology updates
            </summary>
            <param name="specification"></param>
            <param name="progress"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BeginQueryPrimitives(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begin an asynchronous query for primitives.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="callback">Callback to call when the asynchronous operation completes.</param>
            <param name="state">Optional parameter, returned back to caller in the returned AsyncQueryResult object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.EndQueryPrimitives(System.IAsyncResult)">
            <summary>
            Complete an asynchronous query for primitives.
            </summary>
            <param name="result">The IAsyncResult with which the query completed.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntityById(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityResultOptions)">
            <summary>
            Queries for an entity with the specified ID.
            </summary>
            <param name="entityId"></param>
            <param name="resultOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesByIds(Microsoft.MapPoint.Data.EntityIdQuery)">
            <summary>
            Queries for entities with the specified ID's.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesByIds(Microsoft.MapPoint.Data.PrimitiveIdQuery)">
            <summary>
            Queries for primitives with the specified ID's.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryBucketsByPrimitiveIds(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Queries for Style Buckets Ids for the primitive ids'
            </summary>
            <param name="primitiveIds"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesByEntityId(Microsoft.MapPoint.Data.PrimitiveEntityIdQuery)">
            <summary>
            Queries for all primitives associated with an entity ID.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEdgesByIds(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Queries for topology Edge objects associated with the given
            primitive ID's.
            </summary>
            <param name="primitiveIds">Primitive ID's on which to query.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEdgeById(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Query for a single topology Edge associated with the given primitive Id.
            A more efficient version of QueryEdgesByIds for only 1 Edge
            </summary>
            <param name="primitiveId">The PrimitiveId</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEdges(Microsoft.MapPoint.Data.EdgeSpatialQuery)">
            <summary>
            Execute a spatial query for edges.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryContextRelationships(Microsoft.MapPoint.Data.ContextRelationshipQuery)">
            <summary>
            Queries for all context relationships of a given context entity.
            </summary>
            <param name="query">The query parameters.</param>
            <returns>Null if the queried entity is not a valid context.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ValidateQueryOntology(Microsoft.MapPoint.Data.Ontology,System.String)">
            <summary>
            Validates that the ontology being used in a query is the
            same as our own.
            </summary>
            <param name="queryOntology"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetEntityTypeKeyNameToStorageGroupLookup(Microsoft.MapPoint.Data.StringToStorageGroupLookup)">
            <summary>
            Set the entity type keyname to storage group lookup.
            </summary>
            <param name="stringToStorageGroupLookup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetOntology(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Stores the ontology and fires the method to report the ontology has changed.
            </summary>
            <param name="newOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdateOntology(Microsoft.MapPoint.Data.OntologySpecification)">
            <summary>
            Updates the ontology to the specified one.
            </summary>
            <param name="ontologySpecification">The specification for the updated ontology.</param>
            <returns>The ontology of the data source, after updating.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeserializeCapabilities">
            <summary>
            Load all the capabilities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadCapabilityDataFromStore">
            <summary>
            Load capability data from the store.  Derived classes should implement this function
            if they do not want to construct capabilities directly via GetCapabilities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetCapabilities">
            <summary>
            The list of capabilities this resource has.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveCapabilityDataToStore(System.Byte[])">
            <summary>
            This function is storage-specific and is used to serialize capability data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddCapability(Microsoft.MapPoint.Data.ContentCapability)">
            <summary>
            Adds a capability.
            </summary>
            <param name="capability"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeleteCapability(Microsoft.MapPoint.Data.ContentCapability)">
            <summary>
            Deletes a capability.
            </summary>
            <param name="capability"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.MakeCapabilitiesEffective(Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection)">
            <summary>
            Replace the current capabilities with the ones supplied.
            </summary>
            <param name="capabilitiesToBeUsed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddStorageGroups(System.Collections.ICollection)">
            <summary>
            Adds storage groups to the data source.
            </summary>
            <param name="storageGroupsToAdd"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ContainsPrimitives">
            <summary>
            Returns true if the dataSource contains primitives.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreateDataSourceStorageGroup(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Creates a StorageGroup of the correct type for the dataSource.
            </summary>
            <param name="rootEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreateStorageGroup(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Create a StorageGroup in this datasource at the entity type specified by the root entity type keyname.
            </summary>
            <param name="rootEntityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AdjustStorageGroupEntityTypeReferences">
            <summary>
            Re-sets the object references from the storage groups to
            entity types when the ontology changes
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddStorageGroupInternal(Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Adds a StorageGroup to the dataSource
            </summary>
            <param name="newStorageGroup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddStorageGroupNameLookupEntry(System.String,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Adds a new entry to the storage-group name lookup.
            </summary>
            <param name="entityTypeKeyName"></param>
            <param name="storageGroup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.RemoveStorageGroupNameLookupEntry(System.String)">
            <summary>
            Removes a new entry to the storage-group name lookup.
            </summary>
            <param name="entityTypeKeyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddOrUpdateChildrenEntityTypesToStorageGroup(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Add an entityType and its children to StorageGroupByEntityName lookup.
            If the entityType is already a StorageGroup, do not change its mapping.
            </summary>
            <param></param>
            <param></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeleteStorageGroup(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Deletes the StorageGroup specified by the root entity type.
            The StorageGroup must be empty.
            </summary>
            <param name="rootEntityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeleteStorageGroupInternal(Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Deletes a StorageGroup from the dataSource
            </summary>
            <param name="toBeRemoved"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.PurgeStorageGroup(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Deletes all data from a Storage Group.
            </summary>
            <param name="rootEntityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.PurgeStorageGroupFromStore(Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Override this to removes an entire Storage Group from the Data Store.
            </summary>
            <param name="storageGroup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpecification[],System.Int32[],System.Double,System.Double,System.String,System.Boolean)">
            <summary>
            Override this to add a collection of primitives.
            Implementors of this method MUST call AddToPrimitiveCount to add
            primitives or the state of the Data Source will be invalid.
            </summary>
            <param name="primitiveSpecifications"></param>
            <param name="bucketIds"></param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <param name="primitiveSpecificationsArgumentName">Argument name of the primitive ids.
            </param>
            <param name="isArgumentIndexed">True if the argument passed in had
            an indexer on it and should therefore include it in errors.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdatePrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair[],System.Int32[],System.String,System.Boolean)">
            <summary>
            Override this to update a collection of primitives.
            Implementors of this method MUST call AddToPrimitiveCount to remove
            primitives from one type and add them to another or the state of 
            the Data Source will be invalid.
            </summary>
            <param name="primitiveIdSpecificationPairs"></param>
            <param name="bucketIds"></param>
            <param name="primitiveIdSpecificationPairsArgumentName">Argument name of the primitive ids.
            </param>
            <param name="isArgumentIndexed">True if the argument passed in had
            an indexer on it and should therefore include it in errors.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdateBucketsInternal(Microsoft.MapPoint.Data.PrimitiveId[],System.Int32[],System.String,System.Boolean)">
            <summary>
            Updates the buckets of a list of primitives.
            </summary>
            <param name="primitiveIds"></param>
            <param name="bucketIds"></param>
            <param name="primitiveIdsArgumentName"></param>
            <param name="isArgumentIndexed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeletePrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveId[],System.String,System.Boolean)">
            <summary>
            Override this to delete primitives from the Data Source.
            Implementors of this method MUST call AddToPrimitiveCount (with a 
            negative amount for deletion) to update the counts for the deleted
            primitives or the state of the Data Source will be invalid.
            </summary>
            <param name="primitiveIds">Collection of primitive ids to delete.</param>
            <param name="primitiveIdsArgumentName">Argument name of the primitive ids--used for throwing good errors.</param>
            <param name="isArgumentIndexed">True if the argument passed in had an indexer on it and should therefore include it in errors.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ContainsEntityId(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Determines whether or not this data source contains the specified 
            entity id.
            </summary>
            <param name="entityId"></param>
            <returns>True if this data source contains the specified entity 
            id.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ValidatePrimitiveSpecification(System.String,System.Int32,Microsoft.MapPoint.Data.PrimitiveSpecification,System.Boolean)">
            <summary>
            Performs validation on a PrimitiveSpecification to make sure that 
            basic parts of it are in compliance for a primitive to be created
            out of it.
            </summary>
            <remarks>
            allowNullProperties will be true for updating primitives, false for
            creating them.  Reason: If properties are null, that means the
            PrimitiveSpecification was constructed from a Primitive with null
            properties, meaning it was queried without properties. That's okay
            for an update scenario (means "leave the properties alone"), but not
            for creating a brand-new primitive.
            </remarks>
            <param name="argumentName"></param>
            <param name="argumentIndex"></param>
            <param name="primitiveSpecification"></param>
            <param name="allowNullProperties">Whether the specification is allowed to have null properties.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreatePrimitive(Microsoft.MapPoint.Data.PrimitiveSpecification,System.Double,System.Double)">
            <summary>
            Adds a single primitive to the data source.
            </summary>
            <param name="primitiveSpecification"></param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreatePrimitive(Microsoft.MapPoint.Data.PrimitiveSpecification,System.Double,System.Double,System.Int32)">
            <summary>
            Adds a single bucketed primitive to the data source.
            </summary>
            <param name="primitiveSpecification"></param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <param name="bucketId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreatePrimitives(Microsoft.MapPoint.Data.PrimitiveSpecification[],System.Double,System.Double)">
            <summary>
            Adds primitives to the store.
            </summary>
            <param name="primitiveSpecifications">Primitives to add.</param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreatePrimitives(Microsoft.MapPoint.Data.PrimitiveSpecification[],System.Int32[],System.Double,System.Double)">
            <summary>
            Adds primitives with their buckets to the store.
            </summary>
            <param name="primitiveSpecifications">Primitives to add.</param>
            <param name="bucketIds">Bucket ids for each of the primitives.</param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdatePrimitive(Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitiveSpecification)">
            <summary>
            Updates a primitive.
            </summary>
            <param name="primitiveId">Id of primitive to update.</param>
            <param name="primitiveSpecification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdatePrimitive(Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitiveSpecification,System.Int32)">
            <summary>
            Updates a primitive and its bucket.
            </summary>
            <param name="primitiveId">Id of primitive to update.</param>
            <param name="primitiveSpecification"></param>
            <param name="bucketId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdatePrimitives(Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair[])">
            <summary>
            Updates a group of primitives.
            </summary>
            <param name="primitiveIdSpecificationPairs">List of primitives to update.</param>
            <returns>The updated primitives</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdatePrimitives(Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair[],System.Int32[])">
            <summary>
            Updates a group of primitives and their buckets.
            </summary>
            <param name="primitiveIdSpecificationPairs">List of primitives to update.</param>
            <param name="bucketIds"></param>
            <returns>The updated primitives</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdatePrimitive(Microsoft.MapPoint.Data.PrimitiveId,System.Int32)">
            <summary>
            Updates a primitive's bucket.
            </summary>
            <param name="primitiveId">Id of primitive to update.</param>
            <param name="bucketId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdatePrimitives(Microsoft.MapPoint.Data.PrimitiveId[],System.Int32[])">
            <summary>
            Updates a group of primitive's buckets.
            </summary>
            <param name="primitiveIds"></param>
            <param name="bucketIds"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeletePrimitive(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Delete a single primitive.
            </summary>
            <param name="primitiveId">Id of primitive to delete.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeletePrimitives(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Delete a group of primitives.
            </summary>
            <param name="primitiveIds">List of primitives to delete.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetEntityNames(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.AbstractNameCollection)">
            <summary>
            Sets the name collection directly on an entity.
            </summary>
            <param name="entity"></param>
            <param name="names"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddEntityPropertyValues(Microsoft.MapPoint.Data.Entity,System.Object[])">
            <summary>
            Adds property values to an entity.
            </summary>
            <param name="entity"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddRelationshipPropertyValues(Microsoft.MapPoint.Data.EntityRelationship,System.Object[])">
            <summary>
            Adds property values to a relationship.
            </summary>
            <param name="relationship"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetRelationshipsInEntity(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.EntityRelationshipCollection)">
            <summary>
            Sets the relationships in an entity.
            </summary>
            <param name="entity"></param>
            <param name="relationships"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetFindContextRelationships(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Gets the find context relationships for a particular context ID.
            </summary>
            <param name="storageGroup"></param>
            <param name="contextId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesInternal(Microsoft.MapPoint.Data.EntitySpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Execute a spatial query for entities.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="progress">Used to detect when further processing should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesByNameInternal(Microsoft.MapPoint.Data.EntityNameQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Execute a query for entities by name.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="progress">Used to detect when further processing should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetNameRoleFilter(Microsoft.MapPoint.Data.NameFilter)">
            <summary>
            Returns the name role lookup for a NameFilter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryBucketedPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Execute a query for bucketed primitives.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="progress">Used to detect when further processing should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,System.Boolean,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Execute a query for primitives.  If the query can return scores you may request them.  
            If you do so you will get DictionaryEntry objects, keyed by score and valued with the corresponding primitive.
            If the query cannot return scores, or you do not request them, you will just get the primitives objects.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="uniqueEntities">Set to true if it is desired that only unique entities should be returned.</param>
            <param name="progress">Used to detect when further processing should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEdgesInternal(Microsoft.MapPoint.Data.EdgeSpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Execute a query for edges.  If the query can return scores you may request them.  
            If you do so you will get DictionaryEntry objects, keyed by score and valued with the corresponding primitive.
            If the query cannot return scores, or you do not request them, you will just get the primitives objects.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="progress">Used to detect when further processing should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesByIdsInternal(Microsoft.MapPoint.Data.EntityIdQuery)">
            <summary>
            Queries for entities with the specified ID's.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesByIdsInternal(Microsoft.MapPoint.Data.PrimitiveIdQuery)">
            <summary>
            Queries for primitives with the specified ID's.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryBucketsByPrimitiveIdsInternal(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Queries for Style Bucket Ids using the specified primitive ids
            </summary>
            <param name="primitiveIds"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesByEntityIdInternal(Microsoft.MapPoint.Data.PrimitiveEntityIdQuery)">
            <summary>
            Queries for all primitives associated with an entity ID.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEdgesByIdsInternal(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Queries for topology Edge objects associated with the given
            primitive ID's.
            </summary>
            <param name="primitiveIds">Primitive ID's on which to query.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEdgeByIdInternal(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Queries for a single topology Edge object associated with the given
            primitive ID.
            </summary>
            <param name="primitiveId">Primitive ID on which to query.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryContextRelationshipsInternal(Microsoft.MapPoint.Data.ContextRelationshipQuery)">
            <summary>
            Queries for all context relationships of a given context entity.
            </summary>
            <param name="query">The query parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetWorkingSize">
            <summary>Gets the datasource global cache max size</summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetWorkingSize(System.Int64)">
            <summary>
            Sets the working size to the specified number of bytes.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.FreeMemory">
            <summary>
            Frees as much memory as possible.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.IsValidPropertyValueType(System.Type)">
            <summary>
            Gets whether the specified value type is valid for use in properties.
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LockAndCloseDataSource">
            <summary>
            Closes any connection to external resources and locks interaction with the database.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UnlockAndOpenDataSource(System.Int32)">
            <summary>
            Reopens any connection to external resources and unlocks interaction with the database.
            </summary>
            <param name="incrementSize">The number of bytes to add to the datasource's capacity.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.Dispose">
            <summary>
            Disposes of any resources that the DataSource has open.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.Cleanup">
            <summary>
            Does the actual dispose work.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreateEntity(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Creates an entity in the dataSource.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BuildEntity(Microsoft.MapPoint.Data.EntityId,System.Boolean,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.AbstractNameCollection,Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection,Microsoft.MapPoint.Data.EntityRelationshipCollection)">
            <summary>
            Internal helper function to build entities
            Useful to deserialization routines
            </summary>
            <param name="id"></param>
            <param name="isPersistent"></param>
            <param name="entityType"></param>
            <param name="names"></param>
            <param name="properties"></param>
            <param name="relationships"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BuildEntityRelationship(Microsoft.MapPoint.Data.BinaryEntityRelationshipType,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Internal helper function to build entity relationships.
            Useful to deserialization routines
            </summary>
            <param name="relationshipType"></param>
            <param name="targetEntityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BuildRelativeLine(Microsoft.MapPoint.Data.DataSourceReference,Microsoft.MapPoint.Data.PrimitiveId,System.Double,System.Double,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D)">
            <summary>
            Helper method to construct a relative line internally
            </summary>
            <param name="reference"></param>
            <param name="primitiveId"></param>
            <param name="fromFraction"></param>
            <param name="toFraction"></param>
            <param name="segmentSide"></param>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.BuildRelativePoint(Microsoft.MapPoint.Data.DataSourceReference,Microsoft.MapPoint.Data.PrimitiveId,System.Double,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Geometry.Geometry2D.Point2D)">
            <summary>
            Helper method to construct a relative point internally
            </summary>
            <param name="reference"></param>
            <param name="primitiveId"></param>
            <param name="fromFraction"></param>
            <param name="segmentSide"></param>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CreateEntityInternal(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Create an entity in the dataSource.  The concrete implementation of dataSource 
            should implement this.
            <remarks>Note locking is done here instead of entity authority
            to keep locking local to the datasource class</remarks>
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetEntityCount(System.String)">
            <summary>
            Gets the number of Entities of a specified type.
            </summary>
            <param name="entityTypeKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetPrimitiveCount(System.String)">
            <summary>
            Gets the number of Primitives of a specified type.
            </summary>
            <param name="primitiveTypeKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetRelationshipCount(System.String)">
            <summary>
            Gets the number of Relationships of a specified type.
            </summary>
            <param name="relationshipTypeKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadCountsFromStore">
            <summary>
            When overridden in a derived class, this method loads the Primitive
            and Relationship counts from the store.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetEntityCount(System.String,System.Int32)">
            <summary>
            Sets and commits a change to the Entity count.
            </summary>
            <param name="entityTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetEntityCountFromDeserialization(System.String,System.Int32)">
            <summary>
            Simply overwrites the Entity count without persisting.  Used for deserialization only.
            </summary>
            <param name="entityTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetEntityCountInStore(System.String,System.Int32)">
            <summary>
            Persists a changed entity count to a store.
            </summary>
            <param name="entityTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddToPrimitiveCount(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Adds the specified quantity to the count of Primitives for a specific type.
            Note that derived Data Sources are responsible for updating primitive counts.
            </summary>
            <param name="storageGroup">Storage Group in which the primitive 
            exists.  May be null if a Data Source does not use Storage 
            Groups.</param>
            <param name="primitiveTypeKeyName"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetPrimitiveCount(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Sets the count of Primitives for a specific type to a specified value and persists it to the store.
            Note that derived Data Sources are responsible for updating primitive counts.
            </summary>
            <param name="storageGroup">Storage Group in which the primitive 
            exists.  May be null if a Data Source does not use Storage 
            Groups.</param>
            <param name="primitiveTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetPrimitiveCountFromDeserialization(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Simply overwrites the Primitive count without persisting.  Used for deserialization only.
            </summary>
            <param name="storageGroup"></param>
            <param name="primitiveTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetPrimitiveCountInStore(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Persists a changed Primitive count for a Storage Group to a store.
            </summary>
            <param name="storageGroup"></param>
            <param name="primitiveTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddToRelationshipCount(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Adds the specified quantity to the count of Relationships for a specific type.
            </summary>
            <param name="storageGroup">Storage Group in which the primitive 
            exists.  May be null if a Data Source does not use Storage 
            Groups.</param>
            <param name="relationshipTypeKeyName"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetRelationshipCount(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Sets the count of Relationships for a specific type to a specified value.
            </summary>
            <param name="storageGroup">Storage Group in which the primitive 
            exists.  May be null if a Data Source does not use Storage 
            Groups.</param>
            <param name="relationshipTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetRelationshipCountFromDeserialization(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Simply overwrites the Relationship count without persisting.  Used for deserialization only.
            </summary>
            <param name="storageGroup"></param>
            <param name="relationshipTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetRelationshipCountInStore(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Persists a changed Relationship count for a Storage Group to a store.
            </summary>
            <param name="storageGroup"></param>
            <param name="relationshipTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SetEntityId(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Calls the internal method to set an Id on an entity
            only a dataSource should be able to do this
            </summary>
            <param name="entity"></param>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdateEntity(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.Entity)">
            <summary>
            Updates the Entity type, name, relationships, or property values based 
            on the input Entity object.  Requires a fully populated Entity object.  
            It will update all information to match specified input Entity.  This 
            method does not do partial updates.
            </summary>
            <remarks>Note locking is done here instead of entity authority
            to keep locking local to the datasource class</remarks>
            <param name="entity"></param>
            <param name="oldEntity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.UpdateEntityInternal(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.Entity)">
            <summary>
            Updates the Entity type, name, relationships, or property values based 
            on the input Entity object.  Requires a fully populated Entity object.  
            It will update all information to match specified input Entity.  This 
            method does not do partial updates.
            The concrete implementation of dataSource should implement this.
            </summary>
            <param name="entity"></param>
            <param name="oldEntity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeleteEntity(Microsoft.MapPoint.Data.Entity)">
            <summary>
            If the entity is persistent, this method merely retires it.  
            If the entity is non-persistent this deletes the entity provided.
            </summary>
            <remarks>Note locking is done here instead of entity authority
            to keep locking local to the datasource class</remarks>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeleteEntityInternal(Microsoft.MapPoint.Data.Entity)">
            <summary>
            If the entity is persistent, this method merely retires it.  
            If the entity is non-persistent this deletes the entity provided.
            The concrete implementation of dataSource should implement this.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeletePrimitivesByEntityId(System.String,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Override this to delete all of the primitives belonging to a 
            specified entity.
            Implementors of this method MUST call AddToPrimitiveCount (with a 
            negative amount for deletion) to update the counts for the deleted
            primitives or the state of the Data Source will be invalid.
            </summary>
            <param name="argumentName">The name of the entity ID argument.</param>
            <param name="entityId">The entity ID.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadEntityAuthorityVersion">
            <summary>
            Load the EntityAuthority version from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadEntityAuthorityVersionInternal">
            <summary>
            Load the EntityAuthority version from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveEntityAuthorityVersion(System.Version)">
            <summary>
            Save the EntityAuthority version to the store.
            </summary>
            <param name="entityAuthorityVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveEntityAuthorityVersionInternal(System.Version)">
            <summary>
            Save the EntityAuthority version to the store.
            </summary>
            <param name="entityAuthorityVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveDataSourceVersionInternal(System.Version)">
            <summary>
            Save the DataSource version to the store.
            </summary>
            <param name="dataSourceVersion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadEntityAuthorityDescription">
            <summary>
            Load the EntityAuthority description from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadEntityAuthorityDescriptionInternal">
            <summary>
            Load the EntityAuthority description from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveEntityAuthorityDescription(System.String)">
            <summary>
            Save the EntityAuthority description to the store.
            </summary>
            <param name="entityAuthorityDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveEntityAuthorityDescriptionInternal(System.String)">
            <summary>
            Save the EntityAuthority description to the store.
            </summary>
            <param name="entityAuthorityDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveEntityAuthorityGuid(System.Guid)">
            <summary>
            Save the EntityAuthority guid to the store.
            </summary>
            <param name="entityAuthorityGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveEntityAuthorityGuidInternal(System.Guid)">
            <summary>
            Save the EntityAuthority guid to the store.
            </summary>
            <param name="entityAuthorityGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadDataSourceDescription">
            <summary>
            Load the DataSource description from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadDataSourceDescriptionInternal">
            <summary>
            Load the DataSource description from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveDataSourceDescription(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Save the DataSource description to the store.
            </summary>
            <param name="dataSourceDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveDataSourceDescriptionInternal(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Save the DataSource description to the store.
            </summary>
            <param name="dataSourceDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveDataSourceKeyName(System.String)">
            <summary>
            Save the DataSource keyname to the store.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveDataSourceKeyNameInternal(System.String)">
            <summary>
            Save the DataSource keyname to the store.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadDataSourceNames">
            <summary>
            Load the dataSource names from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.LoadDataSourceNamesInternal">
            <summary>
            Load the dataSource names from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveDataSourceNames(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Save the dataSource names to the store.
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SaveDataSourceNamesInternal(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Save the dataSource names to the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AddEntityTypeStorageGroupMapInternal(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Adds an entry to the StorageGroup/entity type map table
            </summary>
            <param name="containingStorageGroup"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetNewPrimitiveIdMapping">
            <summary>
            Creates a new PrimitiveIdMapping that can hold ids from this dataSource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ValidateEntityId(System.Int64)">
            <summary>
            Validate an entity id.  If the entity id doesn't exist, this function throws.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ValidateEntityIdInternal(System.Int64)">
            <summary>
            Validate an entity id.  If the entity id doesn't exist, this function throws.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeleteEntityId(System.Int64)">
            <summary>
            Delete an entity id. 
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ValidateCoordinateReferenceSystemSupported(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,System.String)">
            <summary>
            Throws an exception if the specified CRS is not supported.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetUnsupportedCoordinateReferenceSystemArgumentException(System.String)">
            <summary>
            
            </summary>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetOntologyFromEntityTypeFilter(Microsoft.MapPoint.Data.EntityTypeFilter)">
            <summary>
            Helper method to get the ontology internal member from an entity type filter
            </summary>
            <param name="entityTypeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetCacheEntries">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetHashCode">
            <summary>Returns a code used for hashing DataSource instances.</summary>
            <returns>A hash code for the current DataSource.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.Flush">
            <summary>
            This method blocks until all pending changes are flushed to the underlying persisted store.
            This method is useful only for data sources that follow a "lazy commit" model.  For other 
            data sources, this method is a no-op.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.DeserializePrimitiveId(System.Byte[])">
            <summary>
            Given an array of bytes (from PrimitiveId.Serialize) remake the PrimitiveId
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetPrimitivePropertyObject(Microsoft.MapPoint.Data.PrimitivePropertyObject,Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitivePropByRef@)">
            <summary>
            A method that allows accessing properties of a primitive by Prop and PrimitiveId directly,
            without going through the object representing the primitive (on the callers side).<para/>
            The property itself is a reference type property or a large value type property that is boxed
            and is stored by reference as System.Object in PrimitivePropByRef.<para/>
            The default implementation by the DataSource class gets the Primitive object and then 
            accesses and returns the property requested. Derived implementations can override it with an 
            efficient implementation that does not require the instantiation of the primitive objects.
            </summary>
            <param name="prop">Which property to access</param>
            <param name="id">The PrimitiveId of the primitive whose property needs to be accessed</param>
            <param name="value">An out param that contains the result of the call, if it succeeds</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.GetPrimitivePropertyValue(Microsoft.MapPoint.Data.PrimitivePropertyValue,Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitivePropByValue@)">
            <summary>
            A method that allows accessing properties of a primitive by Prop and PrimitiveId directly,
            without going through the object representing the primitive (on the callers side).<para/>
            The property itself is a small value type property (upto 4 bytes) and is stored by value in
            PrimitivePropByValue. Larger value types are boxed and stored in PrimitivePropByRef.<para/>
            The default implementation by the DataSource class gets the Primitive object and then 
            accesses and returns the property requested. Derived implementations can override it with an 
            efficient implementation that does not require the instantiation of the primitive objects.
            </summary>
            <param name="prop">Which property to access</param>
            <param name="id">The PrimitiveId of the primitive whose property needs to be accessed</param>
            <param name="value">An out param that contains the result of the call, if it succeeds</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.OntologyStorage">
            <summary>
            Sets the store object used to persist ontology data
            Needs to be set once and only once before calling
            LoadOntology and before any ontology objects
            need to be persisted.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.Ontology">
            <summary>
            Gets the ontology for this datasource.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.ReferenceCount">
            <summary>
            The nubmer of references to this instance that have been handed out by DataManager.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.QueryOntologyUpdateLock">
            <summary>
            Object used to synchronize access to a datasource while ontology is being updated
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.EntityAuthorityGuid">
            <summary>
            Every DataSource must have an EntityAuthority, which serves as the naming 
            authority for entities in that DataSource, and which determines the 
            Ontology used by the DataSource. The EntityAuthority is identified by the
            GUID of the DataSource it resides in. The EntityAuthority may be the 
            DataSource itself, if it serves as the naming authority for itself, or it 
            may be another DataSource, if this DataSource is merely providing geometry,
            topology, etc., for entities that are defined in a central EntityAuthority. 
            It is not necessary for the EntityAuthority to actually be online and 
            available to callers, or for callers to have any permissions to access the 
            EntityAuthority (even in a read-only fashion), but the GUID for the 
            EntityAuthority must be defined, as it serves as a part of the unique 
            identifier for entities in the DataSource.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.EntityAuthorityVersion">
            <summary>
            see above.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.StorageGroupsByEntityTypeName">
            <summary>
            Lookup between entity type names and StorageGroups
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Data.DataSource.DataChanged">
            <summary>
            This event may be fired every time data changes in this DataSource.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Data.DataSource.OntologyChanged">
            <summary>
            Fires when ontology is updated.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.Id">
            <summary>
            Returns the id.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.Version">
            <summary>
            Returns the version of the dataSource
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.ReferenceIdentifier">
            <summary>
            Returns the unique identifier
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.KeyName">
            <summary>
            Gets/Sets and keyname.  Not guaranteed to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.Names">
            <summary>
            Gets/Sets the names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.Descriptions">
            <summary>
            Gets/Sets the descriptions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.EntityAuthorityReference">
            <summary>
            Gets the entity authority reference.
            An EntityAuthority is the Identity and naming authority for Entities.
            An EntityAuthority can be the naming authority for multiple dataSources ?
            or for only one dataSource.  
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.CoordinateReferenceSystem">
            <summary>
            Gets/Sets the coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.StorageGroups">
            <summary>
            Gets a readonly list of StorageGroups.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.PrimitiveSource">
            <summary>
            Gets the primitive source.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.IsDisposed">
            <summary>
            Returns true if the class has been disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.SupportedCoordinateReferenceSystems">
            <summary>
            Gets a list of the supported coordinate reference systems.
            This is a hack.  These should really be functional capabilities.  See comments of
            the variable supportedCoordinateReferenceSystems.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.CoordinateReferenceSystemInStore">
            <summary>
            Returns the coordinate reference system we use in our store.
            This is a hack.  see comments in supportedCoordinateReferenceSystems.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.ObjectFactory">
            <summary>
            Utility class used for instantiating objects that only DataSource-
            derived classes are allowed to create.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateContextRelationshipQueryResult(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.Entity[])">
            <summary>
            Create a ContextRelationshipQueryResult.
            </summary>
            <param name="parentId">The entity ID of the parent context of the entity queried for.</param>
            <param name="subcontexts">The subcontexts of the entity queried for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeEntityNameQueryResult(System.String,System.Double,Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.MatchedEntityName[])">
            <summary>
            Create an EntityNameQueryResult.
            </summary>
            <param name="name">The matching name.</param>
            <param name="score">The entity's score.</param>
            <param name="context">The context this name was found in.</param>
            <param name="matchingEntities">The collection of matching entities. IMPORTANT: The returned object assumes ownership of the array, do not modify after calling!</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeMatchedEntityName(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Create an MatchedEntityNameResult.
            </summary>
            <param name="entity">The matching entity.</param>
            <param name="name">The entity's name that matched.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateScoredEntityQueryResult(Microsoft.MapPoint.Data.Entity,System.Double)">
            <summary>
            Create a ScoredEntityQueryResult.
            </summary>
            <param name="entity">The entity.</param>
            <param name="score">The entity's score.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeScoredEntityQueryResultCollection(Microsoft.MapPoint.Data.ScoredEntityQueryResult[])">
            <summary>
            Create a ScoredEntityQueryResultCollection. IMPORTANT: The collection
            assumes ownership of the results array; do not modify it after passing
            it in!
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeEntityNameQueryResultCollection(Microsoft.MapPoint.Data.EntityNameQueryResult[])">
            <summary>
            Create an EntityNameQueryResultCollection. IMPORTANT: The collection
            assumes ownership of the results array; do not modify it after passing
            it in!
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeEdgeCollection(System.Collections.ArrayList)">
            <summary>
            Create an EdgeCollection. IMPORTANT: The collection assumes ownership
            of the edges list; do not modify it after passing it in!
            </summary>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeCultureInfoToStringLookup(System.Collections.Hashtable)">
            <summary>
            Create a CultureInfoToStringLookup. IMPORTANT: The collection assumes
            ownership of the lookup hashtable; do not modify it after passing it in!
            </summary>
            <param name="lookup"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeStringToStorageGroupLookup(System.Collections.Hashtable)">
            <summary>
            Create a StringToStorageGroupLookup. IMPORTANT: The collection assumes
            ownership of the lookup hashtable; do not modify it after passing it in!
            </summary>
            <param name="lookup"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafePrimitiveCollection(System.Collections.ArrayList)">
            <summary>
            Create a PrimitiveCollection. IMPORTANT: The collection assumes
            ownership of the primitives list; do not modify it after passing it in!
            </summary>
            <param name="primitives"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeAbstractNameArrayCollection(Microsoft.MapPoint.Data.AbstractName[])">
            <summary>
            Create an AbstractNameCollection wrapper around an existing array of
            abstract names. IMPORTANT: For performance reasons, this method performs
            no validation.  THE INPUT ARRAY MUST BE IN SORTED ORDER AND CONTAIN
            NO NULLS.
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeAbstractNameSingleEntityCollection(System.String)">
            <summary>
            Create an AbstractNameCollection wrapper around an existing single entity name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeAbstractNameSingleStreetCollection(System.String,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create an AbstractNameCollection wrapper around an existing single street name.  Name parts must
            be already parsed and indexed.
            </summary>
            <param name="streetName"></param>
            <param name="prefixIndex"></param>
            <param name="bodyIndex"></param>
            <param name="suffixIndex"></param>
            <param name="typeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateUnsafeObjectCollection(System.Object[])">
            <summary>
            Create an ObjectCollection. IMPORTANT: The collection assumes
            ownership of the objects array; do not modify it after passing it in!
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreatePhoneNumber(System.Int64,System.Int32)">
            <summary>
            Create a PhoneNumber.  If only 8 bytes are available, pass in -1 to data4Byte.
            </summary>
            <param name="data8Byte"></param>
            <param name="data4Byte"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreatePhoneNumber(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Create a phone nubmer out of components.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extensionNumber"></param>
            <param name="extensionLeadingZeros"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.ObjectFactory.CreateEntityRelationshipCollection(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityRelationship[],System.Boolean)">
            <summary>
            Helper function for creating read-only collections.
            </summary>
            <param name="entityType"></param>
            <param name="values"></param>
            <param name="valuesRequireSorting"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.OntologyStore">
            <summary>
            Implements deserialization of ontology objects
            Datasource implementors must implement this abstract
            class if they persist ontology objects
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.GetEntityTypeCount">
            <summary>
            Efficiency helper to the count of entity types
            override if the datasource implemtation can cheaply
            provide a good estimation of the count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.GetPrimitiveTypeCount">
            <summary>
            Efficiency helper to the count primitive types
            override if the datasource implemtation can cheaply
            provide a good estimation of the count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.GetEntityRelationshipTypeCount">
            <summary>
            Efficiency helper to the count relationship types
            override if the datasource implemtation can cheaply
            provide a good estimation of the count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.ReadNameRoleData(System.String@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,System.Boolean@)">
            <summary>
            Loads the data for a single name role
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="isFromBaseOntology"></param>
            <returns>true if a record was read</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.ReadPrimitiveTypeData(System.String@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,System.String@,System.Type@,System.Boolean@,System.Collections.ArrayList@)">
            <summary>
            Loads the data for a single primitive type
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="entityTypeKeyName"></param>
            <param name="geometryType"></param>
            <param name="isFromBaseOntology"></param>
            <param name="primitivePropertiesForType">Creates an ArrayList and populate with PrimitivePropertyHolders that apply to this type</param>
            <returns>true if a record was read</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.ReadEntityTypeData(System.String@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,System.String@,System.String@,System.Boolean@,System.Collections.ArrayList@)">
            <summary>
            Loads the data for a single Entity type
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="defaultNameRoleKeyName"></param>
            <param name="parentKeyName"></param>
            <param name="isFromBaseOntology"></param>
            <param name="entityPropertiesForType">Creates an ArrayList and populate with PropertyHolders that apply to this type (not including properties inherited from parent types)</param>
            <returns>true if a record was read</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.ReadBinaryEntityRelationshipTypeData(System.String@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,System.String@,System.String@,System.Boolean@,System.Boolean@,System.Collections.ArrayList@)">
            <summary>
            Loads the data for a single binary entity relationship type
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="sourceTypeKeyName"></param>
            <param name="targetTypeKeyName"></param>
            <param name="isFromBaseOntology"></param>
            <param name="allowMultipleInstances"></param>
            <param name="relationshipPropertiesForType">Creates an ArrayList and populate with PropertyHolders that apply to this type</param>
            <returns>true if a record was read</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.ReadEnumDefinitionData(System.String@,System.Boolean@,System.Boolean@,Microsoft.MapPoint.Data.DataSource.EnumValueHolder[]@)">
            <summary>
            Reads the data for an enum definition
            </summary>
            <param name="keyName"></param>
            <param name="isFlagEnum"></param>
            <param name="isFromBaseOntology"></param>
            <param name="enumValuesForDefinition">Creates an ArrayList and populate with EnumValueHolders that apply to this definition</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.BeginLoading">
            <summary>
            Indicates that the ongology is being loaded
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.EndLoading">
            <summary>
            Indicates that the ongology is done being loaded
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.AddNameRole(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Adds the NameRole to the store.
            </summary>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.RemoveNameRole(System.String)">
            <summary>
            Removes the NameRole from the store
            </summary>
            <param name="nameRoleKeyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.UpdateNameRole(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Updates the given NameRole
            </summary>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.AddEnumDefinition(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Adds the enum to the store.
            </summary>
            <param name="enumDefinition"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.RemoveEnumDefinition(System.String)">
            <summary>
            Removes the enum from the store
            </summary>
            <param name="enumDefinitionKeyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.UpdateEnumDefinition(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Updates the given enum
            </summary>
            <param name="enumDefinition"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.AddEntityType(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Adds the EntityType to the store.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.RemoveEntityType(System.String)">
            <summary>
            Removes the EntityType from the store
            </summary>
            <param name="entityTypeKeyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.UpdateEntityType(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Updates the given EntityType
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.AddPrimitiveType(Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Adds the PrimitiveType to the store.
            </summary>
            <param name="primitiveType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.RemovePrimitiveType(System.String)">
            <summary>
            Removes the PrimitiveType from the store
            </summary>
            <param name="primitiveTypeKeyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.UpdatePrimitiveType(Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Updates the given PrimitiveType
            </summary>
            <param name="primitiveType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.AddEntityRelationshipType(Microsoft.MapPoint.Data.EntityRelationshipType)">
            <summary>
            Adds the EntityRelationshipType to the store.
            </summary>
            <param name="entityRelationshipType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.RemoveEntityRelationshipType(System.String)">
            <summary>
            Removes the EntityRelationshipType from the store
            </summary>
            <param name="entityRelationshipTypeKeyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.UpdateEntityRelationshipType(Microsoft.MapPoint.Data.EntityRelationshipType)">
            <summary>
            Updates the given EntityRelationshipType
            </summary>
            <param name="entityRelationshipType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.LoadOntologyData(System.String@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,Microsoft.MapPoint.Data.CultureInfoToStringLookup@,Microsoft.MapPoint.Data.OntologyReference@,Microsoft.MapPoint.Data.OntologyReference[]@)">
            <summary>
            Loads the ontology data
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="ontologyReference"></param>
            <param name="inheritanceHierarchy"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.SaveOntologyMetadata(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Saves the ontology id, version, name, etc
            </summary>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.StoreOntology(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Serializes the entire ontology into the store.  Call only from
            The DeriveOntology
            </summary>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.AddAfterParents(Microsoft.MapPoint.Data.EntityType,System.Collections.Hashtable)">
            <summary>
            Adds the entity types in parent order
            </summary>
            <param name="entityType"></param>
            <param name="seenEntityType"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder">
            <summary>
            Holds data for a single entity/relationship property
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.KeyName">
            <summary>
            The key name
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.Names">
            <summary>
            The localized names
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.Descriptions">
            <summary>
            The localized descriptions
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.ValueType">
            <summary>
            The value type of the property
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.EnumDefinitionKeyName">
            <summary>
            The enum definition if any
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.IsMultiValued">
            <summary>
            Whether this property allows multiple values
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.IsRequired">
            <summary>
            Whether this property is required
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.IsFromBaseOntology">
            <summary>
            Whether this property comes from a derived ontology
            and is therefore not editable
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.KeyNameComparer">
            <summary>
            Compares property definitions by their key names.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyStore.PropertyHolder.KeyNameComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.OntologyStore.PrimitivePropertyHolder">
            <summary>
            Holds data for a single primitive property
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSource.OntologyStore.PrimitivePropertyHolder.EntityTypeKeyName">
            <summary>
            The entity type this property applies to
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.EnumValueHolder">
            <summary>
            Holds data for a single enum value.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.EnumValueHolder.#ctor(System.String,System.Int32,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="value"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.EnumValueHolder.KeyName">
            <summary>
            Key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.EnumValueHolder.Value">
            <summary>
            Value.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.EnumValueHolder.Names">
            <summary>
            Names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.EnumValueHolder.Descriptions">
            <summary>
            Descriptions.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.TypeConversion">
            <summary>
            Class to help determine type from serialized strings
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.TypeConversion.GetTypeFromString(System.String)">
            <summary>
            Function to convert type string into a type class
            For the types natively uderstood by Metropolis
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.TypeConversion.GetGeometryTypeFromString(System.String)">
            <summary>
            Gets the geometry type object from a serialized string
            </summary>
            <param name="geometryType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.DataChangedEventHandler">
            <summary>
            Handles events where data has changed in a datasource.
            </summary>
            <param name="extent">Extent and/or ids of data that has changed.</param>
            <param name="source">The source whose data has changed.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.FindContextRelationships">
            <summary>
            The find context relationships of a find context.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.FindContextRelationships.#ctor(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityId[])">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="children"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.FindContextRelationships.Parent">
            <summary>
            Gets the parent context. For a root context,
            will equal itself.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.FindContextRelationships.Children">
            <summary>
            Gets the child contexts.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.AsyncRequest">
            <summary>
            Utility class for handling asynchronous processing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AsyncRequest.#ctor(Microsoft.MapPoint.Data.DataSource,System.Object,System.AsyncCallback)">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
            <param name="specification"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AsyncRequest.Execute(System.Object)">
            <summary>
            Executes the request.
            </summary>
            <param name="state">State object to bring along for the ride.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AsyncRequest.GetResult(System.IAsyncResult,System.String)">
            <summary>
            Gets the query result. Waits for completion if need be.
            </summary>
            <param name="asyncResult"></param>
            <param name="asyncResultArgumentName"></param>
            <returns>Query results.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AsyncRequest.OnDequeue(System.Object)">
            <summary>
            Here when the thread pool dequeues the request for execution.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AsyncRequest.QueryInternal(System.Object,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Performs the actual query.
            </summary>
            <param name="query">The query to perform.</param>
            <param name="progress">Progress checker.</param>
            <returns>Query results.</returns>
            <exception cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">Thrown if the internal query method gets asynchronously interrupted.</exception>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.AsyncRequest.Owner">
            <summary>
            Gets the owner of this request.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.QueryEntitiesRequest">
            <summary>
            AsyncRequest class for calling QueryEntities.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesRequest.#ctor(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EntitySpatialQuery,System.AsyncCallback)">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
            <param name="specification"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesRequest.QueryInternal(System.Object,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Override for performing query.
            </summary>
            <param name="query"></param>
            <param name="progress"></param>
            <returns></returns>
            <exception cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">Thrown if the internal query method gets asynchronously interrupted.</exception>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.QueryEntitiesByNameRequest">
            <summary>
            AsyncRequest class for calling QueryEntitiesByName.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesByNameRequest.#ctor(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EntityNameQuery,System.AsyncCallback)">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
            <param name="specification"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryEntitiesByNameRequest.QueryInternal(System.Object,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Override for performing query.
            </summary>
            <param name="query"></param>
            <param name="progress"></param>
            <returns></returns>
            <exception cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">Thrown if the internal query method gets asynchronously interrupted.</exception>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.QueryBucketedPrimitivesRequest">
            <summary>
            AsyncRequest class for calling QueryBucketedPrimitives.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryBucketedPrimitivesRequest.#ctor(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.PrimitiveSpatialQuery,System.AsyncCallback)">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
            <param name="specification"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryBucketedPrimitivesRequest.QueryInternal(System.Object,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Override for performing query.
            </summary>
            <param name="query"></param>
            <param name="progress"></param>
            <returns></returns>
            <exception cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">Thrown if the internal query method gets asynchronously interrupted.</exception>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesRequest">
            <summary>
            AsyncRequest class for calling QueryPrimitives.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesRequest.#ctor(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.PrimitiveSpatialQuery,System.AsyncCallback)">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
            <param name="specification"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryPrimitivesRequest.QueryInternal(System.Object,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Override for performing query.
            </summary>
            <param name="query"></param>
            <param name="progress"></param>
            <returns></returns>
            <exception cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">Thrown if the internal query method gets asynchronously interrupted.</exception>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.QueryProgress">
            <summary>
            This class is passed to the various QueryXxxInternal() methods
            to allow them to interrupt if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.QueryProgress.Continue">
            <summary>
            Called to determine whether processing should continue.
            Throws if the answer is "no."
            </summary>
            <exception cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">Thrown if the operation should not continue.</exception>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.SynchronousQueryProgress">
            <summary>
            QueryProgress implementation for synchronous methods
            (Continue always returns true).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SynchronousQueryProgress.Continue">
            <summary>
            Called to determine whether processing should continue.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.SynchronousQueryProgress.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.SynchronousQueryProgress.Instance">
            <summary>
            Gets the instance of the class.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.AsynchronousQueryProgress">
            <summary>
            QueryProgress implementation for asynchronous methods.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AsynchronousQueryProgress.Continue">
            <summary>
            Called to determine whether processing should continue.
            Throws if the answer is "no."
            </summary>
            <exception cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">Thrown if the operation should not continue.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.AsynchronousQueryProgress.Aborted">
            <summary>
            Here when the asynchronous call is aborted.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock">
            <summary>
            Class to handle locking of the datasource during an ontology update
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock.AcquireQueryLock">
            <summary>
            Blocks if an ontology update is in progress
            After it returns, it will block any ontology
            update until relinquish is called
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock.RelinquishQueryLock">
            <summary>
            Unblocks ontology update if the total query count is 0
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock.OntologyUpdateBegin">
            <summary>
            Called to indicate that the ontology is being updated
            Blocks any further queries and waits until outstanding 
            queries finish
            </summary>
            <remarks>Note that this logic is somewhat simplified since
            There is already a lock that prevents multiple ontology updates
            from occuring simultaneously</remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock.OntologyUpdateEnd">
            <summary>
            Frees any waiting queries after the ontology was updated
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock.ValidateNotDisposed">
            <summary>
            Throws if the datasource has been disposed
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock.Dispose">
            <summary>
            Called to indicate that the datasource has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DataSource.OntologyUpdateLock.IsDisposed">
            <summary>
            True if the DataSource has been disposed
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSource.CacheWrapper">
            <summary>
            Small wrapper to simplify access to the cache.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.#ctor(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.DataSource.CacheWrapper"/> class.
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.TryGetValue(System.Object,Microsoft.MapPoint.Data.CacheObject@,System.Boolean)">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
            <param name="willRequest">Set to true if you will request the item if it is not in the cache</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.Put(System.Object,Microsoft.MapPoint.Data.CacheObject)">
            <summary>
            Puts an item into the cache.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.Delete(System.Object)">
            <summary>
            Deletes an item from the cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.UpdateSize(System.Object,System.Int64)">
            <summary>
            Updates the size of an item from the cache.
            </summary>
            <param name="key"></param>
            <param name="newSize"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.Clear">
            <summary>
            Clears the cache for this data source.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.GetObjectsOfType(System.Type)">
            <summary>
            Gets all cache entries of a specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSource.CacheWrapper.DeleteObjectsOfType(System.Type)">
            <summary>
            Deletes all of the entries of a specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateNodeId">
            <summary>
            Allocates an entry for an node and returns the id/offset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateMemoryNode(Microsoft.MapPoint.Data.MemoryDataSource,System.Int32,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Int32[],Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId)">
            <summary>
            Creates a memory node for deserialization
            </summary>
            <param name="memoryDataSource"></param>
            <param name="offset"></param>
            <param name="latlong"></param>
            <param name="edgeIds"></param>
            <param name="primitiveId"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.entityIdCounter">
            <summary>
            Gets or sets the entity id count.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.entities">
            <summary>
            Gets the entities table.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.dataSourcePrimitives">
            <summary>
            Gets the primitives.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.bucketIds">
            <summary>
            Gets the bucket ids.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.edges">
            <summary>
            Gets the edges.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.nodes">
            <summary>
            Gets the nodes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.DebugQueryDuration">
            <summary>
            Gets and sets the approximate number of milliseconds to extend an entity query.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.primitiveIdToOffset">
            <summary>
            Gets and sets the primitive id lookup table.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.entityIdToPrimitives">
            <summary>
            Gets and sets the entity id to primitive lookup table.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.primitiveToEdgeLookup">
            <summary>
            Gets and sets the primitive to edge lookup table.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.#ctor(System.String,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Constructor that derives from an exising source (such as XML)
            </summary>
            <param name="keyName"></param>
            <param name="baseOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.ValidatePrimitiveId(Microsoft.MapPoint.Data.PrimitiveId,System.String,System.Int32,System.String)">
            <summary>
            Validates that a PrimitiveId is an acceptable MemoryPrimitiveId.
            </summary>
            <param name="primitiveId"></param>
            <param name="argumentName"></param>
            <param name="argumentIndex"></param>
            <param name="argumentSuffix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SetPrimtivePropertyValues(Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive,System.Object[])">
            <summary>
            Sets the properties of a given MemoryPrimitive
            </summary>
            <param name="memoryPrimitive"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.PurgeStorageGroupFromStore(Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Does nothing.
            </summary>
            <param name="storageGroup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.LoadCountsFromStore">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SetEntityCountInStore(System.String,System.Int32)">
            <summary>
            Does nothing.
            </summary>
            <param name="entityTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SetPrimitiveCountInStore(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Does nothing.
            </summary>
            <param name="storageGroup"></param>
            <param name="primitiveTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SetRelationshipCountInStore(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Does nothing.
            </summary>
            <param name="storageGroup"></param>
            <param name="relationshipTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryEdgesByIdsInternal(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Queries for topology Edge objects associated with the given
            primitive ID's.
            </summary>
            <param name="primitiveIds">Primitive ID's on which to query.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryEdgeByIdInternal(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Queries for a single topology Edge object associated with the given
            primitive id.
            </summary>
            <param name="primitiveId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryBucketsByPrimitiveIdsInternal(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Queries for style buckets (ids) for the given primitive ids.
            </summary>
            <param name="primitiveIds"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.FindPrimitive(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Locates a memory primitive and returns its id if possible.
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.FindPrimitiveOffset(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Locates a memory primitive and returns its id if possible.
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryEntitiesInternal(Microsoft.MapPoint.Data.EntitySpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            A spatial query for entities.
            </summary>
            <param name="specification">Query specification.</param>
            <param name="progress">Progress checker.</param>
            <returns>List of entities.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,System.Boolean,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            A spatial query for primitives.  If the query can be scored you may request the scores be returned.
            </summary>
            <param name="specification"></param>
            <param name="uniqueEntities">Set to true if it is desired that only unique entities should be returned.</param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryBucketedPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpatialQuery,Microsoft.MapPoint.Data.DataSource.QueryProgress)">
            <summary>
            Spatial query for primitives and buckets.
            </summary>
            <param name="specification"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.ContainsEntityId(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Determines whether or not this data source contains the specified 
            entity id.
            </summary>
            <param name="entityId"></param>
            <returns>True if this data source contains the specified entity 
            id.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryEntitiesByIdsInternal(Microsoft.MapPoint.Data.EntityIdQuery)">
            <summary>
            Gets entities by id.
            </summary>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryPrimitivesByIdsInternal(Microsoft.MapPoint.Data.PrimitiveIdQuery)">
            <summary>
            Gets primitives by id.
            </summary>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryPrimitivesByEntityIdInternal(Microsoft.MapPoint.Data.PrimitiveEntityIdQuery)">
            <summary>
            Queries for all primitives associated with an entity ID.
            </summary>
            <param name="specification">Query specification.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.QueryContextRelationshipsInternal(Microsoft.MapPoint.Data.ContextRelationshipQuery)">
            <summary>
            Queries for all context relationships of a given context entity.
            </summary>
            <param name="query">The query parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.AddPrimitiveInternal(Microsoft.MapPoint.Data.Primitive,System.Int32,System.Double,System.Double)">
            <summary>
            This is an extremely hacked up and fragile way to stuff a primitive into the memory data source.
            </summary>
            <param name="primitive"></param>
            <param name="bucketId"></param>
            <param name="minScale"></param>
            <param name="maxScale"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.IndexPrimitive(Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive,System.Int32)">
            <summary>
            Indexes the primitive in all of the lookup tables.
            </summary>
            <param name="primitive"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.ConstructPrimitive(System.Int32,Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Cosntruct a primitive that has a particular primitive id value.
            </summary>
            <param name="idValue"></param>
            <param name="entity"></param>
            <param name="type"></param>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.AddPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpecification[],System.Int32[],System.Double,System.Double,System.String,System.Boolean)">
            <summary>
            Adds a collection of primitives.
            </summary>
            <param name="primitiveSpecifications"></param>
            <param name="bucketIds"></param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <param name="argumentName">Argument name of the primitive ids.
            </param>
            <param name="isArgumentIndexed">True if the argument passed in had
            an indexer on it and should therefore include it in errors.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.UpdatePrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair[],System.Int32[],System.String,System.Boolean)">
            <summary>
            Updates a collection of primitives.
            </summary>
            <param name="primitiveIdSpecificationPairs"></param>
            <param name="bucketIds"></param>
            <param name="argumentName">Argument name of the primitive ids.
            </param>
            <param name="isArgumentIndexed">True if the argument passed in had
            an indexer on it and should therefore include it in errors.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.UpdateBucketsInternal(Microsoft.MapPoint.Data.PrimitiveId[],System.Int32[],System.String,System.Boolean)">
            <summary>
            Updates the buckets of a list of primitives.
            </summary>
            <param name="primitiveIds"></param>
            <param name="bucketIds"></param>
            <param name="argumentName"></param>
            <param name="isArgumentIndexed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.DeletePrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveId[],System.String,System.Boolean)">
            <summary>
            Deletes primitives.
            </summary>
            <param name="primitiveIds"></param>
            <param name="argumentName"></param>
            <param name="isArgumentIndexed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateDataSourceStorageGroup(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Creates a storageGroup of the correct type for the dataSource.
            </summary>
            <param name="rootEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateStorageGroup(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Create a StorageGroup in this datasource at the entity type specified by the root entity type keyname.
            MemoryDataSources however do not contain StorageGroups.
            </summary>
            <param name="rootEntityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.ValidateEntityIdInternal(System.Int64)">
            <summary>
            Validate an entity id.  If the entity id doesn't exist, this function throws.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.DeleteEntityId(System.Int64)">
            <summary>
            Delete an entity id. 
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateEntityInternal(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Create an entity in the dataSource.  The concrete implementation of dataSource 
            should implement this.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateEntityInternalWithId(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Create an entity in the dataSource with the specified ID in the Entity already.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateEntityInternalReturnId(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Creates an entity and returns the Id. Used for serialization.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.BuildPrimitivePropertiesInternal(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Creates a primitive property collection
            </summary>
            <param name="ppkc"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.BuildEnumValue(Microsoft.MapPoint.Data.EnumDefinition,System.String,System.Int32,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Creates an EnumValue for deserialization purposes.
            </summary>
            <param name="enumType"></param>
            <param name="keyName"></param>
            <param name="value"></param>
            <param name="enumNames"></param>
            <param name="enumDescriptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.UpdateEntityInternal(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.Entity)">
            <summary>
            Updates the Entity type, name, relationships, or property values based 
            on the input Entity object.  Requires a fully populated Entity object.  
            It will update all information to match specified input Entity.  This 
            method does not do partial updates.
            The concrete implementation of dataSource should implement this.
            </summary>
            <param name="entity"></param>
            <param name="oldEntity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.DeleteEntityInternal(Microsoft.MapPoint.Data.Entity)">
            <summary>
            If the entity is persistent, this method merely retires it.  
            If the entity is non-persistent this deletes the entity provided.
            The concrete implementation of dataSource should implement this.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.LoadDataSourceDescriptionInternal">
            <summary>
            Load the DataSource description from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SaveDataSourceDescriptionInternal(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Save the DataSource description to the store.
            </summary>
            <param name="dataSourceDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SaveDataSourceKeyNameInternal(System.String)">
            <summary>
            Save the DataSource keyname to the store.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.LoadEntityAuthorityVersionInternal">
            <summary>
            Load the EntityAuthority version from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SaveEntityAuthorityVersionInternal(System.Version)">
            <summary>
            Save the EntityAuthority version to the store.
            </summary>
            <param name="entityAuthorityVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SaveDataSourceVersionInternal(System.Version)">
            <summary>
            Save the DataSource version to the store.
            </summary>
            <param name="dataSourceVersion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.LoadEntityAuthorityDescriptionInternal">
            <summary>
            Load the EntityAuthority description from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SaveEntityAuthorityDescriptionInternal(System.String)">
            <summary>
            Save the EntityAuthority description to the store.
            </summary>
            <param name="entityAuthorityDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SaveEntityAuthorityGuidInternal(System.Guid)">
            <summary>
            Save the EntityAuthority guid to the store.
            </summary>
            <param name="entityAuthorityGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.LoadDataSourceNamesInternal">
            <summary>
            Load the dataSource names from the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.SaveDataSourceNamesInternal(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Save the dataSource names to the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.AddEntityTypeStorageGroupMapInternal(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Adds an entry to the storageGroup/entity type map table
            </summary>
            <param name="containingStorageGroup"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateTopologyLinkage(Microsoft.MapPoint.Data.PrimitiveId[],Microsoft.MapPoint.Data.Topology.EdgeDirection[])">
            <summary>
            Updates the topology so that the edges corresponding to all of the primitives are connected
            at a single node.  If the edges do not exist, they are created.
            </summary>
            <param name="primitiveIds"></param>
            <param name="linkTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateEdgeId">
            <summary>
            Allocates an entry for an edge and returns the id/offset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.CreateEdge(System.Int32,Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Creates an edge with two nodes, attached to primitive.
            </summary>
            <param name="offset">Offset of Edge in edges collection</param>
            <param name="fromNode">Edge FromNode. If null, the node is created</param>
            <param name="toNode">Edge ToNode. If null the node is created</param>
            <param name="primitive">Primitive to attach edge to</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.GetNewPrimitiveIdMapping">
            <summary>
            Creates a new PrimitiveIdMapping that can hold ids from this dataSource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.DeserializePrimitiveId(System.Byte[])">
            <summary>
            PrimitiveId serialization not implemented in this DataSource
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.DeletePrimitivesByEntityId(System.String,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Delete primitives belonging to the specified entity.
            </summary>
            <param name="argumentName"></param>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.GetPrimitivePropertyObject(Microsoft.MapPoint.Data.PrimitivePropertyObject,Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitivePropByRef@)">
            <summary>
            A method that allows accessing properties of a primitive by Prop and PrimitiveId directly,
            without going through the object representing the primitive (on the callers side).<para/>
            The property itself is a reference type property or a large value type property that is boxed
            and is stored by reference as System.Object in PrimitivePropByRef.<para/>
            The default implementation by the DataSource class gets the Primitive object and then 
            accesses and returns the property requested. Derived implementations can override it with an 
            efficient implementation that does not require the instantiation of the primitive objects.
            </summary>
            <param name="prop">Which property to access</param>
            <param name="id">The PrimitiveId of the primitive whose property needs to be accessed</param>
            <param name="value">An out param that contains the result of the call, if it succeeds</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.GetPrimitivePropertyValue(Microsoft.MapPoint.Data.PrimitivePropertyValue,Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitivePropByValue@)">
            <summary>
            A method that allows accessing properties of a primitive by Prop and PrimitiveId directly,
            without going through the object representing the primitive (on the callers side).<para/>
            The property itself is a small value type property (upto 4 bytes) and is stored by value in
            PrimitivePropByValue. Larger value types are boxed and stored in PrimitivePropByRef.<para/>
            The default implementation by the DataSource class gets the Primitive object and then 
            accesses and returns the property requested. Derived implementations can override it with an 
            efficient implementation that does not require the instantiation of the primitive objects.
            </summary>
            <param name="prop">Which property to access</param>
            <param name="id">The PrimitiveId of the primitive whose property needs to be accessed</param>
            <param name="value">An out param that contains the result of the call, if it succeeds</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MyAbstractNameComparer">
            <summary>
            Gets an AbstractNameComparer for serialization purposes
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPriceTable">
            <summary>
            The MemoryPriceTable class handles the general case where there 
            can be a completely different price for every combination of nodes.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PriceTable">
            <summary>
            The PriceTable class defines the abstract interface for transit price tables.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PriceTable.UnknownPrice">
            <summary>
            Represents an unknown price.  This field is constant.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PriceTable.CalculatePrice(Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.Topology.Node)">
            <summary>
            Calculates the cost to to travel between two nodes.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPriceTable.#ctor">
            <summary>
            Creates a new MemoryPriceTable with no default price.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPriceTable.#ctor(System.Double)">
            <summary>
            Creates a new MemoryPriceTable.
            </summary>
            <param name="defaultPrice"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPriceTable.SetPrice(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the price between two nodes.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="cost"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPriceTable.CalculatePrice(Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.Topology.Node)">
            <summary>
            Calculates the cost to travel between two nodes.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge">
            <summary>
            Protected MemoryEdge for XmlDataSource
            </summary>
            <remarks>
            
                    63 - 47    0xFFFF800000000000    Length
                    46 - 44    0x0000700000000000    [unused]
                    43 - 40    0x00000F0000000000    Color
                    39 - 36    0x000000F000000000    From Azimuth
                    35 - 32    0x0000000F00000000    To Azimuth
                    31 - 24    0x00000000FF000000    Speed
                    23 - 21    0x0000000000E00000    NumberOfLanes
                    20 - 18    0x00000000001C0000    DividerType
                    17 - 15    0x0000000000038000    Hierarchy
                    14 - 11    0x0000000000007800    Classification
                    10 -  9    0x0000000000000600    [unused]
                          8    0x0000000000000100    FromToAllowed
                          7    0x0000000000000080    ToFromAllowed
                          6    0x0000000000000040    IsDividerPhysical
                          5    0x0000000000000020    IsPrivate
                          4    0x0000000000000010    IsPaved
                          3    0x0000000000000008    IsRoundabout
                          2    0x0000000000000004    AllowsThroughTraffic
                          1    0x0000000000000002    IsToll
                          0    0x0000000000000001    IsAutoAllowed
            
            </remarks>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.Edge">
            <summary>
            Topological edge with a node at either end.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TopologicalPrimitive">
            <summary>
            Summary description for TopologicalPrimitive.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Edge.#ctor(Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.Topology.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.Topology.Edge"/> class.
            </summary>
            <param name="fromNode"></param>
            <param name="toNode"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Edge.GetGeneralizedEdge">
            <summary>
            Gets the generallized version of this edge (one level up the hierarchy).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Edge.GetDetailEdge">
            <summary>
            Gets the detailed version of this edge (one level down the hierarchy).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Edge.Equals(System.Object)">
            <summary>
            Override object.Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Edge.GetHashCode">
            <summary>
            Override object.GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Edge.GetRestrictionsByEndEdge(Microsoft.MapPoint.Data.Topology.Edge)">
            <summary>
            Gets the turn restrictions starting at this edge and finishing at endEdge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Edge.GetNextDeparture(System.DateTime)">
            <summary>
            Gets the next departure time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.FromNode">
            <summary>
            Gets the "from" node.
            Edges move from one node to another.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.ToNode">
            <summary>
            Gets the "to" node.
            Edges move from one node to another.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.FromNodeValence">
            <summary>
            Shortcut for returning the number of edges (including this one) connected to the
            FromNode.  A value of 0 indicates it can't be calculated quickly.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.ToNodeValence">
            <summary>
            Shortcut for returning the number of edges (including this one) connected to the
            ToNode.  A value of 0 indicates it can't be calculated quickly.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.Length">
            <summary>
            Gets the length of this edge in meters.  
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.FromToAllowed">
            <summary>
            Gets whether this edge can be traversed from the "from" node to 
            the "to" node.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.ToFromAllowed">
            <summary>
            Gets whether this edge can be traversed from the "to" node to the
            "from" node.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.Speed">
            <summary>
            Gets the speed this edge in km/hr.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.NumberOfLanes">
            <summary>
            Gets the number of lanes.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.Color">
            <summary>
            Gets the color of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.ApproximateFromAzimuth">
            <summary>
            Gets the FromAzimuth of this edge. This may not be exact.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.ApproximateToAzimuth">
            <summary>
            Gets the ToAzimuth of this edge. This may not be exact.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.HasTMCCode">
            <summary>
            Gets the HasTMCCode of this edge
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsUTurnLegal">
            <summary>
            Gets the IsUTurnLegal of this edge
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsRightHandDriving">
            <summary>
            Gets the IsRightHandDriving of this edge
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsPaved">
            <summary>
            IsPaved
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsPrivate">
            <summary>
            IsPrivate
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsRoundabout">
            <summary>
            IsRoundabout
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsToll">
            <summary>
            IsToll
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsThroughTrafficAllowed">
            <summary>
            IsThroughTrafficAllowed
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsFerry">
            <summary>
            IsFerry
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsTransit">
            <summary>
            Gets whether this edge is a transit line.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsStartEdge">
            <summary>
            Gets whether this edge is a start edge in a turn restriction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsViaEdge">
            <summary>
            Gets whether this edge is a via edge in a polyvalent turn restriction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsEndEdge">
            <summary>
            Gets whether this edge is an end edge in a turn restriction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.RoadClassification">
            <summary>
            RoadClassification
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.RoutingHierarchy">
            <summary>
            RoutingHierarchy
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.DividerType">
            <summary>
            Divider Type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsDividerPhysical">
            <summary>
            IsDividerPhysical
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.PrimitiveId">
            <summary>
            Gets the primitive id that identifies this edge.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsAutoAllowed">
            <summary>
            Gets whether a regular automobile is allowed to traverse this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.IsSeasonalClosure">
            <summary>
            Gets whether a edge is seasonaly closed
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Edge.TransitLineId">
            <summary>
            Gets the transit line identifier.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.dataSource">
            <summary>
            Gets the data source for the edge.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.#ctor(Microsoft.MapPoint.Data.MemoryDataSource,System.Int32,Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.Topology.Node,Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Constructor
            </summary>
            <param name="dataSource"></param>
            <param name="offset"></param>
            <param name="fromNode"></param>
            <param name="toNode"></param>
            <param name="primitiveId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.Equals(System.Object)">
            <summary>
            Overrides Object.Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.GetHashCode">
            <summary>
            Overrides Object.GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.GetRestrictionsByEndEdge(Microsoft.MapPoint.Data.Topology.Edge)">
            <summary>
            Returns all the TurnRestrictions starting from this edge and finishing at the endEdge.
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.GetNextDeparture(System.DateTime)">
            <summary>
            Gets the next departure time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.CalculateSizeInBytes">
            <summary>
            Calculates the number of bytes this object consumes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.FromNodeValence">
            <summary>
            Shortcut for returning the number of edges (including this one) connected to the
            FromNode.  A value of 0 indicates it can't be calculated quickly.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.ToNodeValence">
            <summary>
            Shortcut for returning the number of edges (including this one) connected to the
            ToNode.  A value of 0 indicates it can't be calculated quickly.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.Length">
            <summary>
            Gets the length of this edge.  
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.FromToAllowed">
            <summary>
            Gets whether this edge can be traversed from the "from" node to 
            the "to" node.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.ToFromAllowed">
            <summary>
            Gets whether this edge can be traversed from the "to" node to the
            "from" node.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.Speed">
            <summary>
            Gets the speed this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.NumberOfLanes">
            <summary>
            Gets the number of lanes.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.Color">
            <summary>
            Gets the color of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.ApproximateFromAzimuth">
            <summary>
            Gets the FromAzimuth of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.ApproximateToAzimuth">
            <summary>
            Gets the ToAzimuth of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.HasTMCCode">
            <summary>
            Gets the HasTMCCode of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsUTurnLegal">
            <summary>
            Gets the IsUTurnLegal of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsRightHandDriving">
            <summary>
            Gets the IsRightHandDriving of this edge.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsSeasonalClosure">
            <summary>
            Gets whether edge is seasonally closed
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsPaved">
            <summary>
            IsPaved
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsPrivate">
            <summary>
            IsPrivate
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsRoundabout">
            <summary>
            IsRoundabout
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsToll">
            <summary>
            IsToll
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsThroughTrafficAllowed">
            <summary>
            IsThroughTrafficAllowed
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsFerry">
            <summary>
            IsFerry
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsTransit">
            <summary>
            Gets whether this edge is a transit line.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsStartEdge">
            <summary>
            Gets whether this edge is a start edge in a turn restriction.
            </summary>
            <remarks>Always returns false because there are no 
            turn-restrictions in memory data sources.</remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsViaEdge">
            <summary>
            Gets whether this edge is a via edge in a polyvalent turn restriction.
            </summary>
            <remarks>Always returns false because there are no 
            turn-restrictions in memory data sources.</remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsEndEdge">
            <summary>
            Gets whether this edge is an end edge in a turn restriction.
            </summary>
            <remarks>Always returns false because there are no 
            turn-restrictions in memory data sources.</remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.RoadClassification">
            <summary>
            RoadClassification
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.RoutingHierarchy">
            <summary>
            RoutingHierarchy
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.DividerType">
            <summary>
            Divider Type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsDividerPhysical">
            <summary>
            IsDividerPhysical
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.PrimitiveId">
            <summary>
            Gets the primitive id that identifies this edge.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.IsAutoAllowed">
            <summary>
            Gets whether a regular automobile can traverse this edge.
            </summary>
            <remarks>Always returns true in a memory data source.</remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryEdge.TransitLineId">
            <summary>
            Gets the transit line identifier.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode">
            <summary>
            Protected MemoryNode for XmlDataSource
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.Node">
            <summary>
            A topological node to which zero to many edges connect.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.Node.nodeSortKeyInvalid">
            <summary>
            A special value that indicates an uninitialized node sort key
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Node.GetEdges">
            <summary>
            Gets the collection of edges that connect to this node.
            </summary>		
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Node.GetApproximateDistance(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Gets the approximate distance to a coordinate in meters.
            </summary>
            <param name="coordinate"></param>
            <returns>The approximate distance in meters.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Node.GetApproximatePosition3D">
            <summary>
            Returns the approximate XYZ coordinate of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Node.GetApproximatePosition2D">
            <summary>
            Returns the approximate Lat/Long of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Node.Equals(System.Object)">
            <summary>
            A method to determine if two "Node" objects represent the same node entity
            </summary>
            <param name="obj"></param>
            <returns>"true" if the two "Node" objects represent the same node entity, "false" otherwise</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Node.GetHashCode">
            <summary>
            Required to be overridden because Object.Equals is overridden
            </summary>
            <returns>An "int" value that can be used as the key for storing nodes in a dictionary for example</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.Node.GetNodeSortKey">
            <summary>
            Provides a sort key that can be used to sort nodes that returns the same value
            for two "Node" objects that represent the same node entity and different values otherwise
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.Node.PrimitiveId">
            <summary>
            Gets the primitive id.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.#ctor(Microsoft.MapPoint.Data.MemoryDataSource,System.Int32,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Int32[],Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Creates a new MemoryNode with a reference to a primitive.
            </summary>
            <param name="memoryDataSource"></param>
            <param name="offset"></param>
            <param name="latlong"></param>
            <param name="edgeIds"></param>
            <param name="primitiveId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.#ctor(Microsoft.MapPoint.Data.MemoryDataSource,System.Int32,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Int32[])">
            <summary>
            Creates a new MemoryNode.
            </summary>
            <param name="memoryDataSource"></param>
            <param name="offset"></param>
            <param name="latlong"></param>
            <param name="edgeIds"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.GetEdges">
            <summary>
            Gets the collection of edges that connect to this node.
            </summary>		
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.CalculateSizeInBytes">
            <summary>
            Calculates the number of bytes this object consumes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.GetApproximatePosition3D">
            <summary>
            Returns the approximate position of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.GetApproximatePosition2D">
            <summary>
            Returns the approximate lat/long of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.GetHashCode">
            <summary>
            Gets a hash code for this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.Equals(System.Object)">
            <summary>
            Determines if another object is equal to this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.GetNodeSortKey">
            <summary>
            NOT IMPLEMENTED FOR CLASS "MemoryNode"
            WILL THROW AN EXCEPTION IF CALLED
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.Offset">
            <summary>
            Gets the offset of the node.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.EdgeCount">
            <summary>
            Gets the number of edges connected to this node
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryNode.PrimitiveId">
            <summary>
            Gets the primitive id.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveSpatialResult">
            <summary>
            The result for a primitive spatial query
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpatialResult.SetResultStatus(Microsoft.MapPoint.Data.ResultStatus)">
            <summary>
            Sets the stauts
            </summary>
            <param name="newStatus"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpatialResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-Generic version of IEnumerable, just call through to generic version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpatialResult.GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveSpatialResult.Status">
            <summary>
            Gets The status of the result
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.PrimitiveEnumerable.EntityMatches(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression)">
            <summary>
            Does the entity match the supplied filters?
            </summary>
            <param name="entity"></param>
            <param name="entityTypeFilter"></param>
            <param name="entityPropertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.PrimitiveEnumerable.PrimitiveMatches(Microsoft.MapPoint.Data.Primitive,Microsoft.MapPoint.Data.LatLongBoundedQueryRegion,Microsoft.MapPoint.Geometry.Geometry2.Box2,Microsoft.MapPoint.Geometry.Geometry3.Box3,System.Double)">
            <summary>
            Does the primitive match the supplied filters?
            </summary>
            <param name="primitive"></param>
            <param name="boxFixed"></param>
            <param name="boxFloat"></param>
            <param name="boxExtruded"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.BucketPrimitiveSpatialResult">
            <summary>
            The result for a primitive bucket spatial query
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitiveSpatialResult.SetResultStatus(Microsoft.MapPoint.Data.ResultStatus)">
            <summary>
            Sets the stauts
            </summary>
            <param name="newStatus"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitiveSpatialResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-Generic version of IEnumerable, just call through to generic version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitiveSpatialResult.GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BucketPrimitiveSpatialResult.Status">
            <summary>
            Gets The status of the result
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive">
            <summary>
            The memory implementation of a primitive.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Primitive">
            <summary>
            Represents a piece of an Entity that may contain some geometry and 
            properties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.GetPrimitiveId">
            <summary>
            Get the Id for this primitive.  Primitives that are constructed 
            directly from the Primitive class will always return null.  
            Derived classes may return their own Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.Initialize(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry,Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection)">
            <summary>
            Called by all constructors to set up the primitive.
            </summary>
            <param name="entity"></param>
            <param name="type"></param>
            <param name="geometry"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.#ctor(Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Creates a bare-bones <see cref="T:Microsoft.MapPoint.Data.Primitive"/> whose pieces must be set individually.
            </summary>
            <param name="primitiveType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.#ctor(Microsoft.MapPoint.Data.PrimitiveSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.Primitive"/> class from a specification.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry,Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.Primitive"/> class.
            </summary>
            <param name="entity">The entity that contains this primitive.</param>
            <param name="primitiveType">The type of this primitive.</param>
            <param name="geometry">The geometry that this primitive represents.</param>
            <param name="properties">The property collection, or null if no properties</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.Primitive"/> class.
            </summary>
            <param name="entity">The entity that contains this primitive.</param>
            <param name="primitiveType">The type of this primitive.</param>
            <param name="geometry">The geometry that this primitive represents.</param>
            <param name="properties">The property collection, or null if no properties</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.Primitive"/> class.
            </summary>
            <param name="entity">The entity that contains this primitive.</param>
            <param name="primitiveType">The type of this primitive.</param>
            <param name="geometry">The geometry that this primitive represents.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.SetEntity(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Overwrites any existing entity with the specified one.
            Use with care.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.SetGeometry(Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Overwrites any existing geometry with the specified one.
            Use with care.
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.SetEmptyPropertyValues">
            <summary>
            Overwrites any existing property values with an empty set.
            Use with care.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.SetPropertyValues(System.Object[])">
            <summary>
            Overwrites any existing property values with the specified ones.
            Use with care.
            </summary>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.CopyDataFromSpecification(Microsoft.MapPoint.Data.PrimitiveSpecification)">
            <summary>
            Helper function for update
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.CalculateBaseSizeInBytes">
            <summary>
            Gets the managed size of this primitive.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Primitive.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.Entity">
            <summary>
            Gets the Id of the Entity with which this primitive is associated.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.Properties">
            <summary>
            Gets the properties of the primitive.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.PrimitiveResultMask">
            <summary>
            Gets the results that are included with this primitive.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.MaximumScale">
            <summary>
            The maximum scale for which this primitive is valid.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.MinimumScale">
            <summary>
            The minimum scale for which this primitive is valid.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.Type">
            <summary>
            Gets the Type information for this Primitive.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.Geometry">
            <summary>
            Gets the geometry that this primitive contains.  This 
            value may be null if this primitive's geometry has not been loaded.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Primitive.IsObsolete">
            <summary>
            Gets whether the object is obsolete (i.e. the data source's
            ontology has been updated since obtaining this object).
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.SetScales(System.Double,System.Double)">
            <summary>
            Sets the scale denominators for this primitive.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.#ctor(Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId,Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry,Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive"/> class.
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
            <param name="primitiveType"></param>
            <param name="geometry"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry,Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive"/> class.
            </summary>
            <param name="entity"></param>
            <param name="primitiveType"></param>
            <param name="geometry"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive"/> class.
            </summary>
            <param name="entity"></param>
            <param name="primitiveType"></param>
            <param name="geometry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.#ctor(Microsoft.MapPoint.Data.PrimitiveSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive"/> class.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.GetPrimitiveId">
            <summary>
            Get the Id for this primitive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.SetPropertyValues(System.Object[])">
            <summary>
            Set the property values for the primitive
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.MaximumScale">
            <summary>
            The maximum scale for which this primitive is valid.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitive.MinimumScale">
            <summary>
            The minimum scale for which this primitive is valid.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId">
            <summary>
            Encapsulates a primitive id used in the <see cref="T:Microsoft.MapPoint.Data.MemoryDataSource"/>.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveId">
            <summary>
            A unique identifier for a primitive.
            </summary>	
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveId.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveId.Serialize">
            <summary>
            Serializes this PrimitiveId into a byte array.  Allows for specialized and shortform saving.
            Use DataSource.DeserializePrimitiveId to reconstitute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveId.Serialize(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Serializes this PrimitiveId into a byte array.  Allows for specialized and shortform saving.
            Use DataSource.DeserializePrimitiveId to reconstitute.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.DataSourceReference">
            <summary>
            Gets the data source reference for this id.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.Value">
            <summary>
            Gets the value for this id.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.#ctor(Microsoft.MapPoint.Data.DataSourceReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId"/> class.
            </summary>
            <param name="dataSourceReference"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.#ctor(Microsoft.MapPoint.Data.DataSourceReference,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId"/> class.
            </summary>
            <param name="dataSourceReference"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.Equals(System.Object)">
            <summary>
            Implement value equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.GetHashCode">
            <summary>
            Implement hash code generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.ToString">
            <summary>
            Implement user readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryDataSource.MemoryPrimitiveId.Serialize(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            PrimitiveId serialization not implemented in this DataSource
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.BucketPrimitivePair">
            <summary>
            Associates a bucket with a primitive.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.BucketPrimitivePair.BucketId">
            <summary>
            Gets and sets the id bucket into which this primitive has been placed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitivePair.#ctor(Microsoft.MapPoint.Data.Primitive,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.BucketPrimitivePair"/> class.
            </summary>
            <param name="primitive">The primitive.</param>
            <param name="bucketId">The style bucket ID.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitivePair.ValidatePrimitive(Microsoft.MapPoint.Data.Primitive,System.String)">
            <summary>
            Perform all necessary validation on a primitive to ensure that it's
            okay to set as the Primitive property.
            </summary>
            <param name="primitive"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitivePair.op_Equality(Microsoft.MapPoint.Data.BucketPrimitivePair,Microsoft.MapPoint.Data.BucketPrimitivePair)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitivePair.op_Inequality(Microsoft.MapPoint.Data.BucketPrimitivePair,Microsoft.MapPoint.Data.BucketPrimitivePair)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitivePair.Equals(System.Object)">
            <summary>
            Compares obj to this struct and returns true if they are equal, false otherwise.
            We choose to override the default implementation because reflection is computationally 
            expensive.  Note: this implementation also uses reflection, but not in all cases.
            </summary>
            <param name="obj">The object to compare to this</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitivePair.Equals(Microsoft.MapPoint.Data.BucketPrimitivePair)">
            <summary>
            Compares bucketPrimitivePair to this struct and returns true if they are equal, false otherwise.
            </summary>
            <param name="bucketPrimitivePair">The struct to compare to this</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BucketPrimitivePair.GetHashCode">
            <summary>
            Returns an int hashcode for this struct.
            Note: if you override Equals without overriding GetHashCode() you get a build warning-as-error.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BucketPrimitivePair.Primitive">
            <summary>
            Gets and sets the primitive.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Cache">
            <summary>
            Cache.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.Clear">
            <summary>
            Clears entire contents, for all dataSources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.TryGetValue(Microsoft.MapPoint.Data.DataSource,System.Object,Microsoft.MapPoint.Data.CacheObject@,System.Boolean)">
            <summary>
            Trys to get a value out of the cache, returning false if it cannot.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
            <param name="item"></param>
            <param name="willRequest">Set to true if you will request the item if it is not in the cache</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.Put(Microsoft.MapPoint.Data.DataSource,System.Object,Microsoft.MapPoint.Data.CacheObject)">
            <summary>
            Put an item into the cache, with a particular key and priority.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.Delete(Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Deletes an item from the cache, with a particular key.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.UpdateSize(Microsoft.MapPoint.Data.DataSource,System.Object,System.Int64)">
            <summary>
            Updates the size of the item in the cache corresponding to a particular key.
            This will throw if the item does not exist in the cache.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
            <param name="newSize"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.ClearDataSource(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Clear all contents for a particular dataSource.
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.GetObjectsOfType(Microsoft.MapPoint.Data.DataSource,System.Type)">
            <summary>
            Gets all of the entries of a specified type.
            </summary>
            <param name="dataSource"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.DeleteObjectsOfType(Microsoft.MapPoint.Data.DataSource,System.Type)">
            <summary>
            Deletes all of the entries of a specified type.
            </summary>
            <param name="dataSource"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.GetWorkingSize">
            <summary>
            Gets the max working size
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.SetWorkingSize(System.Int64)">
            <summary>
            Sets the working size to the specified number of bytes.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Cache.GetEnumerator">
            <summary>
            Enumerates through the entries for debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.CacheObject">
            <summary>
            Base class for all objects added to the cache.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheObject.AddRef">
            <summary>
            Adds a reference to this block.  This should be rigorously joined to a Release.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheObject.Release">
            <summary>
            Releases a reference to this block.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheObject.GetSize">
            <summary>
            Gets the size of the block, in bytes.
            </summary>
            <remarks>
            This value is used by the caching code when trying to
            decide what will fit in the cache.
            </remarks>
            <returns>Size in bytes.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheObject.SetSize(System.Int64)">
            <summary>
            Sets the size of the block, in bytes.
            </summary>
            <remarks>
            This value is used by the caching code when trying to
            decide what will fit in the cache.  Take care when setting.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheObject.SetSize(System.Int64,Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Sets the size of the block, in bytes.  Also updates the cache.
            </summary>
            <remarks>
            This value is used by the caching code when trying to
            decide what will fit in the cache.  Take care when setting.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheObject.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheObject.OnRemovedFromCache">
            <summary>
            If there is any special work that should be done when this object is removed from 
            the cache, do so here.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CacheObject.ReferenceCount">
            <summary>
            Gets the number of references pointing to this block.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameArrayCollection">
            <summary>
            A read-only collection of AbstractName objects.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameCollection">
            <summary>
            A read-only collection of AbstractName objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AbstractNameCollection.NotFound">
            <summary>
            Indicates that a name was not found.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AbstractNameCollection.PrimaryNameRole">
            <summary>
            The primary name role.  Helps determines how concrete derived classes will behave.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AbstractNameCollection.InvariantCulture">
            <summary>
            The invariant culture.  Helps determines how concrete derived classes will behave.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AbstractNameCollection.InvariantLcid">
            <summary>
            The invariant culture's LCID.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AbstractNameCollection.EmptyNameArray">
            <summary>
            An empty array of names for use when returning a default empty state.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.AbstractNameCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.Find(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.Int32@,System.Int32@)">
            <summary>
            Finds the range of names matching the specified culture and name role.
            Returns false if none are found.
            </summary>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <param name="startIndex">The index of the first name in the collection with that culture.</param>
            <param name="endIndex">The index of the last name in the collection with that culture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.GetNamesArray(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an array.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.GetNames(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an enumerator.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.GetNamesArray(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.GetNames(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.GetNamesArray(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.GetNames(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.Contains(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets whether the collection contains any names of the specified culture
            and name role.
            </summary>
            <remarks>
            This method follows culture-chaining rules, so it will return true if
            there are any names from a parent culture of the one specified.
            </remarks>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <returns>Whether the collection contains any names of the specified culture and name role.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.Compare(Microsoft.MapPoint.Data.AbstractName,Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Compare two names.
            </summary>
            <param name="name1">An AbstractName.</param>
            <param name="name2">An AbstractName.</param>
            <returns>Comparison value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.SortingLcid(System.Int32)">
            <summary>
            Gets LCID to use for sorting purposes.
            </summary>
            <param name="lcid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.CompareCultures(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Compares two cultures.  Uses LCID, except that invariant culture is
            jury-rigged to come first.
            </summary>
            <param name="culture1"></param>
            <param name="culture2"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameCollection.DefaultName">
            <summary>
            Returns the default name for this collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>AbstractName object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameCollection.AbstractNameComparer">
            <summary>
            Compares two abstract names, first by culture, then by name role, then by GetType(), then by ToString().
            Used to sort abstract names in completely deterministic order.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameCollection.AbstractNameComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="x">NameEntry or CultureInfo object.</param>
            <param name="y">NameEntry or CultureInfo object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.#ctor(Microsoft.MapPoint.Data.AbstractName[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.Find(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.Int32@,System.Int32@)">
            <summary>
            Finds the range of names matching the specified culture and name role.
            Returns false if none are found.
            </summary>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <param name="startIndex">The index of the first name in the collection with that culture.</param>
            <param name="endIndex">The index of the last name in the collection with that culture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameMatches(Microsoft.MapPoint.Data.AbstractName,Microsoft.MapPoint.Data.NameRole,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Gets whether the specified name matches the specified
            name role and culture.
            </summary>
            <param name="name"></param>
            <param name="nameRole"></param>
            <param name="culture"></param>
            <param name="allowCultureChaining"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetNamesArray(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an array.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetNames(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an enumerator.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetNamesArray(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetNames(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetNamesArray(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetNames(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.Contains(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets whether the collection contains any names of the specified culture
            and name role.
            </summary>
            <remarks>
            This method follows culture-chaining rules, so it will return true if
            there are any names from a parent culture of the one specified.
            </remarks>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <returns>Whether the collection contains any names of the specified culture and name role.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CreateWrapper(Microsoft.MapPoint.Data.AbstractName[])">
            <summary>
            Create a lightweight AbstractNameCollection wrapper around an
            existing list. IMPORTANT: The array must be in sorted order!
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.AccumulateCultureNames(System.Globalization.CultureInfo,System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            Look for names with the specified culture and add them to the list.
            Don't include name roles that we've already used.
            </summary>
            <param name="culture"></param>
            <param name="list"></param>
            <param name="usedNameRoles"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.UseCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets a culture to use. Will never be null.
            </summary>
            <param name="culture">Culture. May be null.</param>
            <returns>Culture. Will never be null.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.Find(System.Globalization.CultureInfo,System.Int32@,System.Int32@)">
            <summary>
            Finds the range of names matching the specified culture.
            Returns false if none are found. Does not do culture chaining.
            </summary>
            <param name="culture">The culture to find.</param>
            <param name="startIndex">The index of the first name in the collection with that culture.</param>
            <param name="endIndex">The index of the last name in the collection with that culture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameArrayCollection.EmptyArrayCollection">
            <summary>
            Gets a read-only empty instance of the class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameArrayCollection.DefaultName">
            <summary>
            Returns the default name for this collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameArrayCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>AbstractName object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AbstractNameArrayCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CultureNameRoleEnumerable">
            <summary>
            Utility class for enumerating through names with a given culture and name role.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CultureNameRoleEnumerable.#ctor(Microsoft.MapPoint.Data.AbstractNameArrayCollection,System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
            <param name="culture"></param>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CultureNameRoleEnumerable.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameRoleEnumerable">
            <summary>
            Utility class for enumerating through names with a given name role.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameRoleEnumerable.#ctor(Microsoft.MapPoint.Data.AbstractNameArrayCollection,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameRoleEnumerable.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameKey">
            <summary>
            Internal class used for looking up names by culture and role.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CultureComparer">
            <summary>
            Comparer that uses culture only. Can compare NameEntry
            objects against each other, and against CultureInfo objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CultureComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="x">NameEntry or CultureInfo object.</param>
            <param name="y">NameEntry or CultureInfo object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.CultureComparer.GetCulture(System.Object)">
            <summary>
            Gets the culture to use for comparison.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameKeyComparer">
            <summary>
            Comparer that uses culture and name role only. Can compare NameEntry
            objects against each other, and against NameKey objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameKeyComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="x">AbstractName or NameKey object.</param>
            <param name="y">AbstractName or NameKey object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AbstractNameArrayCollection.NameKeyComparer.GetKey(System.Object,System.Globalization.CultureInfo@,Microsoft.MapPoint.Data.NameRole@)">
            <summary>
            Gets the culture and name role for an object.
            </summary>
            <param name="obj"></param>
            <param name="culture"></param>
            <param name="nameRole"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection">
            <summary>
            A writable collection of PrimitiveId objects.
            </summary>
            <remarks>
            A writeable collection of PrimitiveId objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.PrimitiveId,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.Add(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.Remove(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight PrimitiveIdWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.CopyTo(Microsoft.MapPoint.Data.PrimitiveId[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>PrimitiveId object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityNameQueryResultCollection">
            <summary>
            A read-only collection of EntityNameQueryResult objects.
            </summary>
            <summary>
            A read-only collection of EntityNameQueryResult objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.Sort">
            <summary>
            Resorts the objects in the collection.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityNameQueryResult[])">
            <summary>
            Create a lightweight EntityNameQueryResultCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.#ctor(Microsoft.MapPoint.Data.EntityNameQueryResult[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.CopyTo(Microsoft.MapPoint.Data.EntityNameQueryResult[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>EntityNameQueryResult object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResultCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection">
            <summary>
            A writable collection of AbstractName objects.
            </summary>
            <remarks>
            A writeable collection of EntityId objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.EntityId,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.Add(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.Remove(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight EntityIdWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.CopyTo(Microsoft.MapPoint.Data.EntityId[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>EntityId object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityIdWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityNameSingleCollection">
            <summary>
            A read-only collection of AbstractName objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.Find(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.Int32@,System.Int32@)">
            <summary>
            Finds the range of names matching the specified culture and name role.
            Returns false if none are found.
            </summary>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <param name="startIndex">The index of the first name in the collection with that culture.</param>
            <param name="endIndex">The index of the last name in the collection with that culture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetNamesArray(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an array.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetNames(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an enumerator.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetNamesArray(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetNames(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetNamesArray(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetNames(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.Contains(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets whether the collection contains any names of the specified culture
            and name role.
            </summary>
            <remarks>
            This method follows culture-chaining rules, so it will return true if
            there are any names from a parent culture of the one specified.
            </remarks>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <returns>Whether the collection contains any names of the specified culture and name role.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetEntityName">
            <summary>
            Gets the single member of this collection as an entity name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameSingleCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameSingleCollection.DefaultName">
            <summary>
            Returns the default name for this collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameSingleCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>AbstractName object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameSingleCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MatchedEntityNameCollection">
            <summary>
            A read-only collection of MatchedEntityName objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MatchedEntityNameCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityNameCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityNameCollection.CreateWrapper(Microsoft.MapPoint.Data.MatchedEntityName[])">
            <summary>
            Create a lightweight MatchedEntityNameCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityNameCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityNameCollection.#ctor(Microsoft.MapPoint.Data.MatchedEntityName[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityNameCollection.CopyTo(Microsoft.MapPoint.Data.MatchedEntityName[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityNameCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MatchedEntityNameCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>MatchedEntityName object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MatchedEntityNameCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MatchedEntityNameCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MatchedEntityNameCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection">
            <remarks>
            A writeable collection of MatchedEntityName objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.Add(Microsoft.MapPoint.Data.MatchedEntityName)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.MatchedEntityName)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.Remove(Microsoft.MapPoint.Data.MatchedEntityName)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight MatchedEntityNameWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.MatchedEntityName,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.CopyTo(Microsoft.MapPoint.Data.MatchedEntityName[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>MatchedEntityName object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.MatchedEntityNameWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveIdCollection">
            <summary>
            A read-only collection of PrimitiveId objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveIdCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdCollection.CreateWrapper(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Create a lightweight PrimitiveIdCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdCollection.#ctor(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdCollection.CopyTo(Microsoft.MapPoint.Data.PrimitiveId[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>PrimitiveId object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection">
            <summary>
            A read-only collection of PrimitiveIdMappingKey objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.CreateWrapper(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            Create a lightweight PrimitiveIdMappingKeyCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.#ctor(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.CopyTo(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>PrimitiveIdMappingKey object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdMappingKeyCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection">
            <remarks>
            A writeable collection of PrimitiveIdMappingKey objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.Add(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.Remove(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight PrimitiveIdMappingKeyWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.CopyTo(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>PrimitiveIdMappingKey object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveIdMappingKeyWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.StreetNameSingleCollection">
            <summary>
            A read-only collection of AbstractName objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.#ctor(System.String,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructor.  The indices should indicate the first character of each section of the name.
            If a section is not present, set it to byte.MaxValue.
            </summary>
            <param name="streetName"></param>
            <param name="prefixIndex"></param>
            <param name="bodyIndex"></param>
            <param name="suffixIndex"></param>
            <param name="typeIndex"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.Find(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.Int32@,System.Int32@)">
            <summary>
            Finds the range of names matching the specified culture and name role.
            Returns false if none are found.
            </summary>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <param name="startIndex">The index of the first name in the collection with that culture.</param>
            <param name="endIndex">The index of the last name in the collection with that culture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetNamesArray(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an array.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetNames(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets the names corresponding to the specified culture and name role.
            Note that Find() performs faster, as it does not have to allocate
            an enumerator.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetNamesArray(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetNames(System.Globalization.CultureInfo)">
            <summary>
            Gets all names with the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetNamesArray(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetNames(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets all names with the specified name role.
            </summary>
            <param name="nameRole"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.Contains(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Gets whether the collection contains any names of the specified culture
            and name role.
            </summary>
            <remarks>
            This method follows culture-chaining rules, so it will return true if
            there are any names from a parent culture of the one specified.
            </remarks>
            <param name="culture">The culture to find.</param>
            <param name="nameRole">The name role to find.</param>
            <returns>Whether the collection contains any names of the specified culture and name role.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetStreetName">
            <summary>
            Gets the single member of this collection as an entity name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetNameSingleCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetNameSingleCollection.DefaultName">
            <summary>
            Returns the default name for this collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetNameSingleCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>AbstractName object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetNameSingleCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.CacheEntry">
            <summary>
            A class that holds an object in the cache.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CacheEntry.DataSource">
            <summary>
            Gets the data source to which this entry belongs.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CacheEntry.Key">
            <summary>
            Gets the key associated with this item.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CacheEntry.Item">
            <summary>
            Gets the item.  
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CacheEntry.Next">
            <summary>
            Gets and sets the next (lower) entry in the priority chain.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CacheEntry.Previous">
            <summary>
            Gets and sets the previous (higher) entry in the priority chain.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheEntry.#ctor(Microsoft.MapPoint.Data.DataSource,System.Object,Microsoft.MapPoint.Data.CacheObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.CacheEntry"/> class.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheEntry.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheEntry.GetSize">
            <summary>
            Gets the estimated size, in bytes, of this entry.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.CacheMemory">
            <summary>
            Encapsulates memory processing for the cache.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CacheMemory.LowPressure">
            <summary>
            Whole number percentage indicating the low threshold of pressure.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CacheMemory.HighPressure">
            <summary>
            Whole number percentage indicating the high threshold of pressure.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheMemory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.CacheMemory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheMemory.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CacheMemory.CalculatePressure">
            <summary>
            Calculates a whole number percentage representing the amount
            of pressure the current unmanaged code is exerting.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CacheMemory.TotalManagedBytes">
            <summary>
            Gets the total amount of managed memory thought to be allocated
            the last time the pressure was calculated.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CacheMemory.MemoryStatus">
            <summary>
            Gets the memory status the last time the pressure was calculated.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CacheMemory.TotalMemory">
            <summary>
            Gets the amount of memory that we have to work with.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CacheMemory.Pressure">
            <summary>
            Gets the last calculated pressure value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CacheMemory.PressureAverage">
            <summary>
            Gets the average of the last few pressure values.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.CachePriority">
            <summary>
            Summary description for CachePriority.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CachePriority.Low">
            <summary>
            low.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CachePriority.BelowNormal">
            <summary>
            BelowNormal.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CachePriority.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CachePriority.AboveNormal">
            <summary>
            AboveNormal.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CachePriority.High">
            <summary>
            High.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AddressParsingCapability">
            <summary>
            The capability that describes Address parsing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressParsingCapability.#ctor(System.String,Microsoft.MapPoint.Data.SpatialExtent)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="spatialExtent"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AddressParsingCapabilitySerializer">
            <summary>
            A serializer for Content Capability.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressParsingCapabilitySerializer.Serialize(Microsoft.MapPoint.Data.ContentCapability,System.IO.BinaryWriter)">
            <summary>
            Serialize a content capability.
            </summary>
            <param name="capability"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AddressParsingCapabilitySerializer.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize a content capability.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute">
            <summary>
            Attributes that describe the supported geometry types.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.#ctor">
            <summary>
            Default constructor.  It assumes the default value GeometryTypes.None.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.#ctor(Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes)">
            <summary>
            Cstor.
            </summary>
            <param name="geometryTypesSupported"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.Match(System.Object)">
            <summary>
            Determines whether another GeometryTypesSupportedAttribute equals this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypesSupported">
            <summary>
            Gets the supported geometry types.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes">
            <summary>
            The various geometry types.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.Box2D">
            <summary>
            2D box.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.Curve2D">
            <summary>
            2D curve.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.Point2D">
            <summary>
            2D point.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.Polygon2D">
            <summary>
            2D polygon.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.Polyline2D">
            <summary>
            2D polyline.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.Ring2D">
            <summary>
            2D ring.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryTypesSupportedAttribute.GeometryTypes.All">
            <summary>
            All geometries.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute">
            <summary>
            Attributes that describe the supported linear-referencing types..
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.#ctor">
            <summary>
            Default constructor.  It assumes the default value LinearReferencingTypes.None.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.#ctor(Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.LinearReferencingTypes)">
            <summary>
            Cstor.
            </summary>
            <param name="linearReferencingTypesSupported"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.Match(System.Object)">
            <summary>
            Determines whether another LinearReferencingTypesSupportedAttribute equals this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.LinearReferencingTypesSupported">
            <summary>
            Gets the supported linear referencing types.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.LinearReferencingTypes">
            <summary>
            The various linear referencing types.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.LinearReferencingTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.LinearReferencingTypes.RelativePoint">
            <summary>
            Relative point.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.LinearReferencingTypes.RelativeLine">
            <summary>
            Relative line.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.LinearReferencingTypesSupportedAttribute.LinearReferencingTypes.All">
            <summary>
            All linear reference types.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.QueriesSupportedAttribute">
            <summary>
            Attributes that describe the supported queries.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.QueriesSupportedAttribute.#ctor">
            <summary>
            Default constructor.  It assumes the default value Queries.None.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.QueriesSupportedAttribute.#ctor(Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries)">
            <summary>
            Cstor.
            </summary>
            <param name="queriesSupported"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Match(System.Object)">
            <summary>
            Determines whether another QueriesSupportedAttribute equals this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.QueriesSupportedAttribute.QueriesSupported">
            <summary>
            Gets the supported queries.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries">
            <summary>
            The various queries types.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.Entities">
            <summary>
            Entities.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.EntitiesByName">
            <summary>
            Entities by name.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.EntitiesById">
            <summary>
            Entities by id.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.EntitiesByIds">
            <summary>
            Entities by ids.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.Primitives">
            <summary>
            Primitives.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.PrimitivesByIds">
            <summary>
            Primitives by ids.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.PrimitivesByEntityId">
            <summary>
            Primitives by entity id.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.BucketedPrimitives">
            <summary>
            Bucketed Primitives.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.EdgesByIds">
            <summary>
            Edges by ids.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.ContextRelationships">
            <summary>
            Context relationships.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.QueriesSupportedAttribute.Queries.All">
            <summary>
            All query types.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RootContextCapability">
            <summary>
            Capability of having a root context for find-by-name operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RootContextCapability.RootContextKeyName">
            <summary>
            The key name for RootContextCapability objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RootContextCapability.#ctor(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RootContextCapability.GetEntitySpatialExtent(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Get a spatial extent for a particular entity.
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RootContextCapability.RootContextId">
            <summary>
            The root context for finding entities by name.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RootContextCapabilitySerializer">
            <summary>
            A serializer for Content Capability.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RootContextCapabilitySerializer.Serialize(Microsoft.MapPoint.Data.ContentCapability,System.IO.BinaryWriter)">
            <summary>
            Serialize a content capability.
            </summary>
            <param name="capability"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RootContextCapabilitySerializer.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize a content capability.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute">
            <summary>
            Attributes that describe the supported topological primitive types.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.#ctor">
            <summary>
            Default constructor.  It assumes the default value TopologicalPrimitiveTypes.None.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.#ctor(Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.TopologicalPrimitiveTypes)">
            <summary>
            Cstor.
            </summary>
            <param name="topologicalPrimitiveTypesSupported"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.Match(System.Object)">
            <summary>
            Determines whether another TopologicalPrimitiveTypesSupportedAttribute equals this one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.TopologicalPrimitiveTypesSupported">
            <summary>
            Gets the supported topological primitive types.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.TopologicalPrimitiveTypes">
            <summary>
            The various topological primitive types.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.TopologicalPrimitiveTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.TopologicalPrimitiveTypes.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.TopologicalPrimitiveTypes.Edge">
            <summary>
            Edge.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.TopologicalPrimitiveTypesSupportedAttribute.TopologicalPrimitiveTypes.All">
            <summary>
            All topological primitives.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection">
            <remarks>
            A writeable collection of AbstractName objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.GetReadOnlyCopy">
            <summary>
            Gets a read-only copy of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.Add(Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Add an name to the collection.  Must be one of the following types:
            EntityName, StreetName, ShieldName
            </summary>
            <param name="name">The EntityName, StreetName, or ShieldName to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.Remove(Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight AbstractNameWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.AbstractName,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.CopyTo(Microsoft.MapPoint.Data.AbstractName[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>AbstractName object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.AbstractNameWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection">
            <remarks>
            A read-only collection of ContentCapability objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.CreateWrapper(System.Collections.Hashtable)">
            <summary>
            Create a lightweight ContentCapabilityKeyedCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.#ctor(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Private constructor.
            </summary>
            <param name="lookup">Lookup values.</param>
            <param name="dummy">Not used; present only to give this constructor a different signature than the one above, since Hashtable is ICollection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a ContentCapability whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.ContentCapability@)">
            <summary>
            Tries to get the ContentCapability whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.CopyTo(Microsoft.MapPoint.Data.ContentCapability[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.Item(System.String)">
            <summary>
            Gets the ContentCapability object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>ContentCapability.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContentCapabilityKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection">
            <remarks>
            A writeable collection of ContentCapability objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.#ctor(System.Collections.Hashtable,System.Boolean)">
            <summary>
            Private constructor.
            </summary>
            <param name="lookup">Lookup values.</param>
            <param name="dummy">Not used; present only to give this constructor a different signature than the one above, since Hashtable is ICollection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.Add(Microsoft.MapPoint.Data.ContentCapability)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.Replace(Microsoft.MapPoint.Data.ContentCapability)">
            <summary>
            Replace an item in the collection.
            </summary>
            <param name="item">Item to replace.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.CreateWrapper(System.Collections.Hashtable)">
            <summary>
            Create a lightweight ContentCapabilityKeyedCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.ValidateItem(Microsoft.MapPoint.Data.ContentCapability,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a ContentCapability whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.ContentCapability@)">
            <summary>
            Tries to get the ContentCapability whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.ContentCapability[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the ContentCapability object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>ContentCapability.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ContentCapabilityWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.CultureInfoToStringLookup">
            <summary>
            Manually created code for CultureInfoToStringLookup.
            </summary>
            <remarks>
            A read-only collection of String objects, keyed by CultureInfo.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.Contains(System.Globalization.CultureInfo)">
            <summary>
            Gets whether the specified culture can be gotten from the
            collection. Note that this will return true even if the culture
            itself is not present, as long as a culture to which it falls
            back is.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.TryGetValue(System.Globalization.CultureInfo,System.String@)">
            <summary>
            Tries to get the string with the specified key.
            If found, returns true; otherwise returns false.
            </summary>
            <param name="key">Key value to look for.</param>
            <param name="value">The value corresponding to the key, if found.</param>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.GetString(System.Collections.Hashtable,System.Globalization.CultureInfo)">
            <summary>
            Gets a string with the specified culture, falling back as required.
            Returns null if no string can be found.
            </summary>
            <param name="lookup"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CultureInfoToStringLookup.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.CreateWrapper(System.Collections.Hashtable)">
            <summary>
            Create a lightweight CultureInfoToStringLookup wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            hashtable can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the hashtable.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.GetInternalCopy">
            <summary>
            Get a copy of the lookup's internal hashtable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.GetWriteableCopy">
            <summary>
            Create a writeable copy of the lookiup.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.#ctor(System.Collections.Hashtable)">
            <summary>
            Private constructor.
            </summary>
            <param name="lookup">Lookup values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.CopyTo(Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookup.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CultureInfoToStringLookup.Item(System.Globalization.CultureInfo)">
            <summary>
            Gets the CultureInfo object with the specified key.
            If it does not exist, falls back to another culture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CultureInfoToStringLookup.Values">
            <summary>
            Gets the values in the lookup.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CultureInfoToStringLookup.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CultureInfoToStringLookup.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.CultureInfoToStringLookup.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup">
            <summary>
            Manually created code for CultureInfoToStringLookup.
            </summary>
            <remarks>
            A collection of String objects, keyed by CultureInfo.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Contains(System.Globalization.CultureInfo)">
            <summary>
            Gets whether the specified culture can be gotten from the
            collection. Note that this will return true even if the culture
            itself is not present, as long as a culture to which it falls
            back is.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.CreateWrapper(System.Collections.Hashtable)">
            <summary>
            Create a lightweight CultureInfoToStringWriteableLookup wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            hashtable can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created lookup ownership of the hashtable.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.ToReadOnly">
            <summary>
            Cheaply create a read-only lookup based on this
            writeable lookup. After calling this method, the
            lookup can no longer be modified.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this lookup, leaving this
             lookup unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the lookup, but leaves the lookup in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable lookup afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable lookup afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.#ctor(System.Collections.Hashtable)">
            <summary>
            Private constructor.
            </summary>
            <param name="lookup">Lookup values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Add(System.Globalization.CultureInfo,System.String)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="key">Key to add.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Remove(System.Globalization.CultureInfo)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="key">The key of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Replace(System.Globalization.CultureInfo,System.String)">
            <summary>
            Replace an item in the collection.  Add item if key is not present.
            </summary>
            <param name="key">Key to replace.</param>
            <param name="item">Item to replace.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.CopyTo(Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Item(System.Globalization.CultureInfo)">
            <summary>
            Gets the CultureInfo object with the specified key.
            If it does not exist, falls back to another culture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Values">
            <summary>
            Gets the values in the lookup.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry">
            <summary>
            An entry in an ICultureInfoToStringLookup.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.Value">
            <summary>
            Gets the value.
            </summary>
            <value />
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.#ctor(System.Globalization.CultureInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key.</param>
            <param name="objValue">Value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.Equals(System.Object)">
            <summary>
            Compares obj to this struct and returns true if they are equal, false otherwise.
            We choose to override the default implementation because reflection is computationally 
            expensive.  Note: this implementation also uses reflection, but not in all cases.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.Equals(Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry)">
            <summary>
            Compares CultureInfoToStringLookupEntry to this struct and returns true if they are equal, false otherwise.
            </summary>
            <param name="target">The struct to compare to this</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.op_Equality(Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry,Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry)">
            <summary>
            Tests for equality between two CultureInfoToStringLookupEntry
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.op_Inequality(Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry,Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry)">
            <summary>
            Tests for inequality between two CultureInfoToStringLookupEntry
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.CultureInfoToStringLookupEntry.GetHashCode">
            <summary>
            Returns an int hashcode for this struct.
            Note: if you override Equals without overriding GetHashCode() you get a build warning-as-error.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EdgeCollection">
            <summary>
            A read-only collection of Edge objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EdgeCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight EdgeCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeCollection.CopyTo(Microsoft.MapPoint.Data.Topology.Edge[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EdgeCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Edge object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EdgeCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EdgeCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EdgeCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection">
            <remarks>
            A writeable collection of Edge objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.Add(Microsoft.MapPoint.Data.Topology.Edge)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.Topology.Edge)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.Remove(Microsoft.MapPoint.Data.Topology.Edge)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight EdgeWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.Topology.Edge,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.CopyTo(Microsoft.MapPoint.Data.Topology.Edge[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Edge object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EdgeWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityIdCollection">
            <summary>
            A read-only collection of EntityId objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityIdCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityId[])">
            <summary>
            Create a lightweight EntityIdCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdCollection.#ctor(Microsoft.MapPoint.Data.EntityId[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdCollection.CopyTo(Microsoft.MapPoint.Data.EntityId[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityIdCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>EntityId object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityIdCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityIdCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityIdCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection">
            <remarks>
            A writeable collection of EntityPropertyDefinition objects, keyed by string.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EntityPropertyDefinition whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EntityPropertyDefinition@)">
            <summary>
            Tries to get the EntityPropertyDefinition whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.#ctor(Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Construct a read-only collection from a writeable collection of specifications.
            </summary>
            <param name="specifications"></param>
            <param name="owningEntityType"></param>
            <param name="enumDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.#ctor(System.Collections.ArrayList,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Construct a read-only collection from a collection of entity property data structures.
            Used only by deserialization code
            </summary>
            <param name="propertyData"></param>
            <param name="owningEntityType"></param>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.#ctor(Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntologyEnumDefinitions"></param>
            <param name="newOntologyEntityType"></param>
            <param name="baseOntologyProperties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EntityPropertyDefinition[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.EmptyValueCollection">
            <summary>
            Gets an empty instance of the collection
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.Item(System.String)">
            <summary>
            Gets the EntityPropertyDefinition object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EntityPropertyDefinition.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.Item(System.Int32)">
            <summary>
            Gets the EntityPropertyDefinition object with the specified index.
            </summary>
            <param name="index">The index of the property to get.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of EntityPropertyDefinitionSpecification objects, keyed by string.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Constructor. This version is called from EntityTypeSpecification's constructor.
            It generates a collection that's populated by the type's parent's properties
            (if any), but adds no other properties for the entity type itself.
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
            <param name="entityType">The entity type to which this belongs.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.EntityTypeSpecification,Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection)">
            <summary>
            Constructor. This version is called when building an OntologySpecification
            from an Ontology.
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
            <param name="entityType">The entity type to which this belongs.</param>
            <param name="definitions">The source name roles to copy data from</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.Type)">
            <summary>
            Create a new property definition and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Create a new property definition and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String)">
            <summary>
            Create a new property definition with an enumerated
            type and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="enumDefinitionKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a new property definition with an enumerated
            type and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="enumDefinitionKeyName"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
            <remarks>
            You can only use this to remove properties that are defined
            on this entity type. Attempting to remove a property inherited
            from a parent entity type will throw an exception.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EntityPropertyDefinitionSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification@)">
            <summary>
            Tries to get the EntityPropertyDefinitionSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.GetInternal(System.String)">
            <summary>
            Gets the item with the specified key name, or returns null if not found.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.ContainsInternal(System.String)">
            <summary>
            Gets whether the collection contains a property definition with
            the specified name.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.TryGetValueInternal(System.String,Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification@)">
            <summary>
            Tries to get a value with the specified key.
            </summary>
            <param name="keyName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the EntityPropertyDefinitionSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EntityPropertyDefinitionSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyDefinitionSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection">
            <summary>
            Contains and validates a dictionary of property values based on a list of 
            property definitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.PropertyDefinitions">
            <summary>
            The property definitions associated with the collection.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.PropertyValues">
            <summary>
            The property values associated with this collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection)">
            <summary>
            Constructor. Creates an empty collection.
            </summary>
            <param name="propertyDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Private constructor.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Create a lightweight wrapper around an already-existing array of values.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a property with the specified key name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.GetValueType(System.String)">
            <summary>
            Returns the type of the item with the specified key.
            </summary>
            <param name="keyName"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.GetEnumerator">
            <summary>
            ICollection implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.AssertValidParameters(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Assert that the property definitions and values are valid for
            constructing an object.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.GetPropertyDefinition(System.String)">
            <summary>
            Gets the property definition with the specified key name. Throws
            as appropriate if there's a problem.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the item with the specified key. Will fail if calling on
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.Count">
            <summary>
            Gets the number of property values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection">
            <summary>
            Contains and validates a dictionary of propertyValues based on a list of 
            property definitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.PropertyDefinitions">
            <summary>
            The property definitions associated with the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Private constructor.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.SetValue(System.String,System.Object)">
            <summary>
            Sets the specified property to the specified value.  Throws if already set.  An ICollection may be passed in for a
            multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.AddMultiValue(System.String,System.Object)">
            <summary>
            Add the specified key/value pair.  For multivalued properties only.  An ICollection may be passed in
            if its members are of the correct type.  They will be added to the existing values.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove the specified key name.  If multivalued, removes all values.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Remove(System.String,System.Object)">
            <summary>
            Remove the specified value at the specified index.  For multivalued properties only.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.RemoveAt(System.String,System.Int32)">
            <summary>
            Remove the value at the specified index for the specified key name.  For multivalued properties only.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
            <param name="valueIndex">The index of the value to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Replace(System.String,System.Object)">
            <summary>
            Replace the specified value.  If multivalued, all existing values will be replaced with the new one.  
            An ICollection may be passed in for a multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Replace(System.String,System.Object,System.Object)">
            <summary>
            Replace only the specified value.  For multivalued properties only.
            An ICollection may be passed in for a multivalued property if its members are of the correct type, but only
            for the replacement value.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <param name="previousValue">The value of the property to replace.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.ReplaceAt(System.String,System.Object,System.Int32)">
            <summary>
            Replace only the value at the specified value index.  For multivalued properties only.  The new value is not guaranteed to have the same index as the replaced value.
            An ICollection may be passed in for a multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <param name="index">The index of the value to be replaced for a multivalued property.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Clear">
            <summary>
            Implements Clear.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Create a lightweight wrapper around an already-existing array of values.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a property with the specified key name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.GetValueType(System.String)">
            <summary>
            Returns the type of the item with the specified key.
            </summary>
            <param name="keyName"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.ShallowClone">
            <summary>
            Creates a shallow clone of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.ConvertContentsToWriteable">
            <summary>
            Converts any readonly ObjectCollections in the values to writable versions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.ConvertValue(System.Object,System.Boolean)">
            <summary>
            If value is a ObjectCollection variant, converts to readonly or writeable form.  Otherwise return the original value.
            </summary>
            <param name="value"></param>
            <param name="toReadOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.GetEnumerator">
            <summary>
            ICollection implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.SetValueAtIndex(System.Int32,System.Object)">
            <summary>
            Sets a value at a particular index, resizing the underlying list
            if necessary.
            </summary>
            <param name="index">Index at which to set the value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.AssertValidParameters(Microsoft.MapPoint.Data.EntityPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Assert that the property definitions and values are valid for
            constructing an object.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.GetPropertyDefinition(System.String)">
            <summary>
            Gets the property definition with the specified key name. Throws
            as appropriate if there's a problem.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.Count">
            <summary>
            Gets the number of property values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityPropertyValueWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipCollection">
            <remarks>
            A read-only collection of EntityRelationship objects, keyed by RelationshipType.KeyName.
            </remarks>
            <summary>
            A read-only collection of EntityRelationship objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityRelationshipCollection.EntityType">
            <summary>
            The entity type for which the collection is defined.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.#ctor(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.#ctor(Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection)">
            <summary>
            Constructor used when building a read only collection from a specification collection
            </summary>
            <param name="specifications"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.Find(System.String,System.Int32@,System.Int32@)">
            <summary>
            Looks for relationships in the collection whose relationship
            types have the specified key name. If none are found, returns
            false. If any are found, returns true, and indexStart points
            to the first and indexEnd points to the last.
            </summary>
            <param name="keyName">The relationship type key name to search for.</param>
            <param name="startIndex">The index of the first relationhip of that type.</param>
            <param name="endIndex">The index of the last relationship of that type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.Find(System.String)">
            <summary>
            Looks for a relationship in the collection whose relationship
            type has the specified key name, returning null if not found.
            </summary>
            <remarks>
            If there are more than one with the same name, it is undefined
            which one will be returned; use the other form of Find() instead.
            </remarks>
            <param name="keyName">The relationship type key name to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityRelationship[],System.Boolean)">
            <summary>
            Create a lightweight EntityRelationshipCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.#ctor(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityRelationship[],System.Boolean)">
            <summary>
            Private constructor.
            </summary>
            <param name="entityType">Entity type for which the collection is defined.</param>
            <param name="values">Lookup values.</param>
            <param name="valuesRequireSorting">Whether the values might be out of order and therefore require sorting.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.AssertSortedIfNecessary(System.Boolean,Microsoft.MapPoint.Data.EntityRelationship[])">
            <summary>
            Assert that values are in sorted order.
            </summary>
            <param name="valuesRequireSorting"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.CopyTo(Microsoft.MapPoint.Data.EntityRelationship[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>EntityRelationship object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipCollection.RelationshipComparer">
            <summary>
            Compares relationships by their relationship type key names.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipCollection.RelationshipComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two relationships by their relationship type key names.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection">
            <remarks>
            A writeable collection of EntityRelationship objects, keyed by RelationshipType.KeyName.
            </remarks>
            <remarks>
            A writeable collection of EntityRelationship objects.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.EntityType">
            <summary>
            Gets the entity type for which the collection is defined.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.#ctor(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.#ctor(Microsoft.MapPoint.Data.EntityType,System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
            <param name="entityType">Entity type for which the collection is defined.</param>
            <param name="values">Lookup values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.EntityRelationship,System.String)">
            <summary>
            Ensures that an item is okay to add to the collection.
            </summary>
            <param name="item"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityType,System.Collections.ArrayList)">
            <summary>
            Create a lightweight EntityRelationshipCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.Add(Microsoft.MapPoint.Data.EntityRelationship)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.EntityRelationship)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.Remove(Microsoft.MapPoint.Data.EntityRelationship)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.CopyTo(Microsoft.MapPoint.Data.EntityRelationship[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>EntityRelationship object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection">
            <remarks>
            A read-only collection of EntityRelationshipSpecification objects.
            </remarks>
            <summary>
            A read-only collection of EntityRelationshipSpecification objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.EntityType">
            <summary>
            The entity type for which the collection is defined.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.#ctor(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityType,System.Collections.ArrayList)">
            <summary>
            Create a lightweight EntityRelationshipCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.#ctor(Microsoft.MapPoint.Data.EntityType,System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
            <param name="entityType">Entity type for which the collection is defined.</param>
            <param name="values">Lookup values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.CopyTo(Microsoft.MapPoint.Data.EntityRelationshipSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>EntityRelationshipSpecification object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.RelationshipSpecificationComparer">
            <summary>
            Compares relationships by their relationship type key names.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecificationCollection.RelationshipSpecificationComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two relationships by their relationship type key names.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection">
            <remarks>
            A writeable collection of EntityRelationshipSpecification objects, keyed by RelationshipType.KeyName.
            </remarks>
            <remarks>
            A writeable collection of EntityRelationshipSpecification objects.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.EntityType">
            <summary>
            The entity type for which the collection is defined.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.#ctor(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.#ctor(Microsoft.MapPoint.Data.EntityRelationshipCollection)">
            <summary>
            Create a specification collection by using an existing relationship collection.
            </summary>
            <param name="existingRelationships"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.#ctor(Microsoft.MapPoint.Data.EntityType,System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
            <param name="entityType">Entity type for which the collection is defined.</param>
            <param name="values">Lookup values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.EntityRelationshipSpecification,System.String)">
            <summary>
            Ensures that an item is okay to add to the collection.
            </summary>
            <param name="item"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.CreateWrapper(Microsoft.MapPoint.Data.EntityType,System.Collections.ArrayList)">
            <summary>
            Create a lightweight EntityRelationshipSpecificationCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.Add(Microsoft.MapPoint.Data.EntityRelationshipSpecification)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.EntityRelationshipSpecification)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.Remove(Microsoft.MapPoint.Data.EntityRelationshipSpecification)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.CopyTo(Microsoft.MapPoint.Data.EntityRelationshipSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>EntityRelationshipSpecification object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection">
            <remarks>
            A read-only collection of EntityRelationshipType objects, keyed by KeyName.
            </remarks>
            <remarks>
            A read-only collection of EntityRelationshipType objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.GetBinaryEntityRelationshipType(System.String)">
            <summary>
            Gets the binary entity relationship type with the specified key name.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.#ctor(System.Collections.Hashtable)">
            <summary>
            Internal constructor used only by deserialization code
            Collection assumes ownership of the hashtable so do not
            modify if after calling this constructor.
            </summary>
            <param name="lookup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.EntityTypeKeyedCollection,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Constructor. This form is used when building a read-only ontology
            from an OntologySpecification.
            </summary>
            <param name="ontology"></param>
            <param name="specifications"></param>
            <param name="entityTypes"></param>
            <param name="enumDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.Derive(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EntityRelationshipType whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EntityRelationshipType@)">
            <summary>
            Tries to get the EntityRelationshipType whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EntityRelationshipType[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.Item(System.String)">
            <summary>
            Gets the EntityRelationshipType object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EntityRelationshipType.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of EntityTypeSpecification objects, keyed by KeyName.
            </remarks>
            <remarks>
            A writeable collection of EntityRelationshipTypeSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="ontology"></param>
            <param name="relationshipTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.GetBinaryEntityRelationshipType(System.String)">
            <summary>
            Gets the binary entity relationship type with the specified key name.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.CreateBinaryEntityRelationshipType(System.String,System.Boolean)">
            <summary>
            Create a new BinaryEntityRelationshipTypeSpecification and add it to the collection.
            </summary>
            <param name="keyName">The key name of the new entity relationship type.</param>
            <param name="allowMultipleInstances">Indicates whether multiple instances of a specific RelationshipType are allowed for a given feature.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.CreateBinaryEntityRelationshipType(System.String,System.Boolean,Microsoft.MapPoint.Data.EntityTypeSpecification,Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Create a new BinaryEntityRelationshipTypeSpecification and add it to the collection.  The specific entity types that this Relationship
            is allowed to be "from" and "to" are specified.
            </summary>
            <param name="keyName">The key name of the new entity relationship type.</param>
            <param name="allowMultipleInstances">Indicates whether multiple instances of a specific RelationshipType are allowed for a given feature.</param>
            <param name="sourceEntityType">The EntityType which the relationship is allowed to be from.</param>
            <param name="targetEntityType">The EntityType which the relationship is allowed to be to.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.ValidateCanRemove(System.String,System.String)">
            <summary>
            Validate that it's okay to remove the item with the specified key name.
            </summary>
            <param name="keyName"></param>
            <param name="argumentName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.FindReference(Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Looks for a primitive type that references the specified
            entity type. 
            If found, returns the reference. If not found, returns null.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EntityRelationshipTypeSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification@)">
            <summary>
            Tries to get the EntityRelationshipTypeSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the EntityRelationshipTypeSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EntityRelationshipTypeSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipTypeSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityTypeKeyedCollection">
            <remarks>
            A read-only collection of EntityType objects, keyed by KeyName.
            </remarks>
            <remarks>
            A read-only collection of EntityType objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.#ctor(System.Collections.Hashtable)">
            <summary>
            Constructor used internally by the deserialization code
            takes ownerships of the hashtable, so don't modify it
            after calling the constructor
            </summary>
            <param name="lookup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.#ctor(Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Constructor used when building a read only collection from a specification collection
            </summary>
            <param name="specifications"></param>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.Derive(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.EntityTypeKeyedCollection)">
            <summary>
            Private constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <param name="baseOntologyEntityTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.AddAfterParents(Microsoft.MapPoint.Data.EntityTypeSpecification,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Add the entity type's parents first, then the entity type itself.
            </summary>
            <param name="specification"></param>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.AddAfterParents(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Add the entity type's parents first, then the entity type itself.
            </summary>
            <param name="baseOntologyEntityType"></param>
            <param name="newOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EntityType whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EntityType@)">
            <summary>
            Tries to get the EntityType whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EntityType[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.Root">
            <summary>
            Gets the root entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.Item(System.String)">
            <summary>
            Gets the EntityType object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EntityType.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of EntityTypeSpecification objects, keyed by KeyName.
            </remarks>
            <remarks>
            A writeable collection of EntityTypeSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.EntityTypeKeyedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="ontology"></param>
            <param name="entityTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.AddAfterParents(Microsoft.MapPoint.Data.OntologySpecification,System.Collections.Hashtable,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Add the entity type's parents first, then the entity type itself.
            </summary>
            <param name="ontology"></param>
            <param name="lookup"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.Create(System.String)">
            <summary>
            Create a new EntityTypeSpecification (derived from the root entity type) and add it to the collection.
            </summary>
            <param name="keyName">The key name of the new entity type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.Create(System.String,System.String)">
            <summary>
            Create a new EntityTypeSpecification and add it to the collection.
            </summary>
            <param name="keyName">The key name of the new entity type.</param>
            <param name="parentKeyName">The key name of the parent entity type. Must be an entity type that is already present in the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.ValidateCanRemove(System.String,System.String)">
            <summary>
            Validate that it's okay to remove the item with the specified key name.
            </summary>
            <param name="keyName"></param>
            <param name="argumentName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.FindReference(Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Looks for an entity type that references the specified
            item. If found, returns its key name. If not found, returns null.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EntityTypeSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EntityTypeSpecification@)">
            <summary>
            Tries to get the EntityTypeSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EntityTypeSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the EntityTypeSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EntityTypeSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection">
            <remarks>
            A writeable collection of EnumDefinitionSpecification objects, keyed by string.
            </remarks>
            <remarks>
            A read-only collection of EnumDefinition objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.#ctor">
            <summary>
            Constructor called only for core ontology
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.#ctor(System.Collections.Hashtable)">
            <summary>
            Constructor called only by deserialization
            takes control of the hashtable, so don't modify it
            after construction
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.Derive(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Called when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection)">
            <summary>
            Construct a read-only collection from a writeable collection of specifications.
            </summary>
            <param name="ontology"></param>
            <param name="specifications"></param>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EnumDefinition whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EnumDefinition@)">
            <summary>
            Tries to get the EnumDefinition whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EnumDefinition[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.Item(System.String)">
            <summary>
            Gets the EnumDefinition object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EnumDefinition.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of EnumDefinitionSpecification objects, keyed by string.
            </remarks>
            <remarks>
            A writeable collection of EnumDefinitionSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.Boolean)">
            <summary>
            Create a new EnumDefinitionSpecification and add it to the collection.
            </summary>
            <param name="keyName">The key name.</param>
            <param name="isFlagsEnum">Whether the enumerated type is a flags enum.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.ValidateCanRemove(System.String)">
            <summary>
            Validate that the specified item is OK to remove.
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EnumDefinitionSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EnumDefinitionSpecification@)">
            <summary>
            Tries to get the EnumDefinitionSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EnumDefinitionSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the EnumDefinitionSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EnumDefinitionSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumValueKeyedCollection">
            <remarks>
            A read-only collection of EnumValue objects, keyed by KeyName.
            </remarks>
            <remarks>
            A read-only collection of EnumValue objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EnumValueKeyedCollection.SmallCollectionSize">
            <summary>
            The maximum size at which a search will be linear rather than binary.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.#ctor(System.Collections.Hashtable,Microsoft.MapPoint.Data.EnumValue[])">
            <summary>
            Internal constructor for building a lightweight collection wrapper
            around existing collections. IMPORTANT: Do not modify the collections
            after constructing the object!
            </summary>
            <param name="lookup">Lookup by key name.</param>
            <param name="sortedValues">Array of EnumValues, sorted by Value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.SwapEnumValueKeyedCollection(System.Collections.Hashtable,Microsoft.MapPoint.Data.EnumValue[])">
            <summary>
            Internal method for building a lightweight collection wrapper
            around existing collections. IMPORTANT: Do not modify the collections
            after setting
            </summary>
            <param name="lookup">Lookup by key name.</param>
            <param name="sortedValues">Array of EnumValues, sorted by Value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.EnumValueKeyedCollection)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newDefinition"></param>
            <param name="oldDefinitionValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection)">
            <summary>
            Constructor for building from a writeable collection of specifications.
            </summary>
            <param name="enumType"></param>
            <param name="specifications"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.GetByValue(System.Int32)">
            <summary>
            Gets the EnumValue object whose Value member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="value">Value to look for.</param>
            <returns>EnumValue.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.TryGetByValue(System.Int32,Microsoft.MapPoint.Data.EnumValue@)">
            <summary>
            Tries to get an enum value by its key value. Returns
            true for success, false for failure.
            </summary>
            <param name="numericValue">The key value to search for.</param>
            <param name="enumValue">The enum value with that key value, if any.</param>
            <returns>True if found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.Contains(System.Int32)">
            <summary>
            Gets whether the collection contains a EnumValue 
            with the specified value.
            </summary>
            <param name="value">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EnumValue[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EnumValue whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EnumValue@)">
            <summary>
            Tries to get the EnumValue whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueKeyedCollection.Item(System.Int32)">
            <summary>
            Gets the EnumValue at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueKeyedCollection.Item(System.String)">
            <summary>
            Gets the EnumValue object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EnumValue.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumValueKeyedCollection.EnumValueComparer">
            <summary>
            Utility class for sorting EnumValue objects by Value property.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueKeyedCollection.EnumValueComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of EnumValueSpecification objects, keyed by string.
            </remarks>
            <remarks>
            A writeable collection of EnumValueSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.EnumDefinitionSpecification,Microsoft.MapPoint.Data.EnumValueKeyedCollection)">
            <summary>
            Constructor for building a collection from an existing read-only collection.
            </summary>
            <param name="enumType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.EnumDefinitionSpecification)">
            <summary>
            Constructor for building a brand-new collection.
            </summary>
            <param name="enumType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Create(System.String,System.Int32)">
            <summary>
            Create a new EnumValueSpecification and add it to the collection.
            </summary>
            <param name="keyName">The key name.</param>
            <param name="value">The numeric value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Remove(System.Int32)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="value">The numeric value of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.GetByValue(System.Int32)">
            <summary>
            Gets the EnumValueSpecification object whose Value member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="value">Value to look for.</param>
            <returns>EnumValue.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.TryGetByValue(System.Int32,Microsoft.MapPoint.Data.EnumValueSpecification@)">
            <summary>
            Try to get the EnumValueSpecification object whose Value member has the
            specified value. Returns true if found, false if not.
            </summary>
            <param name="value"></param>
            <param name="specification"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Contains(System.Int32)">
            <summary>
            Gets whether the collection contains a EnumValue 
            with the specified value.
            </summary>
            <param name="value">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.ValidateNotPresent(System.String,System.Int32,System.String,System.String)">
            <summary>
            Verifies that the item is not present in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.ValidateNotFromBaseOntology">
            <summary>
            Validate that our enum type is not from the base ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a EnumValueSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.EnumValueSpecification@)">
            <summary>
            Tries to get the EnumValueSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.EnumValueSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the EnumValueSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>EnumValueSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.EnumValueSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NameRoleKeyedCollection">
            <remarks>
            A writeable collection of NameRoleSpecification objects, keyed by string.
            </remarks>
            <remarks>
            A read-only collection of NameRole objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection)">
            <summary>
            Construct a read-only collection from a writeable collection of specifications.
            </summary>
            <param name="ontology"></param>
            <param name="specifications"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.#ctor(System.Collections.Hashtable)">
            <summary>
            Construct a read-only collection using the supplied internal collection
            used only be deserialization.  Collection assumes control of the hashtable
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.Derive(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Called when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a NameRole whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.NameRole@)">
            <summary>
            Tries to get the NameRole whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.CopyTo(Microsoft.MapPoint.Data.NameRole[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRoleKeyedCollection.Item(System.String)">
            <summary>
            Gets the NameRole object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>NameRole.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRoleKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRoleKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRoleKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of NameRoleSpecification objects, keyed by string.
            </remarks>
            <remarks>
            A writeable collection of NameRoleSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.NameRoleKeyedCollection)">
            <summary>
            Internal Constructor.
            </summary>
            <param name="ontology">The ontology to which this collection belongs.</param>
            <param name="definitions">The source name roles to copy data from</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.Create(System.String)">
            <summary>
            Create a name role with the specified key name and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a NameRoleSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.NameRoleSpecification@)">
            <summary>
            Tries to get the NameRoleSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.NameRoleSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the NameRoleSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>NameRoleSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.NameRoleSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ObjectCollection">
            <summary>
            A read-only collection of Object objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ObjectCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ObjectCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ObjectCollection.CreateWrapper(System.Object[])">
            <summary>
            Create a lightweight ObjectCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ObjectCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ObjectCollection.#ctor(System.Object[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ObjectCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ObjectCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ObjectCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Object object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ObjectCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ObjectCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ObjectCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection">
            <remarks>
            A writeable collection of Object objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.Add(System.Object)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.Remove(System.Object)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight ObjectWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.ValidateItem(System.Object,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Object object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.ObjectWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveCollection">
            <summary>
            A read-only collection of Primitive objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight PrimitiveCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveCollection.CopyTo(Microsoft.MapPoint.Data.Primitive[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Primitive object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection">
            <remarks>
            A read-only collection of PrimitiveProperty objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.Empty">
            <summary>
            Gets a read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a PrimitivePropertyDefinition whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.PrimitivePropertyDefinition@)">
            <summary>
            Tries to get the PrimitivePropertyDefinition whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.#ctor(Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.EntityTypeKeyedCollection,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection,Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Constructor called when copying from writable to read-only form
            Requires that the the read-only collections of enum and EntityType 
            already be populated
            </summary>
            <param name="specifications"></param>
            <param name="entityTypes"></param>
            <param name="enumDefinitions"></param>
            <param name="primitiveType">the primitive type</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.#ctor(System.Collections.ArrayList,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Construct a read-only collection from a collection of primitive property data structures.
            Used only by deserialization code
            </summary>
            <param name="propertyData"></param>
            <param name="owningPrimitiveType"></param>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <param name="newOntologyPrimitiveType"></param>
            <param name="baseOntologyProperties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.CopyTo(Microsoft.MapPoint.Data.PrimitivePropertyDefinition[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.EmptyValueCollection">
            <summary>
            Gets an empty instance of the collection
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.Item(System.String)">
            <summary>
            Gets the PrimitivePropertyDefinition object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>PrimitivePropertyDefinition.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.Item(System.Int32)">
            <summary>
            Gets the PrimitivePropertyDefinition object with the specified index.
            </summary>
            <param name="index">The index of the property to get.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of PrimitivePropertyDefinitionSpecification objects, keyed by string.
            </remarks>
            <remarks>
            A writeable collection of PrimitivePropertyDefinitionSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.PrimitiveTypeSpecification)">
            <summary>
            Constructor.  called when creating a new primitive type
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
            <param name="primitiveType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.PrimitiveTypeSpecification,Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection)">
            <summary>
            Constructor. called when building and ontology specification from an existing
            ontology.
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
            <param name="primitiveType">The primitive type specification this property applies to</param>
            <param name="definitions">The source primitive property definitions to copy data from</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String,System.Type)">
            <summary>
            Create a new property definition and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="entityTypeKeyName"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Create a new property definition and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="entityTypeKeyName"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String,System.String)">
            <summary>
            Create a new property definition with an enumerated
            type and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="entityTypeKeyName"></param>
            <param name="enumDefinitionKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a new property definition with an enumerated
            type and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="entityTypeKeyName"></param>
            <param name="enumDefinitionKeyName"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.FindReference(Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Looks for a primitive property that references the specified
            entity type. Also searched property collections.
            If found, returns its key name. If not found, returns null.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a PrimitivePropertyDefinitionSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification@)">
            <summary>
            Tries to get the PrimitivePropertyDefinitionSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the PrimitivePropertyDefinitionSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>PrimitivePropertyDefinitionSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyDefinitionSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection">
            <summary>
            Contains and validates a dictionary of property values based on a list of 
            property definitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.PropertyDefinitions">
            <summary>
            The property definitions associated with the collection.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.PropertyValues">
            <summary>
            The property values associated with this collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection)">
            <summary>
            Constructor. Creates an empty collection.
            </summary>
            <param name="propertyDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Private constructor.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.CreateWrapper(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Create a lightweight wrapper around an already-existing array of values.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a property with the specified key name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.GetValueType(System.String)">
            <summary>
            Returns the type of the item with the specified key.
            </summary>
            <param name="keyName"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.GetEnumerator">
            <summary>
            ICollection implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.AssertValidParameters(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Assert that the property definitions and values are valid for
            constructing an object.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.GetPropertyDefinition(System.String)">
            <summary>
            Gets the property definition with the specified key name. Throws
            as appropriate if there's a problem.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.Count">
            <summary>
            Gets the number of property values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyValueKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection">
            <summary>
            Contains and validates a dictionary of propertyValues based on a list of 
            property definitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.PropertyDefinitions">
            <summary>
            The property definitions associated with the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Private constructor.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.SetValue(System.String,System.Object)">
            <summary>
            Sets the specified property to the specified value.  Throws if already set.  An ICollection may be passed in for a
            multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.AddMultiValue(System.String,System.Object)">
            <summary>
            Add the specified key/value pair.  For multivalued properties only.  An ICollection may be passed in
            if its members are of the correct type.  They will be added to the existing values.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove the specified key name.  If multivalued, removes all values.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Remove(System.String,System.Object)">
            <summary>
            Remove the specified value at the specified index.  For multivalued properties only.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.RemoveAt(System.String,System.Int32)">
            <summary>
            Remove the value at the specified index for the specified key name.  For multivalued properties only.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
            <param name="valueIndex">The index of the value to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Replace(System.String,System.Object)">
            <summary>
            Replace the specified value.  If multivalued, all existing values will be replaced with the new one.  
            An ICollection may be passed in for a multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Replace(System.String,System.Object,System.Object)">
            <summary>
            Replace only the specified value.  For multivalued properties only.
            An ICollection may be passed in for a multivalued property if its members are of the correct type, but only
            for the replacement value.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <param name="previousValue">The value of the property to replace.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.ReplaceAt(System.String,System.Object,System.Int32)">
            <summary>
            Replace only the value at the specified value index.  For multivalued properties only.  The new value is not guaranteed to have the same index as the replaced value.
            An ICollection may be passed in for a multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <param name="index">The index of the value to be replaced for a multivalued property.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Clear">
            <summary>
            Implements Clear.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.CreateWrapper(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Create a lightweight wrapper around an already-existing array of values.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a property with the specified key name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.GetValueType(System.String)">
            <summary>
            Returns the type of the item with the specified key.
            </summary>
            <param name="keyName"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.ShallowClone">
            <summary>
            Creates a shallow clone of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.ConvertContentsToWriteable">
            <summary>
            Converts any readonly ObjectCollections in the values to writable versions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.ConvertValue(System.Object,System.Boolean)">
            <summary>
            If value is a ObjectCollection variant, converts to readonly or writeable form.  Otherwise return the original value.
            </summary>
            <param name="value"></param>
            <param name="toReadOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.GetEnumerator">
            <summary>
            ICollection implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.SetValueAtIndex(System.Int32,System.Object)">
            <summary>
            Sets a value at a particular index, resizing the underlying list
            if necessary.
            </summary>
            <param name="index">Index at which to set the value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.AssertValidParameters(Microsoft.MapPoint.Data.PrimitivePropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Assert that the property definitions and values are valid for
            constructing an object.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.GetPropertyDefinition(System.String)">
            <summary>
            Gets the property definition with the specified key name. Throws
            as appropriate if there's a problem.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.Count">
            <summary>
            Gets the number of property values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection">
            <remarks>
            A read-only collection of PrimitiveType objects, keyed by KeyName.
            </remarks>
            <remarks>
            A read-only collection of PrimitiveType objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.#ctor(System.Collections.Hashtable)">
            <summary>
            Internal constructor used only by deserialization code
            Collection assumes ownership of the hashtable so do not
            modify if after calling this constructor.
            </summary>
            <param name="lookup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.EntityTypeKeyedCollection,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Constructor used to build a read-only collection from
            a writable collection of primitive specifications
            </summary>
            <param name="ontology"></param>
            <param name="specifications"></param>
            <param name="entityTypes"></param>
            <param name="enumDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.Derive(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a PrimitiveType whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.PrimitiveType@)">
            <summary>
            Tries to get the PrimitiveType whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.CopyTo(Microsoft.MapPoint.Data.PrimitiveType[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.Item(System.String)">
            <summary>
            Gets the PrimitiveType object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>PrimitiveType.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of PrimitiveTypeSpecification objects, keyed by KeyName.
            </remarks>
            <remarks>
            A writeable collection of PrimitiveTypeSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection,Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection)">
            <summary>
            Constructor called when copying a read-only collection of primitive types
            to a writeable collection of primitive type specifications
            </summary>
            <param name="ontology"></param>
            <param name="primitiveTypes"></param>
            <param name="entityTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.Create(System.String,System.String,System.Type)">
            <summary>
            Create a new PrimitiveTypeSpecification and add it to the collection.
            </summary>
            <param name="keyName">The key name of the new primitive type.</param>
            <param name="entityTypeKeyName">The key name of the entity type. Must be an entity type that is already present in the collection.</param>
            <param name="geometryType">The type of the geometry used for primitives of this type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.ValidateCanRemove(System.String,System.String)">
            <summary>
            Validate that it's okay to remove the item with the specified key name.
            </summary>
            <param name="keyName"></param>
            <param name="argumentName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.FindReference(Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Looks for a primitive type that references the specified
            entity type. 
            If found, returns its key name. If not found, returns null.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.FindPropertyReference(Microsoft.MapPoint.Data.EntityTypeSpecification,System.String@)">
            <summary>
            Looks for a primitive property that references the specified
            entity type. 
            If found, returns its key name. If not found, returns null.
            </summary>
            <param name="item"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a PrimitiveTypeSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.PrimitiveTypeSpecification@)">
            <summary>
            Tries to get the PrimitiveTypeSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.PrimitiveTypeSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the PrimitiveTypeSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>PrimitiveTypeSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.PrimitiveTypeSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection">
            <remarks>
            A writeable collection of RelationshipPropertyDefinition objects, keyed by string.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a RelationshipPropertyDefinition whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.RelationshipPropertyDefinition@)">
            <summary>
            Tries to get the RelationshipPropertyDefinition whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.#ctor">
            <summary>
            Private constructor, used only to populate the static Empty property.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.#ctor(Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Construct a read-only collection from a writeable collection of specifications.
            </summary>
            <param name="specifications"></param>
            <param name="enumDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.#ctor(System.Collections.Hashtable,Microsoft.MapPoint.Data.RelationshipPropertyDefinition[])">
            <summary>
            Construct a read-only collection from an array of property data structures.
            called from the deserialization code.  Takes control of the hashtable, so
            don't modify after passing to the constructor
            </summary>
            <param name="propertyData"></param>
            <param name="sortedProperties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.Derive(Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Called only when deriving one ontology from another.
            </summary>
            <param name="newOntologyEnumDefinitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.CopyTo(Microsoft.MapPoint.Data.RelationshipPropertyDefinition[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.EmptyValueCollection">
            <summary>
            Gets an empty instance of the collection
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.Item(System.String)">
            <summary>
            Gets the RelationshipPropertyDefinition object whose KeyName member has the specified value.
            Throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>RelationshipPropertyDefinition.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.Item(System.Int32)">
            <summary>
            Gets the RelationshipPropertyDefinition object with the specified index.
            </summary>
            <param name="index">The index of the property to get.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection">
            <remarks>
            A writeable collection of RelationshipPropertyDefinitionSpecification objects, keyed by string.
            </remarks>
            <remarks>
            A writeable collection of RelationshipPropertyDefinitionSpecification objects, keyed by KeyName.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification)">
            <summary>
            Constructor. This version is called from RelationshipTypeSpecification's constructor.
            It generates a collection that's populated by the type's parent's properties
            (if any), but adds no other properties for the relationship type itself.
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection)">
            <summary>
            Constructor. This version is called when building an OntologySpecification
            from an Ontology.
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
            <param name="definitions">The source name roles to copy data from</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.Type)">
            <summary>
            Create a new property definition and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Create a new property definition and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String)">
            <summary>
            Create a new property definition with an enumerated
            type and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="enumDefinitionKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Create(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a new property definition with an enumerated
            type and add it to the collection.
            </summary>
            <param name="keyName"></param>
            <param name="enumDefinitionKeyName"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="keyName">The KeyName of the item to remove.</param>
            <remarks>
            You can only use this to remove properties that are defined
            on this relationship type. Attempting to remove a property inherited
            from a parent relationship type will throw an exception.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a RelationshipPropertyDefinitionSpecification whose
            KeyName has the specified key value.
            </summary>
            <param name="keyName">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.TryGetValue(System.String,Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification@)">
            <summary>
            Tries to get the RelationshipPropertyDefinitionSpecification whose KeyName has the
            specified key value. If found, returns true; otherwise
            returns false.
            </summary>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.CopyTo(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the RelationshipPropertyDefinitionSpecification object whose KeyName member has the specified value.
            Getting throws if it does not exist.
            </summary>
            <param name="keyName">KeyName key value to look for.</param>
            <returns>RelationshipPropertyDefinitionSpecification.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection">
            <summary>
            Contains and validates a dictionary of property values based on a list of 
            property definitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.PropertyDefinitions">
            <summary>
            The property definitions associated with the collection.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.PropertyValues">
            <summary>
            The property values associated with this collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection)">
            <summary>
            Constructor. Creates an empty collection.
            </summary>
            <param name="propertyDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.#ctor(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Private constructor.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.CreateWrapper(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Create a lightweight wrapper around an already-existing array of values.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a property with the specified key name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.GetValueType(System.String)">
            <summary>
            Returns the type of the item with the specified key.
            </summary>
            <param name="keyName"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.GetEnumerator">
            <summary>
            ICollection implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.AssertValidParameters(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Assert that the property definitions and values are valid for
            constructing an object.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.GetPropertyDefinition(System.String)">
            <summary>
            Gets the property definition with the specified key name. Throws
            as appropriate if there's a problem.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the item with the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.Count">
            <summary>
            Gets the number of property values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection">
            <summary>
            Contains and validates a dictionary of propertyValues based on a list of 
            property definitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.PropertyDefinitions">
            <summary>
            The property definitions associated with the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.#ctor(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Private constructor.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.SetValue(System.String,System.Object)">
            <summary>
            Sets the specified property to the specified value.  Throws if already set.  An ICollection may be passed in for a
            multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.AddMultiValue(System.String,System.Object)">
            <summary>
            Add the specified key/value pair.  For multivalued properties only.  An ICollection may be passed in
            if its members are of the correct type.  They will be added to the existing values.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Remove(System.String)">
            <summary>
            Remove the specified key name.  If multivalued, removes all values.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Remove(System.String,System.Object)">
            <summary>
            Remove the specified value at the specified index.  For multivalued properties only.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.RemoveAt(System.String,System.Int32)">
            <summary>
            Remove the value at the specified index for the specified key name.  For multivalued properties only.
            </summary>
            <param name="keyName">The key name of the property to remove.</param>
            <param name="valueIndex">The index of the value to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Replace(System.String,System.Object)">
            <summary>
            Replace the specified value.  If multivalued, all existing values will be replaced with the new one.  
            An ICollection may be passed in for a multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Replace(System.String,System.Object,System.Object)">
            <summary>
            Replace only the specified value.  For multivalued properties only.
            An ICollection may be passed in for a multivalued property if its members are of the correct type, but only
            for the replacement value.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <param name="previousValue">The value of the property to replace.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.ReplaceAt(System.String,System.Object,System.Int32)">
            <summary>
            Replace only the value at the specified value index.  For multivalued properties only.  The new value is not guaranteed to have the same index as the replaced value.
            An ICollection may be passed in for a multivalued property if its members are of the correct type.
            </summary>
            <param name="keyName">The key name of the property to add.</param>
            <param name="value">The value of the property to add.</param>
            <param name="index">The index of the value to be replaced for a multivalued property.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Clear">
            <summary>
            Implements Clear.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.CreateWrapper(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Create a lightweight wrapper around an already-existing array of values.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Contains(System.String)">
            <summary>
            Gets whether the collection contains a property with the specified key name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.GetValueType(System.String)">
            <summary>
            Returns the type of the item with the specified key.
            </summary>
            <param name="keyName"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.ShallowClone">
            <summary>
            Creates a shallow clone of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.ConvertContentsToWriteable">
            <summary>
            Converts any readonly ObjectCollections in the values to writable versions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.ConvertValue(System.Object,System.Boolean)">
            <summary>
            If value is a ObjectCollection variant, converts to readonly or writeable form.  Otherwise return the original value.
            </summary>
            <param name="value"></param>
            <param name="toReadOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.GetEnumerator">
            <summary>
            ICollection implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.SetValueAtIndex(System.Int32,System.Object)">
            <summary>
            Sets a value at a particular index, resizing the underlying list
            if necessary.
            </summary>
            <param name="index">Index at which to set the value.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.AssertValidParameters(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection,System.Object[])">
            <summary>
            Assert that the property definitions and values are valid for
            constructing an object.
            </summary>
            <param name="propertyDefinitions"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.GetPropertyDefinition(System.String)">
            <summary>
            Gets the property definition with the specified key name. Throws
            as appropriate if there's a problem.
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.Count">
            <summary>
            Gets the number of property values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyValueWriteableKeyedCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelativeLineCollection">
            <summary>
            A read-only collection of RelativeLine objects.
            </summary>
            <summary>
            A read-only collection of RelativeLine objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.GetPolyline">
            <summary>
            Gets a polyline that a path is comprised of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.GetPolyline(System.Collections.ICollection)">
            <summary>
            returns the polyline that a path is comprised of.
            </summary>
            <param name="relativeLines">Collection of RelativeLine objects.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLineCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight RelativeLineCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.CopyTo(Microsoft.MapPoint.Data.RelativeLine[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLineCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLineCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>RelativeLine object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLineCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLineCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLineCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection">
            <remarks>
            A writable collection of RelativeLine objects.
            </remarks>
            <remarks>
            A writeable collection of RelativeLine objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.GetPolyline">
            <summary>
            Gets a polyline that a path is comprised of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.RelativeLine,System.String)">
            <summary>
            Verify that the item is okay to add to the collection.
            </summary>
            <param name="item"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.Add(Microsoft.MapPoint.Data.RelativeLine)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.RelativeLine)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.Remove(Microsoft.MapPoint.Data.RelativeLine)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight RelativeLineWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.CopyTo(Microsoft.MapPoint.Data.RelativeLine[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>RelativeLine object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RelativeLineWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection">
            <summary>
            A read-only collection of RoutePathPrimitive objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.CreateWrapper(Microsoft.MapPoint.Data.RoutePathPrimitive[])">
            <summary>
            Create a lightweight RoutePathPrimitiveCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.#ctor(Microsoft.MapPoint.Data.RoutePathPrimitive[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.CopyTo(Microsoft.MapPoint.Data.RoutePathPrimitive[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>RoutePathPrimitive object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RoutePathPrimitiveCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection">
            <remarks>
            A writeable collection of RoutePathPrimitive objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.Add(Microsoft.MapPoint.Data.RoutePathPrimitive)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.RoutePathPrimitive)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.Remove(Microsoft.MapPoint.Data.RoutePathPrimitive)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight RoutePathPrimitiveWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.RoutePathPrimitive,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.CopyTo(Microsoft.MapPoint.Data.RoutePathPrimitive[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>RoutePathPrimitive object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.RoutePathPrimitiveWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection">
            <summary>
            A read-only collection of ScoredEntityQueryResult objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.CreateWrapper(Microsoft.MapPoint.Data.ScoredEntityQueryResult[])">
            <summary>
            Create a lightweight ScoredEntityQueryResultCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.#ctor(Microsoft.MapPoint.Data.ScoredEntityQueryResult[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.CopyTo(Microsoft.MapPoint.Data.ScoredEntityQueryResult[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>ScoredEntityQueryResult object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ScoredEntityQueryResultCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.StorageGroupCollection">
            <summary>
            A read-only collection of StorageGroup objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.StorageGroupCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroupCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroupCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight StorageGroupCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroupCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroupCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroupCollection.CopyTo(Microsoft.MapPoint.Data.StorageGroup[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroupCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StorageGroupCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>StorageGroup object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StorageGroupCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StorageGroupCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StorageGroupCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection">
            <remarks>
            A writeable collection of StorageGroup objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.Add(Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.Remove(Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight StorageGroupWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.ToReadOnly">
            <summary>
            Cheaply create a read-only collection based on this
            writeable collection. Note that the collection can no
            longer be modified after calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.VerifyWriteable">
            <summary>
            Verifies that the collection is writeable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.ValidateItem(Microsoft.MapPoint.Data.StorageGroup,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.CopyTo(Microsoft.MapPoint.Data.StorageGroup[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.IsReadOnly">
            <summary>
            Gets whether the collection is read-only. Calling ToReadOnly()
            sets this to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>StorageGroup object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.WriteableCollections.StorageGroupWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry">
            <summary>
            An entry in an IStringToStorageGroupLookup.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.Value">
            <summary>
            Gets the value.
            </summary>
            <value />
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.#ctor(System.String,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Key.</param>
            <param name="objValue">Value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.Equals(System.Object)">
            <summary>
            Compares obj to this struct and returns true if they are equal, false otherwise.
            We choose to override the default implementation because reflection is computationally 
            expensive.  Note: this implementation also uses reflection, but not in all cases.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.Equals(Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry)">
            <summary>
            Compares StringToStorageGroupLookupEntry to this struct and returns true if they are equal, false otherwise.
            </summary>
            <param name="target">The struct to compare to this</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.op_Equality(Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry,Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry)">
            <summary>
            Tests for equality between two StringToStorageGroupLookupEntry
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.op_Inequality(Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry,Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry)">
            <summary>
            Tests for inequality between two StringToStorageGroupLookupEntry
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry.GetHashCode">
            <summary>
            Returns an int hashcode for this struct.
            Note: if you override Equals without overriding GetHashCode() you get a build warning-as-error.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.StringToStorageGroupLookup">
            <remarks>
            A read-only collection of StorageGroup objects, keyed by String.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.StringToStorageGroupLookup.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.CreateWrapper(System.Collections.Hashtable)">
            <summary>
            Create a lightweight StringToStorageGroupLookup wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            hashtable can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the hashtable.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.GetInternalCopy">
            <summary>
            Get a copy of the lookup's internal hashtable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.#ctor(System.Collections.Hashtable)">
            <summary>
            Private constructor.
            </summary>
            <param name="lookup">Lookup values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.Contains(System.String)">
            <summary>
            Gets whether the collection contains a StorageGroup with the
            specified key.
            </summary>
            <param name="key">Key value to look for.</param>
            <returns>Whether the collection contains it.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.TryGetValue(System.String,Microsoft.MapPoint.Data.StorageGroup@)">
            <summary>
            Tries to get the StorageGroup with the specified key.
            If found, returns true; otherwise returns false.
            </summary>
            <param name="key">Key value to look for.</param>
            <param name="value">The value corresponding to the key, if found.</param>
            <returns>True if the item is found, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.CopyTo(Microsoft.MapPoint.Data.StringToStorageGroupLookupEntry[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StringToStorageGroupLookup.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StringToStorageGroupLookup.Values">
            <summary>
            Gets the values in the lookup.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StringToStorageGroupLookup.Item(System.String)">
            <summary>
            Gets the StorageGroup object with the specified key.
            Throws if it does not exist.
            </summary>
            <param name="key">Key value to look for.</param>
            <returns>StorageGroup.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StringToStorageGroupLookup.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StringToStorageGroupLookup.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StringToStorageGroupLookup.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.TurnRestrictionCollection">
            <summary>
            A read-only collection of TurnRestriction objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.TurnRestrictionCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TurnRestrictionCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TurnRestrictionCollection.CreateWrapper(Microsoft.MapPoint.Data.Topology.TurnRestriction[])">
            <summary>
            Create a lightweight TurnRestrictionCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TurnRestrictionCollection.#ctor(Microsoft.MapPoint.Data.Topology.TurnRestriction[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TurnRestrictionCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TurnRestrictionCollection.CopyTo(Microsoft.MapPoint.Data.Topology.TurnRestriction[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TurnRestrictionCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.TurnRestrictionCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>TurnRestriction object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.TurnRestrictionCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.TurnRestrictionCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.TurnRestrictionCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DisplayAddress">
            <summary>
            Simple address class derived from the AddressBase class, used primarily as a type for POI properties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.#ctor(System.String,System.String[],System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="streetAddress">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="internalAddressLines">May be null but cannot contain nulls, nor can a member be longer than AddressMaxStringLength.</param>
            <param name="city">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="secondaryCity">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="administrativeDivision">May be null but cannot be longer than AddressMaxStringLength.</param>
            <param name="postalCode">May be null but cannot be longer than PostalCodeMaxStringLength.</param>
            <param name="countryRegion">May be null but cannot be longer than AddressMaxStringLength.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor used for deserializing from a reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.op_Equality(Microsoft.MapPoint.Data.DisplayAddress,Microsoft.MapPoint.Data.DisplayAddress)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.op_Inequality(Microsoft.MapPoint.Data.DisplayAddress,Microsoft.MapPoint.Data.DisplayAddress)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.Equals(Microsoft.MapPoint.Data.DisplayAddress)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.GetHashCode">
            <summary>
            Returns this object's hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.ToString">
            <summary>
            Convert the object to a string.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DisplayAddress.IsNonEmpty(System.String)">
            <summary>
            Returns true if the string is neither null nor empty.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MapExtent">
            <summary>
            The purpose of this class is to allow specification of the desired spatial 
            extent of a map view, but separately from the view itself, i.e. abstracted 
            from the view’s rendering details. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.NoScale">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.BoundingBox">
            <summary>
            Bounding Box.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.CenterPoint">
            <summary>
            Centre lat/long.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.HeightInMeters">
            <summary>
            Height in meters.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.WidthInMeters">
            <summary>
            Width in meters.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.NortheastLatLong">
            <summary>
            Northeast lat/long.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.SouthwestLatLong">
            <summary>
            Southwest lat/long.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MapExtent.inflateFactor">
            <summary>
            Scale. 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.Inflate">
            <summary>
            Inflate the scale by multiplying it by the inflation factor.
            If the scale has already been inflated, this call does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.#ctor(Microsoft.MapPoint.Geometry.Geometry2D.Box2D)">
            <summary>
            Constructor
            </summary>
            <param name="boundingBox"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="centerLatLong"></param>
            <param name="heightInMeters"></param>
            <param name="widthInMeters"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Double)">
            <summary>
            Constructor, scale is required.
            </summary>
            <param name="centerLatLong"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.#ctor(Microsoft.MapPoint.Data.RelativePoint)">
            <summary>
            
            </summary>
            <param name="relativePoint"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[])">
            <summary>
            Constructor.
            </summary>
            <param name="locations"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.CreateMapExtentFromEntities(Microsoft.MapPoint.Data.Entity[])">
            <summary>
            Return the MapExtent for the overall boundingbox
            for a given entity list.         
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.CreateMapExtentFromEntities(Microsoft.MapPoint.Data.MatchedEntityNameCollection)">
            <summary>
            Return the MapExtent for the overall boundingbox
            for a given entity list.         
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.CreateMapExtentFromPrimitives(Microsoft.MapPoint.Data.Primitive[])">
            <summary>
            Return the MapExtent for the overall boundingbox
            for a given primitive list.       
            </summary>
            <param name="primitives"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.CreateMapExtentFromCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[],Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Given an array of coordinates, calculate a larger box that surrounds them all.
            </summary>
            <param name="coordinates"></param>
            <param name="coordinateReferenceSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MapExtent.CreateMapExtentFromBoundingBoxes(Microsoft.MapPoint.Geometry.Geometry2D.Box2D[])">
            <summary>
            Given an array of bounding boxes, calculate a larger box that surrounds them all.
            </summary>
            <param name="boxes"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MapExtent.Inflated">
            <summary>
            Has scale already been inflated.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MapExtent.Scale">
            <summary>
            Scale. 
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MapExtent.InflationFactor">
            <summary>
            Increase/Decrease bounding box by this amount.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping">
            <summary>
            Implements PrimitiveIdMapping for a MemoryDataSource.
            This is a trivial implementation, since MemoryPrimitiveIds aren't very complex
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveIdMapping">
            <remarks>
            Abstract definition of an object which maps PrimitiveIds to a value type.
            This objects serves as a helper for dealing with large numbers of Primitives/PrimitiveIds/Edges.
            Of those 3, PrimitiveIds are the smallest, yet since PrimitiveIds are reference types,
            storing many of them (as the route engine does) leads to many allocations and GC work.
            A PrimitiveIdMapping is a short-term mapping between one of these and a unique key. <br/>
            For the lifetime of a PrimitiveIdMapping, the same input Primitive will yield the same int output.
            And vice versa.
            The actual mapping between the two is undefined and not to be relied upon 
            (ie it may or may not be a predictable value).  You also can't rely on the real object stuffed
            in the collection to actually be kept.  (So therefore getting the original back can be
            an expensive operation.)<br/>
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.#ctor">
            <summary>
            Creates a new empty PrimitiveIdMapping
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.MapPrimitive(Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Given a Primitive object, return a key
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.MapPrimitiveId(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Given a PrimitiveId, return a key
            </summary>
            <param name="primitiveId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.MapEdge(Microsoft.MapPoint.Data.Topology.Edge)">
            <summary>
            Given an Edge, return a key.  (More efficient that getting a PrimitiveId from an Edge
            and then calling MapPrimitiveId)
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetAllRelatedKeysForBatchQuery(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            This method returns an array of keys that contains key plus any from otherKeys that are 
            closely related to it in terms of storage layout.
            </summary>
            <param name="key"></param>
            <param name="otherKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetPrimitiveIds(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            Builds PrimitiveIds corresponding to given keys.  Will throw if any key is unknown.
            (Note that due to the current implementation, there are keys which will return PrimitiveIds even
            if they were never inserted into the collection.  It is assumed you know what you're doing.)
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetPrimitiveId(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Builds a PrimitiveId corresponding to a given key.  Will throw if the key is unknown.
            See GetPrimitiveIds
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetEdges(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            Given an array of keys, return an array of Edges
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetEdge(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Given a key, return an Edge.  See GetEdges
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetSpatialExtent(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            Gets the spatial extent of a set of keys.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetPrimitives(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[],Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions,System.Boolean)">
            <summary>
            Given an array of keys (plus options), return an array of Primitives
            </summary>
            <param name="keys"></param>
            <param name="coordinateReferenceSystem"></param>
            <param name="primitiveResultOptions"></param>
            <param name="cacheResults"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.GetPrimitive(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions)">
            <summary>
            Given a key, return a Primitive.  See GetPrimitives
            </summary>
            <param name="key"></param>
            <param name="coordinateReferenceSystem"></param>
            <param name="primitiveResultOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.EqualPrimitives(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMapping,Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            This function compares two keys from different PrimitiveIdMappings.  (If the Keys
            are from the same mapping, they can be directly compared)
            </summary>
            <param name="key">The Key from this mapping.</param>
            <param name="otherMapping">The other mapping.  Can't be null.  Must be from the same
            DataSource as this mapping. Can be the same object as this mapping.</param>
            <param name="otherKey">The other Key, obtained from otherMapping.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMapping.MapKeyFromOtherMapping(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMapping)">
            <summary>
            Given a key in another mapping, put it into this mapping.
            (Can be more efficient than, for example, retrieving the PrimitiveId via GetPrimitiveId
            and then remapping through MapPrimitiveId)
            </summary>
            <param name="key"></param>
            <param name="otherMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.#ctor(Microsoft.MapPoint.Data.MemoryDataSource)">
            <summary>
            Constructor
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.MapPrimitive(Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Given a Primitive object, return a key
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.MapPrimitiveId(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            Given a PrimitiveId, return a key
            </summary>
            <param name="primitiveId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.MapEdge(Microsoft.MapPoint.Data.Topology.Edge)">
            <summary>
            Given an Edge, return a key.  (More efficient that getting a PrimitiveId from an Edge
            and then calling MapPrimitiveId).
            </summary>
            <param name="edge"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetAllRelatedKeysForBatchQuery(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            This method returns an array of keys that contains key plus any from otherKeys that are 
            closely related to it in terms of storage layout.
            </summary>
            <param name="key"></param>
            <param name="otherKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetPrimitiveIds(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            Builds PrimitiveIds corresponding to given keys.  Will throw if any key is unknown.
            (Note that due to the current implementation, there are keys which will return PrimitiveIds even
            if they were never inserted into the collection.  It is assumed you know what you're doing.)
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetPrimitiveId(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Builds a PrimitiveId corresponding to a given key.  Will throw if the key is unknown.
            See GetPrimitiveIds
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetEdges(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            Given an array of keys, return an array of Edges.
            Not supported for MemoryDataSource
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetEdge(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Given a key, return an Edge.  See GetEdges
            Not supported for MemoryDataSource
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetPrimitives(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[],Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions,System.Boolean)">
            <summary>
            Given an array of keys (plus options), return an array of Primitives
            </summary>
            <param name="keys"></param>
            <param name="coordinateReferenceSystem"></param>
            <param name="primitiveResultOptions"></param>
            <param name="cacheResults"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetPrimitive(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions)">
            <summary>
            Given a key, return a Primitive.  See GetPrimitives
            </summary>
            <param name="key"></param>
            <param name="coordinateReferenceSystem"></param>
            <param name="primitiveResultOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.EqualPrimitives(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMapping,Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            This function compares two keys from different PrimitiveIdMappings.  (If the Keys
            are from the same mapping, they can be directly compared)
            </summary>
            <param name="key">The Key from this mapping.</param>
            <param name="otherMapping">The other mapping.  Can't be null.  Must be from the same
            DataSource as this mapping. Can be the same object as this mapping.</param>
            <param name="otherKey">The other Key, obtained from otherMapping.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.MapKeyFromOtherMapping(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMapping)">
            <summary>
            Given a key in another mapping, put it into this mapping.
            </summary>
            <param name="key"></param>
            <param name="otherMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MemoryPrimitiveIdMapping.GetSpatialExtent(Microsoft.MapPoint.Data.PrimitiveIdMappingKey[])">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NativeMethods.GlobalMemoryStatus(Microsoft.MapPoint.Data.NativeMethods.MemoryStatus@)">
            <summary>
            Gets information about the system's current usage of both physical 
            and virtual memory.
            </summary>
            <param name="memoryStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NativeMethods.GlobalMemoryStatusEx(Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx@)">
            <summary>
            Gets extened information about the system's current usage of both 
            physical and virtual memory.
            </summary>
            <param name="memoryStatus"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus">
            <summary>
            Contains information about the current state of both physical and virtual memory. 
            The GlobalMemoryStatus function stores information in this structure.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.LengthInBytes">
            <summary>
            Size of the structure, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.MemoryLoad">
            <summary>
            Number between 0 and 100 that specifies the approximate 
            percentage of physical memory that is in use (0 indicates no 
            memory use and 100 indicates full memory use). 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.TotalPhysicalBytes">
            <summary>
            Total size of physical memory, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.AvailablePhysicalBytes">
            <summary>
            Size of physical memory available, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.TotalPageFileBytes">
            <summary>
            Size of the committed memory limit, in bytes. This is physical
            memory plus the size of the page file, minus a small overhead. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.AvailablePageFileBytes">
            <summary>
            Size of available memory to commit, in bytes. The limit is 
            ullTotalPageFile.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.TotalVirtualBytes">
            <summary>
            Total size of the user mode portion of the virtual address 
            space of the calling process, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.AvailableVirtualBytes">
            <summary>
            Size of unreserved and uncommitted memory in the user mode 
            portion of the virtual address space of the calling process, 
            in bytes. 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NativeMethods.MemoryStatus.Initialize">
            <summary>
            Must be called before passing this structure into any methods.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.LengthInBytes">
            <summary>
            Size of the structure, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.MemoryLoad">
            <summary>
            Number between 0 and 100 that specifies the approximate 
            percentage of physical memory that is in use (0 indicates no 
            memory use and 100 indicates full memory use). 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.TotalPhysicalBytes">
            <summary>
            Total size of physical memory, in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.AvailablePhysicalBytes">
            <summary>
            Size of physical memory available, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.TotalPageFileBytes">
            <summary>
            Size of the committed memory limit, in bytes. This is physical
            memory plus the size of the page file, minus a small overhead. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.AvailablePageFileBytes">
            <summary>
            Size of available memory to commit, in bytes. The limit is 
            ullTotalPageFile. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.TotalVirtualBytes">
            <summary>
            Total size of the user mode portion of the virtual address 
            space of the calling process, in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.AvailableVirtualBytes">
            <summary>
            Size of unreserved and uncommitted memory in the user mode 
            portion of the virtual address space of the calling process, 
            in bytes. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.AvailableExtendedVirtualBytes">
            <summary>
            Size of unreserved and uncommitted memory in the extended 
            portion of the virtual address space of the calling process, 
            in bytes. 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NativeMethods.MemoryStatusEx.Initialize">
            <summary>
            Must be called before passing this structure into any methods.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.BinaryEntityRelationshipType">
            <summary>
            A type of binary relationship among entities.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipType">
            <summary>
            A type of relationship among entities.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="properties"></param>
            <param name="isFromBaseOntology"></param>
            <param name="allowMultipleInstances"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.Ontology">
            <summary>
            Gets the ontology to which this relationship belongs.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.Names">
            <summary>
            Gets the localized names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.Descriptions">
            <summary>
            Gets the localized descriptions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.Properties">
            <summary>
            Gets the property definitions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.IsFromBaseOntology">
            <summary>
            Gets whether this relationship type is inherited from
            the base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.IsObsolete">
            <summary>
            Gets whether the object is obsolete (i.e. the data source's
            ontology has been updated since obtaining this object).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipType.AllowMultipleInstances">
            <summary>
            Gets whether multiple instances of a specific RelationshipType are 
            allowed for a given feature.  For example, only one default context 
            relationship will be allowed for an entity, but multiple AdminContexts 
            would be allowed for a Road entity instance.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipType.CollectionDifferenceAnalyzer">
            <summary>
            Compares two collections.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologyDifference.CollectionDifferenceAnalyzer">
            <summary>
            Compares two collections.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologyDifference">
            <summary>
            Represents the difference between two ontologies.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.Calculate(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.Ontology@)">
            <summary>
            Calculate the difference between old and new ontologies. If there
            is no difference, returns null.
            
            If the difference would involve making changes that are not
            allowed (such as removing or updating an entity type of which
            instances exist in the data source), then the method will throw.
            </summary>
            <param name="dataSource"></param>
            <param name="oldOntology"></param>
            <param name="newOntology"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.Update(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.DataSource.OntologyStore)">
            <summary>
            Update an ontology store with this difference.
            </summary>
            <param name="dataSource"></param>
            <param name="ontologyStore"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.GetStorageGroupForEntityType(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Determines the storage group the new entity type belongs to
            </summary>
            <param name="dataSource"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.#ctor(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
            <param name="enumDefinitionRemovals"></param>
            <param name="enumDefinitionAdditions"></param>
            <param name="enumDefinitionUpdates"></param>
            <param name="nameRoleRemovals"></param>
            <param name="nameRoleAdditions"></param>
            <param name="nameRoleUpdates"></param>
            <param name="entityTypeRemovals"></param>
            <param name="entityTypeAdditions"></param>
            <param name="entityTypeUpdates"></param>
            <param name="primitiveTypeRemovals"></param>
            <param name="primitiveTypeAdditions"></param>
            <param name="primitiveTypeUpdates"></param>
            <param name="relationshipTypeRemovals"></param>
            <param name="relationshipTypeAdditions"></param>
            <param name="relationshipTypeUpdates"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologyDifference.Change">
            <summary>
            Enum type used by various specialized comparer classes
            that identify whether a pair of objects are different,
            and if so, what sort of difference.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.OntologyDifference.Change.Unchanged">
            <summary>
            The two objects are completely identical.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.OntologyDifference.Change.Trivial">
            <summary>
            The two objects are different in some trivial
            manner that requires no validation.
            </summary>
            <remarks>
            For example, if only the localized descriptions
            of an entity type have changed, that's okay even
            if entities of that type exist, because modifying
            the descriptions of the type won't affect the
            entities themselves.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.OntologyDifference.Change.Substantive">
            <summary>
            The two objects are different in a substantive
            fashion that may require validation.
            </summary>
            <remarks>
            For example, if you add a property to an entity type,
            that would affect any entities of that type, so such
            a change would be allowed only if no entities of that
            type exist.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Data.OntologyDifference.Change.Replace">
            <summary>
            The two objects are different in such a way that the
            existing object must be removed and a new one of the
            same name added, rather than simply updating the
            existing item.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologyDifference.ChangeComparer">
            <summary>
            Compares objects to find out how they've changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.ChangeComparer.GetKeyName(System.Object)">
            <summary>
            Gets the key name of an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.ChangeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.ChangeComparer.AssertValidComparisonObjects(System.Object,System.Object)">
            <summary>
            Assert that two objects are valid for comparing to each other.
            </summary>
            <param name="oldObject"></param>
            <param name="newObject"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologyDifference.CollectionDifferenceAnalyzer">
            <summary>
            Compares two collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.CollectionDifferenceAnalyzer.#ctor(Microsoft.MapPoint.Data.OntologyDifference.ChangeComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="changeComparer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.CollectionDifferenceAnalyzer.ValidateCanModify(Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Validate that an object is allowed to be modified or removed.
            Throw if it can't.
            </summary>
            <param name="dataSource"></param>
            <param name="objectToValidate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.CollectionDifferenceAnalyzer.GetByKeyName(System.Collections.ICollection,System.String)">
            <summary>
            Tries to get an object with the specified key name.
            Returns null if not found.
            </summary>
            <param name="collection"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.CollectionDifferenceAnalyzer.PostProcess(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Do any necessary post-processing on removals, additions, and updates,
            such as sort order.
            </summary>
            <param name="removals"></param>
            <param name="additions"></param>
            <param name="updates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyDifference.CollectionDifferenceAnalyzer.Analyze(Microsoft.MapPoint.Data.DataSource,System.Collections.ICollection,System.Collections.ICollection,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Analyze the difference between the two collections.
            </summary>
            <param name="dataSource">The data source we're working with.</param>
            <param name="oldCollection">An old collection.</param>
            <param name="newCollection">A new collection.</param>
            <param name="removals">Objects present in the old collection but not in the new.</param>
            <param name="additions">Objects present in the new collection but not in the old.</param>
            <param name="updates">Objects present in both collections that have changed.</param>
            <returns>True if there are any changes, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.CollectionDifferenceAnalyzer.GetByKeyName(System.Collections.ICollection,System.String)">
            <summary>
            Tries to get an object with the specified key name.
            Returns null if not found.
            </summary>
            <param name="collection"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.CollectionDifferenceAnalyzer.ValidateCanModify(Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Validate that an object is allowed to be modified or removed.
            Throw if it can't.
            </summary>
            <param name="dataSource"></param>
            <param name="objectToValidate"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipType.ChangeComparer">
            <summary>
            Compares objects to find out how they've changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.ChangeComparer.GetKeyName(System.Object)">
            <summary>
            Gets the key name of an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.ChangeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.ChangeComparer.CompareBinaryEntityRelationshipTypes(Microsoft.MapPoint.Data.BinaryEntityRelationshipType,Microsoft.MapPoint.Data.BinaryEntityRelationshipType)">
            <summary>
            Compares binary relationship type specific differences
            </summary>
            <param name="oldItem"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipType.ChangeComparer.CompareProperties(Microsoft.MapPoint.Data.EntityRelationshipType,Microsoft.MapPoint.Data.EntityRelationshipType)">
            <summary>
            Returns true if two entity types have the same properties,
            false if not.
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.DefaultContextKeyName">
            <summary>
            The key name of the default context relationship.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityType,System.Boolean,System.Boolean,System.Collections.Hashtable,Microsoft.MapPoint.Data.RelationshipPropertyDefinition[])">
            <summary>
            Constructor. This form is called to build a binary entity relationship
            type from the deserialization code
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="sourceEntityType"></param>
            <param name="targetEntityType"></param>
            <param name="isFromBaseOntology"></param>
            <param name="allowMultipleInstances"></param>
            <param name="propertiesForType"></param>
            <param name="sortedProperties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.BinaryEntityRelationshipTypeSpecification,Microsoft.MapPoint.Data.EntityTypeKeyedCollection,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Constructor. This form is called to build a binary entity relationship
            type from an writeable specification.
            </summary>
            <param name="ontology"></param>
            <param name="specification"></param>
            <param name="entityTypes"></param>
            <param name="enumDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityType,System.Boolean,System.Boolean,Microsoft.MapPoint.Data.RelationshipPropertyDefinitionKeyedCollection)">
            <summary>
            Private constructor. Called during deserialization, and also
            when deriving one ontology from another.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="sourceEntityType"></param>
            <param name="targetEntityType"></param>
            <param name="isFromBaseOntology"></param>
            <param name="allowMultipleInstances"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.Derive(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.Equals(Microsoft.MapPoint.Data.BinaryEntityRelationshipType)">
            <summary>
            Determines whether the specified object is equal to the current BinaryEntityRelationshipType.
            If the specified object is an BinaryEntityRelationshipType, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current BinaryEntityRelationshipType.
            If the specified object is an BinaryEntityRelationshipType, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.GetHashCode">
            <summary>Serves as a hash function for PrimitiveType.</summary>
            <returns>A hash code for the current PrimitiveType.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.SourceEntityType">
            <summary>
            Gets the source entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BinaryEntityRelationshipType.TargetEntityType">
            <summary>
            Gets the target entity type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.BinaryEntityRelationshipTypeSpecification">
            <summary>
            A type of binary relationship among entities.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification">
            <summary>
            A type of relationship among entities.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.#ctor(System.String,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.WriteableCollections.RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="properties"></param>
            <param name="isFromBaseOntology"></param>
            <param name="allowMultipleInstances"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.Names">
            <summary>
            Gets the localized names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.Descriptions">
            <summary>
            Gets the localized descriptions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.Properties">
            <summary>
            Gets the property definitions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.IsFromBaseOntology">
            <summary>
            Gets whether this relationship type is inherited from
            the base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipTypeSpecification.AllowMultipleInstances">
            <summary>
            Gets whether multiple instances of a specific RelationshipType are 
            allowed for a given feature.  For example, only one default context 
            relationship will be allowed for an entity, but multiple AdminContexts 
            would be allowed for a Road entity instance.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,System.String,System.Boolean)">
            <summary>
            Constructor. This form is used when constructing a brand-new
            binary entity relationship type.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="allowMultipleInstances"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.BinaryEntityRelationshipType)">
            <summary>
            Constructor. This form is used when constructing a binary
            entity relationship specification from an existing read-only
            object.
            </summary>
            <param name="ontology"></param>
            <param name="relationshipType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipTypeSpecification.ValidateEntityType(Microsoft.MapPoint.Data.EntityTypeSpecification,System.String)">
            <summary>
            Validate that the specified entity type is okay to use.
            </summary>
            <param name="entityType"></param>
            <param name="argumentName"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BinaryEntityRelationshipTypeSpecification.SourceEntityType">
            <summary>
            Gets the source entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.BinaryEntityRelationshipTypeSpecification.TargetEntityType">
            <summary>
            Gets the target entity type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification">
            <summary>
            The specification for an entity property definition.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyDefinitionSpecification">
            <summary>
            Base class for all properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.DefaultIsMultiValued">
            <summary>
            Whether properties are multi-valued by default.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.DefaultIsRequired">
            <summary>
            Whether properties are required by default.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.#ctor(System.String,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.#ctor(System.String,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.EnumDefinitionSpecification,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.#ctor(System.String,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,System.Type,Microsoft.MapPoint.Data.EnumDefinitionSpecification,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="valueType"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.IsEnum(System.Type)">
            <summary>
            Gets whether the specified type is an enum type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.GetEnumDefinition(Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection)">
            <summary>
            Gets the enum definition specification from the collection that corresponds
            to the definition passed in.
            </summary>
            <param name="definition"></param>
            <param name="definitions"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.Names">
            <summary>
            Gets the localized names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.Descriptions">
            <summary>
            Gets the localized descriptions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.ValueType">
            <summary>
            Gets or sets the value type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.EnumType">
            <summary>
            Gets or sets the enum type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.IsMultiValued">
            <summary>
            Gets whether the property is multi-valued. If true,
            property values will return a collection objects;
            if false, property values will return a lone object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.IsRequired">
            <summary>
            Gets whether the property is required.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.IsFromBaseOntology">
            <summary>
            Gets whether the property is inherited from the base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.Ontology">
            <summary>
            Gets the ontology specification to which this belongs.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.KeyNameComparer">
            <summary>
            Compares property definitions by their key names.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinitionSpecification.KeyNameComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.EntityTypeSpecification,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Constructor. This is called from
            EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Create().
            </summary>
            <param name="definingEntityType"></param>
            <param name="keyName"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.EntityTypeSpecification,System.String,Microsoft.MapPoint.Data.EnumDefinitionSpecification,System.Boolean,System.Boolean)">
            <summary>
            Constructor. This is called from
            EntityPropertyDefinitionSpecificationWriteableKeyedCollection.Create().
            </summary>
            <param name="definingEntityType"></param>
            <param name="keyName"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.EntityTypeSpecification,Microsoft.MapPoint.Data.EntityPropertyDefinition,Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection)">
            <summary>
            Constructor. This is called from the constructor of
            EntityPropertyDefinitionSpecificationWriteableKeyedCollection
            that takes a read-only collection of EntityPropertyDefinitionSpecification
            as input.  That is, it's called when we're building an
            OntologySpecification from an Ontology.
            </summary>
            <param name="definingEntityType"></param>
            <param name="definition"></param>
            <param name="enumDefinitions"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification.DefiningEntityType">
            <summary>
            Gets the entity type on which this property is defined.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification.Ontology">
            <summary>
            Gets the ontology specification to which this belongs.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumValueSpecification">
            <summary>
            Defines a possible value for an enumerated type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueSpecification.#ctor(System.String,System.Int32)">
            <summary>
            Constructor, used for creating a brand-new specification.
            </summary>
            <param name="keyName">Key name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueSpecification.#ctor(Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Constructor, used for constructing a specification from an existing value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueSpecification.ToString">
            <summary>
            A string representation, handy for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueSpecification.ToString(System.IFormatProvider)">
            <summary>
            A string representation, handy for debugging.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueSpecification.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValueSpecification.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueSpecification.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueSpecification.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueSpecification.Names">
            <summary>
            Gets the friendly names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValueSpecification.Descriptions">
            <summary>
            Gets the friendly descriptions.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NameRoleSpecification">
            <summary>
            Summary description for NameRoleSpecification.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.#ctor(System.String)">
            <summary>
            public constructor
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.#ctor(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            internal cstor.
            </summary>
            <param name="existingNameRole">The existing name role to copy data from</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.GetHashCode">
            <summary>
            Get the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.op_Equality(Microsoft.MapPoint.Data.NameRoleSpecification,Microsoft.MapPoint.Data.NameRoleSpecification)">
            <summary>
            == operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.op_Inequality(Microsoft.MapPoint.Data.NameRoleSpecification,Microsoft.MapPoint.Data.NameRoleSpecification)">
            <summary>
            != operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.op_LessThan(Microsoft.MapPoint.Data.NameRoleSpecification,Microsoft.MapPoint.Data.NameRoleSpecification)">
            <summary>
            "left than" operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.op_GreaterThan(Microsoft.MapPoint.Data.NameRoleSpecification,Microsoft.MapPoint.Data.NameRoleSpecification)">
            <summary>
            "greator than" operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRoleSpecification.CompareTo(System.Object)">
            <summary>
            Implementation of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="obj">NameRoleSpecification to compare to this instance.</param>
            <returns>See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRoleSpecification.IsFromBaseOntology">
            <summary>
            Returns true if this role was defined on a base ontology
            as is not editable.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRoleSpecification.Names">
            <summary>
            Gets the names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRoleSpecification.KeyName">
            <summary>
            gets the keyname.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DataSourceReference">
            <summary>
            Summary description for DataSourceReference.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSourceReference.#ctor(System.Guid,System.Version)">
            <summary>
            Cstor.
            </summary>
            <param name="dataSourceId"></param>
            <param name="dataSourceVersion"></param>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSourceReference.Id">
            <summary>
            Gets the id.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.DataSourceReference.Version">
            <summary>
            Gets the version
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSourceReference.Equals(System.Object)">
            <summary>
            Implement value equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSourceReference.GetHashCode">
            <summary>
            Implement hash code generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSourceReference.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DataSourceReference.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityAuthorityReference">
            <summary>
            A light weight object for EntityAuthority.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityAuthorityReference.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityAuthorityReference.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityAuthorityReference.EntityAuthority">
            <summary>
            returns the entity authority.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthorityReference.#ctor(Microsoft.MapPoint.Data.EntityAuthority,System.Guid,System.Version)">
            <summary>
            cstor.
            </summary>
            <param name="entityAuthority"></param>
            <param name="entityAuthorityId"></param>
            <param name="entityAuthorityVersion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthorityReference.#ctor(System.Guid,System.Version)">
            <summary>
            cstor.
            </summary>
            <param name="entityAuthorityId"></param>
            <param name="entityAuthorityVersion"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityName">
            <summary>
            Simple, single string name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityName.#ctor(System.String,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.EntityName"/> class.
            </summary>
            <param name="name">The string entity name.  Can be null.</param>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityName.#ctor(System.String,System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.EntityName"/> class.
            </summary>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <param name="nameRole"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityName.BaseName">
            <summary>
            Gets very minimal version of the name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityName.FullName">
            <summary>
            Gets the entire name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityName.MapName">
            <summary>
            Gets a map-displayable name.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntitySpecification">
            <summary>
            This class describes all the user settable data on an entity
            This is the primary method used to modify entity data
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntitySpecification.#ctor(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntitySpecification.#ctor(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Construct an EntitySpecification by copying the contents of an existing entity.
            </summary>
            <param name="existingEntity"></param>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntitySpecification.EntityType">
            <summary>
            Entity type reference
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntitySpecification.Names">
            <summary>
            Name collection accessor
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntitySpecification.Properties">
            <summary>
            Property collection
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntitySpecification.Relationships">
            <summary>
            Relationship collection
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityTypeSpecification">
            <summary>
            Editable specification for an EntityType.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,System.String,System.String,Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Constructor.
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
            <param name="keyName">The key name of the entity.</param>
            <param name="defaultNameRoleKeyName">The key name of the entity type's default name role.</param>
            <param name="parent">The parent entity type.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Construct an EntityTypeSpecification from an existing entity type.
            </summary>
            <param name="ontology"></param>
            <param name="entityType"></param>
            <param name="parentEntityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,System.String,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,System.String,System.Boolean,Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Private constructor.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="defaultNameRoleKeyName"></param>
            <param name="isFromBaseOntology"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.IsDescendantOf(Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Checks to see if this entity type specification is a descendant of the specified EntityTypeSpecification
            type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeSpecification.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.Names">
            <summary>
            Gets the localized names of the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.Descriptions">
            <summary>
            Gets the localized descriptions of the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.DefaultNameRole">
            <summary>
            Gets or sets the default name role.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.IsFromBaseOntology">
            <summary>
            Gets whether the entity type is inherited from a base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.Parent">
            <summary>
            Gets the parent of this entity type. For the root entity type,
            this will return null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.Properties">
            <summary>
            Gets the property definitions for this entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeSpecification.Ontology">
            <summary>
            Gets the ontology specification to which this object belongs.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.FlagsEnumValue">
            <summary>
            Represents the bitwise union of multiple EnumValue objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.#ctor(Microsoft.MapPoint.Data.EnumValue[])">
            <summary>
            Constructor.
            </summary>
            <param name="values">The set of values to assemble.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.Add(Microsoft.MapPoint.Data.EnumValue[])">
            <summary>
            Add values.
            </summary>
            <param name="values">The set of values to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.Remove(Microsoft.MapPoint.Data.EnumValue[])">
            <summary>
            Remove values.
            </summary>
            <param name="values">The set of values to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.Has(Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Returns whether the specified value is present.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.GetValues(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Get the enum values contained in the flags enum. Throws if the
            flags enum has bits set that are not compatible with the enum definition.
            </summary>
            <param name="enumDefinition">The enum that defines the values to return.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_BitwiseAnd(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Combine two FlagsEnumValue via bitwise AND.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_BitwiseAnd(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Combine a FlagsEnumValue and an EnumValue via bitwise AND.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_BitwiseAnd(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Combine a FlagsEnumValue and an EnumValue via bitwise AND.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_BitwiseOr(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Combine two FlagsEnumValue via bitwise OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_BitwiseOr(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Combine a FlagsEnumValue and an EnumValue via bitwise OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_BitwiseOr(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Combine a FlagsEnumValue and an EnumValue via bitwise OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_ExclusiveOr(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Combine two FlagsEnumValue via bitwise exclusive OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_ExclusiveOr(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Combine a FlagsEnumValue and an EnumValue via bitwise exclusive OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_ExclusiveOr(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Combine a FlagsEnumValue and an EnumValue via bitwise exclusive OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_OnesComplement(Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Get the bitwise ones complement of a FlagsEnumValue.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_Equality(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Gets whether two FlagsEnumValue are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_Inequality(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Gets whether two FlagsEnumValue are unequal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.op_Explicit(System.Int32)~Microsoft.MapPoint.Data.FlagsEnumValue">
            <summary>
            Casting operator to get a FlagsEnumValue from an int.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.Equals(System.Object)">
            <summary>
            Ges whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.ValidateEnumDefinition(Microsoft.MapPoint.Data.EnumDefinition,System.String)">
            <summary>
            Validate that this flags enum value is valid in the specified
            enum definition.
            </summary>
            <param name="enumDefinition"></param>
            <param name="argumentName"></param>
            <returns>Number of values in the specified enum definition that this flags enum contains.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.GetOwner(Microsoft.MapPoint.Data.EnumValue[],System.Int32)">
            <summary>
            Gets an enum definition, ensuring that it's non-null and is a flags enum.
            </summary>
            <param name="values"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.ValidateValue(Microsoft.MapPoint.Data.EnumValue,System.String)">
            <summary>
            Validate a value.
            </summary>
            <param name="value"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.CompareTo(System.Object)">
            <summary>
            Compares a flag enum to another object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FlagsEnumValue.CompareTo(Microsoft.MapPoint.Data.FlagsEnumValue)">
            <summary>
            Compares a flag enum to another flag enum
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.FlagsEnumValue.Empty">
            <summary>
            Gets an empty FlagsEnumValue.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.FlagsEnumValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityPropertyDefinition">
            <summary>
            Definition of a property on an entity.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyDefinition">
            <summary>
            Base class for all properties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.#ctor(System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.#ctor(System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.EnumDefinition,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.#ctor(System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,System.Type,Microsoft.MapPoint.Data.EnumDefinition,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="valueType"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.GetEnumDefinition(Microsoft.MapPoint.Data.EnumDefinitionSpecification,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Get the enum definition from the collection corresponding
            to the specified specification.
            </summary>
            <param name="specification"></param>
            <param name="definitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.GetEnumDefinition(Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Get the enum definition from the collection corresponding
            to the specified definition.
            </summary>
            <param name="definition"></param>
            <param name="definitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyDefinition.Compare(Microsoft.MapPoint.Data.PropertyDefinition,Microsoft.MapPoint.Data.PropertyDefinition)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldItem"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.Names">
            <summary>
            Gets the localized names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.Descriptions">
            <summary>
            Gets the localized descriptions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.ValueType">
            <summary>
            Gets the value type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.EnumType">
            <summary>
            Gets the enum type. Note that this will be null unless
            ValueType is EnumValue or FlagsEnumValue.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.IsMultiValued">
            <summary>
            Gets whether the property is multi-valued. If true,
            property values will return a collection objects;
            if false, property values will return a lone object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.IsRequired">
            <summary>
            Gets whether the property is required.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.IsFromBaseOntology">
            <summary>
            Gets whether this property is inherited from the base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PropertyDefinition.Index">
            <summary>
            Gets the index of the property. This is used for efficient
            retrieval of property values.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinition.#ctor(Microsoft.MapPoint.Data.EntityPropertyDefinitionSpecification,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="specification"></param>
            <param name="owningEntityType"></param>
            <param name="enumDefinitions"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinition.#ctor(System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,System.Type,System.String,System.Boolean,System.Boolean,System.Boolean,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection,System.Int32)">
            <summary>
            Internal Constructor used only by deserialization.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="valueType"></param>
            <param name="enumDefinitionKeyName"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
            <param name="owningEntityType"></param>
            <param name="enumDefinitions"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinition.#ctor(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection,Microsoft.MapPoint.Data.EntityPropertyDefinition)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntologyDefiningEntityType"></param>
            <param name="newOntologyEnumDefinitions"></param>
            <param name="baseOntologyProperty"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinition.Equals(Microsoft.MapPoint.Data.EntityPropertyDefinition)">
            <summary>
            Determines whether the specified object is equal to the current EntityPropertyDefinition.
            If the specified object is an EntityPropertyDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current EntityPropertyDefinition.
            If the specified object is an EntityPropertyDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyDefinition.GetHashCode">
            <summary>Serves as a hash function for EntityPropertyDefinition</summary>
            <returns>A hash code for the current EntityPropertyDefinition.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityPropertyDefinition.DefiningEntityType">
            <summary>
            Gets the entity type on which this property is defined.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityType">
            <summary>
            Every entity has one and only one type, describing the nature of the entity.  
            Examples of types may be “Restaurant”, “Lake”, or “Country.” Types are arranged in 
            a hierarchy, so any given type may have a parent type; for instance, “Lake” may be 
            a child of “Hydrology”.  All entity types belong to an ontology. Entity types are 
            arranged in a hierarchical fashion, with each type having a single parent type, 
            except for the root type for the ontology, which has no parent. While the real 
            world may have EntityTypes that are related more realistically in a graph, rather
            than a hierarchy, we have chosen a tree hierarchy over the graph for simplicity
            reasons and because it works well for majority use cases.  Even though some edge 
            cases are problematic, the simplicity of the hierarchy is very desireable.  Entity 
            types also have properties associated with them. Properties have a name and a data type. 
            There are two sets of properties associated with a given entity type:
            	
            	- Entity properties are associated with entities of a specific type.
            	- Primitive properties are associated with the geometric primitives that make up 
            	  an entity of a specific type.
            
            All properties are inherited from a parent type to its child types. A particular 
            child type may also add properties of its own to those inherited from its parent.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityType.RootEntityTypeKeyName">
            <summary>
            Gets the key name of the root entity type.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityType.emptyRelationshipCollection">
            <summary>
            An empty "static" collection of relationships to be used on entities of this type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.IsDescendantOf(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Gets whether the this entity type is a descendant of the specified one.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.GetChildren">
            <summary>
            Calculates all of the entity types that are children of this entity type.
            Can be expensive if there are many entity types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.#ctor(Microsoft.MapPoint.Data.EntityTypeSpecification,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Constructor.  This is internal and should only be called from
            EntityTypeKeyedCollection's constructor.
            </summary>
            <param name="specification"></param>
            <param name="parentEntityType"></param>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.NameRole,System.Boolean,Microsoft.MapPoint.Data.EntityType,System.Collections.ArrayList)">
            <summary>
            internal constructor used by deserialization code
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="defaultNameRole"></param>
            <param name="isFromBaseOntology"></param>
            <param name="parent"></param>
            <param name="propertyHolders"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.EntityTypeKeyedCollection,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <param name="newOntologyEntityTypes"></param>
            <param name="baseOntologyEntityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.NameRole,System.Boolean,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Private constructor.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="defaultNameRole"></param>
            <param name="isFromBaseOntology"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.Equals(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Determines whether the specified object is equal to the current EntityType.
            If the specified object is an EntityType, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current EntityType.
            If the specified object is an EntityType, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.GetHashCode">
            <summary>Serves as a hash function for EntityType.</summary>
            <returns>A hash code for the current EntityType.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.GetNameRole(Microsoft.MapPoint.Data.NameRoleSpecification,Microsoft.MapPoint.Data.NameRoleKeyedCollection)">
            <summary>
            Gets the name role corresponding to the given name role specification.
            </summary>
            <param name="specification"></param>
            <param name="nameRoles"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.Names">
            <summary>
            Gets the localized names of the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.Descriptions">
            <summary>
            Gets the localized descriptions of the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.DefaultNameRole">
            <summary>
            Gets the default name role for the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.IsFromBaseOntology">
            <summary>
            Gets whether the entity type is inherited from a base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.Ontology">
            <summary>
            Gets the ontology this entity type belongs to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.Parent">
            <summary>
            Gets the parent of this entity type. For the root entity type,
            this will return null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.Properties">
            <summary>
            Gets the properties defined on the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.IsRoot">
            <summary>
            Gets whether or not this entity type is the root of the entity type hierarchy.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.EmptyRelationshipCollection">
            <summary>
            Returns an empty relationship collection for entities of this type.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityType.IsObsolete">
            <summary>
            Gets whether the object is obsolete (i.e. the data source's
            ontology has been updated since obtaining this object).
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityType.ChangeComparer">
            <summary>
            Compares objects to find out how they've changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ChangeComparer.GetKeyName(System.Object)">
            <summary>
            Gets the key name of an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ChangeComparer.DoesDifferenceRequireReplace(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Determines if the difference between the two types requires a replace operation
            </summary>
            <param name="oldItem"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ChangeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ChangeComparer.HaveSameAncestry(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Returns true if two entity types have the same ancestry,
            false if they don't.
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.ChangeComparer.CompareProperties(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Returns true if two entity types have the same properties,
            false if not.
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityType.CollectionDifferenceAnalyzer">
            <summary>
            Compares two collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.CollectionDifferenceAnalyzer.GetByKeyName(System.Collections.ICollection,System.String)">
            <summary>
            Tries to get an object with the specified key name.
            Returns null if not found.
            </summary>
            <param name="collection"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.CollectionDifferenceAnalyzer.ValidateCanModify(Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Validate that an object is allowed to be modified or removed.
            Throw if it can't.
            </summary>
            <param name="dataSource"></param>
            <param name="objectToValidate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.CollectionDifferenceAnalyzer.PostProcess(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Do any necessary post-processing on removals, additions, and updates,
            such as sort order.
            </summary>
            <param name="removals"></param>
            <param name="additions"></param>
            <param name="updates"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityType.CollectionDifferenceAnalyzer.InheritanceComparer">
            <summary>
            Sorts entity types by inheritance order.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.CollectionDifferenceAnalyzer.InheritanceComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityType.CollectionDifferenceAnalyzer.InheritanceComparer.GenerationOf(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Returns how many generations removed from the root
            entity type an entity type is.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumDefinition">
            <summary>
            The definition of an enumerated value type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,System.Boolean,System.Boolean,Microsoft.MapPoint.Data.DataSource.EnumValueHolder[])">
            <summary>
            Constructor called from deserialization code to construct and enum definition
            Takes ownership of the passed in objects, so don't modify them after passing 
            them in.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="isFlagsEnum"></param>
            <param name="isFromBaseOntology"></param>
            <param name="enumValuesForDefinition">ArrayList of DataSource.OntologyStore.EnumValueHolder objects.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.AssertValuesSortedOrder(Microsoft.MapPoint.Data.EnumValue[])">
            <summary>
            Asserts that the provided values are in sorted order.
            </summary>
            <param name="testValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.EnumDefinitionSpecification)">
            <summary>
            Constructor called when building an enum from a specification
            </summary>
            <param name="ontology"></param>
            <param name="specification"></param>
            <remarks>
            We make this internal because the only place to get one of these is via
            EnumDefinitionSpecification.GetReadOnlyCopy().
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <param name="baseOntologyDefinition"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.EnumDefinitionsAddedOnly(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Returns true if the enum definitions in the parameter
            have all old definitions and some additional ones
            </summary>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.AdjustEnumDefinition(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Special case method to handle internal adjustment
            For the simple case of adding enum values
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.Equals(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Determines whether the specified object is equal to the current EnumDefinition.
            If the specified object is an EnumDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current EnumDefinition.
            If the specified object is an EnumDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.GetHashCode">
            <summary>Serves as a hash function for PrimitivePropertyDefinition</summary>
            <returns>A hash code for the current PrimitivePropertyDefinition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinition.Ontology">
            <summary>
            Gets the ontology to which this enum definition belongs.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinition.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinition.IsFlagsEnum">
            <summary>
            Gets whether the enumerated type is a flags enum.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinition.Values">
            <summary>
            Gets the collection of value definitions for this enumerated type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinition.IsFromBaseOntology">
            <summary>
            Gets whether this definition is inherited from a base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinition.IsObsolete">
            <summary>
            Gets whether the object is obsolete (i.e. the data source's
            ontology has been updated since obtaining this object).
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumDefinition.EmptyEnumException">
            <summary>
            Exception that's thrown if you try to build an EnumDefinitionNew
            out of an empty EnumDefinitionSpecification.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.EmptyEnumException.#ctor(Microsoft.MapPoint.Data.EnumDefinitionSpecification)">
            <summary>
            Constructor.
            </summary>
            <param name="emptyEnum">The offending enum definition.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinition.EmptyEnumException.EmptyEnum">
            <summary>
            Gets the empty EnumDefinitionSpecification that caused the error.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumDefinition.ChangeComparer">
            <summary>
            Compares objects to find out how they've changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.ChangeComparer.GetKeyName(System.Object)">
            <summary>
            Gets the key name of an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.ChangeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumDefinition.CollectionDifferenceAnalyzer">
            <summary>
            Compares two collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.CollectionDifferenceAnalyzer.GetByKeyName(System.Collections.ICollection,System.String)">
            <summary>
            Tries to get an object with the specified key name.
            Returns null if not found.
            </summary>
            <param name="collection"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.CollectionDifferenceAnalyzer.ValidateCanModify(Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Validate that an object is allowed to be modified or removed.
            Throw if it can't.
            </summary>
            <param name="dataSource"></param>
            <param name="objectToValidate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.CollectionDifferenceAnalyzer.ValidateCanModifyByEntityType(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.EntityTypeKeyedCollection)">
            <summary>
            Validate that none of the entity types would cause a problem with
            modifying this enum definition.
            </summary>
            <param name="dataSource"></param>
            <param name="definition"></param>
            <param name="entityTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.CollectionDifferenceAnalyzer.ValidateCanModifyByPrimitiveType(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.PrimitiveTypeKeyedCollection)">
            <summary>
            Validate that none of the primitive types would cause a problem with
            modifying this enum definition.
            </summary>
            <param name="dataSource"></param>
            <param name="definition"></param>
            <param name="primitiveTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.CollectionDifferenceAnalyzer.ValidateCanModifyByEntityRelationshipType(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.EntityRelationshipTypeKeyedCollection)">
            <summary>
            Validate that none of the entity relationship types would cause a problem with
            modifying this enum definition.
            </summary>
            <param name="dataSource"></param>
            <param name="definition"></param>
            <param name="relationshipTypes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinition.CollectionDifferenceAnalyzer.ValidateCanModifyByEntityRelationshipProperty(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.EntityRelationshipType,Microsoft.MapPoint.Data.RelationshipPropertyDefinition)">
            <summary>
            Validate that none of the entity types which could contain this relationship
            have any existing entity instances.
            </summary>
            <param name="dataSource"></param>
            <param name="definition"></param>
            <param name="relationshipType"></param>
            <param name="property"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumDefinitionSpecification">
            <summary>
            The definition of an enumerated value type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionSpecification.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionSpecification.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="keyName">The key name.</param>
            <param name="isFlagsEnum">Whether the enumerated type is a flags enum.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Constructor that edits an existing enum definition.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumDefinitionSpecification.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionSpecification.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionSpecification.IsFlagsEnum">
            <summary>
            Gets whether the enumerated type is a flags enum.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionSpecification.Values">
            <summary>
            Gets the collection of value definitions for this enumerated type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumDefinitionSpecification.IsFromBaseOntology">
            <summary>
            Gets whether this definition is inherited from a base ontology.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EnumValue">
            <summary>
            Defines a possible value for an enumerated type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.#ctor(Microsoft.MapPoint.Data.EnumDefinition,System.String,System.Int32,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Constructor used by deserialization.
            </summary>
            <param name="enumType">The owning EnumDefinition.</param>
            <param name="keyName">Key name.</param>
            <param name="value">Value.</param>
            <param name="names">Friendly names (may be null).</param>
            <param name="descriptions">Friendly descriptions (may be null).</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.#ctor(Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.EnumValueSpecification)">
            <summary>
            Constructor used to build from a writeable specification.
            </summary>
            <param name="enumType"></param>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.#ctor(Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOwner"></param>
            <param name="oldValue"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.Equals(Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Determines whether the specified object is equal to the current EnumValue.
            If the specified object is an EnumValue, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current EnumValue.
            If the specified object is an EnumValue, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.op_Equality(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.op_Inequality(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.GetHashCode">
            <summary>Serves as a hash function for PrimitivePropertyDefinition</summary>
            <returns>A hash code for the current PrimitivePropertyDefinition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.ToString">
            <summary>
            A string representation, handy for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.ToString(System.IFormatProvider)">
            <summary>
            A string representation, handy for debugging.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.op_BitwiseAnd(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Combine two EnumValue objects via bitwise AND.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.op_BitwiseOr(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Combine two EnumValue objects via bitwise OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.op_ExclusiveOr(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Combine two EnumValue objects via bitwise exclusive OR.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.op_OnesComplement(Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Get the bitwise ones complement of an EnumValue.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.Compare(Microsoft.MapPoint.Data.EnumValue,Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldItem"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.CompareTo(Microsoft.MapPoint.Data.EnumValue)">
            <summary>
            Compares an enum to another enum
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EnumValue.CompareTo(System.Object)">
            <summary>
            Compares an enum to another object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValue.EnumType">
            <summary>
            Gets the enum definition to which this enum value belongs.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValue.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValue.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValue.Names">
            <summary>
            Gets the friendly names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EnumValue.Descriptions">
            <summary>
            Gets the friendly descriptions.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NameRole">
            <summary>
            Summary description for NameRole.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NameRole.PrimaryNameRoleKeyName">
            <summary>
            The key name of the primary name role.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.NameRoleSpecification)">
            <summary>
            Internal constructor from a specification
            </summary>
            <param name="ontology"></param>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,System.Boolean)">
            <summary>
            Internal constructor used only by deserialization
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="isFromBaseOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.Derive(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Called when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.GetHashCode">
            <summary>
            Get the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.op_Equality(Microsoft.MapPoint.Data.NameRole,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            == operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.op_Inequality(Microsoft.MapPoint.Data.NameRole,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            != operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.op_LessThan(Microsoft.MapPoint.Data.NameRole,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            "left than" operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.op_GreaterThan(Microsoft.MapPoint.Data.NameRole,Microsoft.MapPoint.Data.NameRole)">
            <summary>
            "greator than" operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.CompareTo(System.Object)">
            <summary>
            Implementation of <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="obj">NameRole to compare to this instance.</param>
            <returns>See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRole.IsFromBaseOntology">
            <summary>
            Returns true if this role was defined on a base ontology
            as is not editable.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRole.Names">
            <summary>
            Gets the names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRole.KeyName">
            <summary>
            gets the keyname.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRole.Ontology">
            <summary>
            Gets the ontology to which this name role belongs.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameRole.IsObsolete">
            <summary>
            Gets whether the object is obsolete (i.e. the data source's
            ontology has been updated since obtaining this object).
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NameRole.ChangeComparer">
            <summary>
            Compares objects to find out how they've changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.ChangeComparer.GetKeyName(System.Object)">
            <summary>
            Gets the key name of an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.ChangeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NameRole.CollectionDifferenceAnalyzer">
            <summary>
            Compares two collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameRole.CollectionDifferenceAnalyzer.GetByKeyName(System.Collections.ICollection,System.String)">
            <summary>
            Tries to get an object with the specified key name.
            Returns null if not found.
            </summary>
            <param name="collection"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Ontology">
            <summary>
            Ontology describes the types, properties, and relationships
            that can be used for a particular datasource.  An ontology can
            be inherited from a different datasource and extended, or
            multiple datasources may share the same ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.DerivesFrom(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Returns whether this ontology is derived from the specified ontology.
            </summary>
            <param name="ontology">An ontology.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.DerivesFrom(Microsoft.MapPoint.Data.OntologyReference)">
            <summary>
            Returns whether this ontology is derived from the
            specified ontology.
            </summary>
            <param name="ontologyReference">An ontology reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.Equals(System.Object)">
            <summary>
            Gets whether this ontology equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.GetHashCode">
            <summary>
            Get a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.Edit">
            <summary>
            Edit an existing ontology.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.IsValidPropertyValueType(System.Type)">
            <summary>
            Gets whether the specified value type is allowed for property values.
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.Derive(System.String,Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Derive a new ontology from this one.
            </summary>
            <param name="newKeyName"></param>
            <param name="newDataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Constructor for deriving an ontology from a base ontology.
            </summary>
            <param name="baseOntology">The ontology from which to derive.</param>
            <param name="keyName">The key name of the new ontology.</param>
            <param name="dataSource">The DataSource on which the derived ontology resides.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Creates a new Ontology from an OntologySpecification
            </summary>
            <param name="specification"></param>
            <param name="dataSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.#ctor(Microsoft.MapPoint.Data.DataSource.OntologyStore,Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Creates a new Ontology by deserializing it from the given ontologyStore
            </summary>
            <param name="ontologyStore"></param>
            <param name="dataSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.LoadNameRoles(Microsoft.MapPoint.Data.DataSource.OntologyStore)">
            <summary>
            Loads the name roles collection
            </summary>
            <param name="ontologyStore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.LoadEntityTypes(Microsoft.MapPoint.Data.DataSource.OntologyStore)">
            <summary>
            Loads the entity type collection
            </summary>
            <param name="ontologyStore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AddAfterParents(System.Collections.Hashtable,System.Collections.Hashtable,Microsoft.MapPoint.Data.Ontology.EntityTypeHolder,Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Add the entity type's parents first, then the entity type itself.
            </summary>
            <param name="lookup"></param>
            <param name="entityTypeData"></param>
            <param name="entityData"></param>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.LoadPrimitiveTypes(Microsoft.MapPoint.Data.DataSource.OntologyStore)">
            <summary>
            Loads the Primitive type collection
            </summary>
            <param name="ontologyStore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.LoadEntityRelationshipTypes(Microsoft.MapPoint.Data.DataSource.OntologyStore)">
            <summary>
            Loads the EntityRelationship type collection
            </summary>
            <param name="ontologyStore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.BuildRelationshipProperties(System.Collections.ArrayList,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection,System.Collections.Hashtable@,Microsoft.MapPoint.Data.RelationshipPropertyDefinition[]@)">
            <summary>
            Construct a read-only collection from an array of property data structures.
            called from the deserialization code.
            </summary>
            <param name="propertyData"></param>
            <param name="enumDefinitions"></param>
            <param name="lookup"></param>
            <param name="sortedProperties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.LoadEnumDefinitions(Microsoft.MapPoint.Data.DataSource.OntologyStore)">
            <summary>
            Loads the enum definition
            </summary>
            <param name="ontologyStore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.#ctor">
            <summary>
            Private constructor. This is used only for constructing the core ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertValid">
            <summary>
            Scan through the entire ontology, exhaustively and expensively,
            to make sure that it's in a valid state, i.e. doesn't validate
            referential integrity anywhere, etc.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertValidNameRoles">
            <summary>
            Assert that name roles are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertNameRoleReference(Microsoft.MapPoint.Data.NameRole)">
            <summary>
            Assert that the specified name role is present.
            </summary>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertValidEnumDefinitions">
            <summary>
            Assert that enum definitions are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertEnumDefinitionReference(Microsoft.MapPoint.Data.EnumDefinition)">
            <summary>
            Assert that the specified enum definition is present.
            </summary>
            <param name="enumDefinition"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertValidPropertyValueType(System.Type)">
            <summary>
            Assert that the specified value type is valid.
            </summary>
            <param name="valueType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertValidEntityTypes">
            <summary>
            Assert that entity types and properties are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertEntityTypeReference(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Assert that the specified entity type is present.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertValidPrimitiveTypes">
            <summary>
            Assert that primitive types and properties are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Ontology.AssertValidRelationshipTypes">
            <summary>
            Assert that relationship types and properties are in a valid state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.DataSource">
            <summary>
            Gets the datasource owning this ontology
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.Core">
            <summary>
            Gets the core ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.InitialVersion">
            <summary>
            Gets the version assigned to freshly created ontologies.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.InheritanceHierarchy">
            <summary>
            Gets the inheritance hierarchy.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.Reference">
            <summary>
            Gets a reference to the ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.Id">
            <summary>
            Gets the unique ID of this ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.Version">
            <summary>
            Gets the version of the ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.KeyName">
            <summary>
            Gets the key name of this ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.Names">
            <summary>
            Gets the names for this datasource
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.Descriptions">
            <summary>
            Gets the descriptions for this datasource
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.EnumDefinitions">
            <summary>
            Gets the ontology's enum definitions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.EntityTypes">
            <summary>
            Gets the entity types in the ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.PrimitiveTypes">
            <summary>
            Gets the primitive types in the ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.EntityRelationshipTypes">
            <summary>
            Gets the entity relationship types in the ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.NameRoles">
            <summary>
            Gets the name roles in the ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Ontology.IsObsolete">
            <summary>
            Gets whether the ontology is obsolete (i.e. the data source's
            ontology has been updated since obtaining this object).
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder">
            <summary>
            Holds data for a single entity type
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder.KeyName">
            <summary>
            The key name
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder.Names">
            <summary>
            The localized names
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder.Descriptions">
            <summary>
            The localized descriptions
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder.ParentKeyName">
            <summary>
            The key name of the entity type parent
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder.DefaultNameRoleKeyName">
            <summary>
            The key name of the default name role
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder.IsFromBaseOntology">
            <summary>
            Whether this property comes from a derived ontology
            and is therefore not editable
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Ontology.EntityTypeHolder.EntityProperties">
            <summary>
            The array of properties defined only on this type
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologyReference">
            <summary>
            Acts as a detachable pointer to an ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.#ctor(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.OntologyReference"/> 
            class.
            </summary>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.#ctor(System.Guid,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.OntologyReference"/> 
            class.
            </summary>
            <param name="ontologyId"></param>
            <param name="ontologyVersion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.#ctor">
            <summary>
            Internal constructor, used for creating the reference to a
            brand-new ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.Equals(System.Object)">
            <summary>
            Implement value equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.op_Equality(Microsoft.MapPoint.Data.OntologyReference,Microsoft.MapPoint.Data.OntologyReference)">
            <summary>
            Gets whether two OntologyReference objects are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.op_Inequality(Microsoft.MapPoint.Data.OntologyReference,Microsoft.MapPoint.Data.OntologyReference)">
            <summary>
            Gets whether two OntologyReference objects are unequal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.GetHashCode">
            <summary>
            Implement hash code generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologyReference.ToString">
            <summary>
            Implement user readable string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologyReference.OntologyId">
            <summary>
            Gets/Sets the <see cref="T:System.Guid"/> that is unique to the ontology that is
            being referenced.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologyReference.Version">
            <summary>
            Gets/Sets the version of the ontology that is being referenced.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologySpecification">
            <summary>
            An editable definition for an ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.DerivesFrom(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Returns whether this ontology is derived from the
            specified ontology.
            </summary>
            <param name="ontology">An ontology.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.DerivesFrom(Microsoft.MapPoint.Data.OntologyReference)">
            <summary>
            Returns whether this ontology is derived from the
            specified ontology.
            </summary>
            <param name="ontologyReference">An ontology reference.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.#ctor(Microsoft.MapPoint.Data.Ontology)">
            <summary>
            Constructor for editing an existing ontology.
            </summary>
            <param name="ontology"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.IncrementMajorVersion">
            <summary>
            Increments the major version.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.IncrementMinorVersion">
            <summary>
            Increments the minor version.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.IsValidPropertyValueType(System.Type)">
            <summary>
            Gets whether the specified value type is allowed for property values.
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.GetReferenceName(Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            If the specified entity type is referenced anywhere in the
            ontology, returns the string name of the item that references
            it (first one found, not an exhaustive list). If it's not
            referenced anywhere, returns null.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertValid">
            <summary>
            Scan through the entire ontology, exhaustively and expensively,
            to make sure that it's in a valid state, i.e. doesn't validate
            referential integrity anywhere, etc.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertValidNameRoles">
            <summary>
            Assert that name roles are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertNameRoleReference(Microsoft.MapPoint.Data.NameRoleSpecification)">
            <summary>
            Assert that the specified name role is present.
            </summary>
            <param name="nameRole"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertValidEnumDefinitions">
            <summary>
            Assert that enum definitions are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertEnumDefinitionReference(Microsoft.MapPoint.Data.EnumDefinitionSpecification)">
            <summary>
            Assert that the specified enum definition is present.
            </summary>
            <param name="enumDefinition"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertValidEntityTypes">
            <summary>
            Assert that entity types and properties are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertEntityTypeReference(Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Assert that the specified entity type is present.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertValidPrimitiveTypes">
            <summary>
            Assert that primitive types and properties are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.AssertValidRelationshipTypes">
            <summary>
            Assert that relationship types and properties are in a valid state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.IsValidPropertyValueType(Microsoft.MapPoint.Data.DataSource,System.Type)">
            <summary>
            Gets whether the specified value type is allowed for property values.
            </summary>
            <param name="dataSource"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.ValidatePropertyValueType(System.Type,System.String,System.String)">
            <summary>
            Validates that the specified value type is okay to use for a property.
            </summary>
            <param name="valueType"></param>
            <param name="argumentName"></param>
            <param name="errorMessageToUseIfEnum"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.GetMissingItemException(System.Type,System.String,System.String)">
            <summary>
            Use this method to throw an exception when a problem occurs due
            to the nonexistence of an item with the specified key name.
            </summary>
            <param name="itemType">The item type, e.g. EntityTypeSpecification, NameRoleSpecification, etc.</param>
            <param name="keyName">The key name.</param>
            <param name="argumentName">The name of the key-name argument.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.GetDuplicateItemException(System.Type,System.String,System.String)">
            <summary>
            Use this method to throw an exception when a problem occurs due
            to attempting to add an item with a key name that is the same of
            an item that's already in the ontology.
            </summary>
            <param name="itemType">The item type, e.g. EntityTypeSpecification, NameRoleSpecification, etc.</param>
            <param name="keyName">The key name.</param>
            <param name="argumentName">The name of the key-name argument.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.GetReferenceException(System.Type,System.String,System.String,System.String)">
            <summary>
            Use this method to throw an exception when a problem occurs due
            to not being able to remove an item in the ontology, because some
            other item in the ontology refers to it.
            </summary>
            <param name="itemType">The item type that couldn't be removed, e.g. EntityTypeSpecification, etc.</param>
            <param name="keyName">The key name of the item that was attempted to be removed.</param>
            <param name="referrer">The item that refers to the item we tried to remove.</param>
            <param name="argumentName">The name of the key-name argument.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.GetInheritanceException(System.Type,System.String,System.String)">
            <summary>
            Use this method to throw an exception when a problem occurs due to
            not being able to remove or modify an item in the ontology, because
            it is inherited from the base ontology.
            </summary>
            <param name="itemType">The item type, e.g. EntityTypeSpecification, NameRoleSpecification, etc.</param>
            <param name="keyName">The key name.</param>
            <param name="argumentName">The name of the key-name argument.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.GetObsoleteException(System.Type)">
            <summary>
            Use this method to throw an exception when a caller attempts to use
            a method or property on an item that has expired (i.e. has been
            removed from the OntologySpecification).
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.OntologySpecification.GetReferenceMismatchException(System.Type,System.String,System.String)">
            <summary>
            Use this method to throw an exception when a caller attempts to point
            a reference at an object that has the same key name as another object
            of the same type in the ontology, but which is referentially different.
            (e.g. try to set an entity type's default name role to "Bob", but the
            "Bob" they supply is not the same object as the "Bob" in the ontology)
            </summary>
            <param name="itemType"></param>
            <param name="keyName"></param>
            <param name="argumentName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.Id">
            <summary>
            Gets the unique ID of this ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.Version">
            <summary>
            Gets the version of this ontology specification.
            </summary>
            <remarks>
            Although the property itself is read-only, you can
            modify it by calling IncrementMajorVersion() or
            IncrementMinorVersion().
            </remarks>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.Reference">
            <summary>
            Gets a reference to the ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.InheritanceHierarchy">
            <summary>
            Gets the inheritance hierarchy.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.KeyName">
            <summary>
            Gets or sets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.Names">
            <summary>
            Gets the names for this datasource
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.Descriptions">
            <summary>
            Gets the descriptions for this datasource
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.EnumDefinitions">
            <summary>
            Gets the ontology's enum definitions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.EntityTypes">
            <summary>
            Gets the ontology's entity types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.PrimitiveTypes">
            <summary>
            Gets the ontology's primitive types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.EntityRelationshipTypes">
            <summary>
            Gets the ontology's entity relationship types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.OntologySpecification.NameRoles">
            <summary>
            The collection of name roles for this ontology.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropertyDefinition">
            <summary>
            Definition of a property on a primitive.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.#ctor(System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,System.Type,Microsoft.MapPoint.Data.EnumDefinition,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Data.EntityType,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.PrimitivePropertyDefinition"/> 
            class.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="valueType"></param>
            <param name="enumType"></param>
            <param name="primitiveType"></param>
            <param name="entityType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Data.PrimitivePropertyDefinition)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <param name="newOntologyPrimitiveType"></param>
            <param name="baseOntologyProperty"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.Equals(Microsoft.MapPoint.Data.PrimitivePropertyDefinition)">
            <summary>
            Determines whether the specified object is equal to the current PrimitivePropertyDefinition.
            If the specified object is an PrimitivePropertyDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current PrimitivePropertyDefinition.
            If the specified object is an PrimitivePropertyDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.GetHashCode">
            <summary>Serves as a hash function for PrimitivePropertyDefinition</summary>
            <returns>A hash code for the current PrimitivePropertyDefinition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.Compare(Microsoft.MapPoint.Data.PrimitivePropertyDefinition,Microsoft.MapPoint.Data.PrimitivePropertyDefinition)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldItem"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.PrimitiveType">
            <summary>
            Gets the primitive type of this primitive property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinition.EntityType">
            <summary>
            Gets the entity type of this primitive property.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification">
            <summary>
            The specification for an entity property definition.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification.#ctor(System.String,Microsoft.MapPoint.Data.PrimitiveTypeSpecification,Microsoft.MapPoint.Data.EntityTypeSpecification,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Constructor used for creating a new property of a value type
            </summary>
            <param name="keyName"></param>
            <param name="primitiveType"></param>
            <param name="entityType"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification.#ctor(System.String,Microsoft.MapPoint.Data.PrimitiveTypeSpecification,Microsoft.MapPoint.Data.EntityTypeSpecification,Microsoft.MapPoint.Data.EnumDefinitionSpecification,System.Boolean,System.Boolean)">
            <summary>
            Constructor used to create a property that is an enum type
            </summary>
            <param name="keyName"></param>
            <param name="primitiveType"></param>
            <param name="entityType"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyDefinition,Microsoft.MapPoint.Data.WriteableCollections.EnumDefinitionSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.WriteableCollections.EntityTypeSpecificationWriteableKeyedCollection,Microsoft.MapPoint.Data.PrimitiveTypeSpecification)">
            <summary>
            Constructor to create a specification from an existing primitive property definition
            </summary>
            <param name="definition"></param>
            <param name="enumDefinitions"></param>
            <param name="entityTypes"></param>
            <param name="primitiveType"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification.EntityType">
            <summary>
            Get the EntityType this property is allowed on
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification.DefiningPrimitiveType">
            <summary>
            Get the PrimitiveType this property is defined on
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropertyDefinitionSpecification.Ontology">
            <summary>
            Gets the ontology specification to which this belongs.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveType">
            <summary>
            Contains the definition of a primitive including properties that are 
            associated with that primitive.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.PrimitiveTypeSpecification,Microsoft.MapPoint.Data.EntityTypeKeyedCollection,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Constructor to create a PrimitiveType from a PrimitiveTypeSpecification
            Only called from PrimitiveTypeKeyedCollectionConstructor
            </summary>		
            <param name="ontology"></param>
            <param name="specification"></param>
            <param name="entityTypes"></param>
            <param name="enumDefinitions"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.#ctor(Microsoft.MapPoint.Data.Ontology,System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,System.String,System.Type,System.Boolean,System.Collections.ArrayList)">
            <summary>
            internal constructor, used only by deserialization code.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="entityTypeKeyName"></param>
            <param name="geometryType"></param>
            <param name="isFromBaseOntology"></param>
            <param name="propertiesForType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.#ctor(Microsoft.MapPoint.Data.Ontology,Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Specialized constructor, called only when deriving one ontology from another.
            </summary>
            <param name="newOntology"></param>
            <param name="baseOntologyPrimitiveType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.Equals(Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Determines whether the specified object is equal to the current PrimitiveType.
            If the specified object is an PrimitiveType, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current PrimitiveType.
            If the specified object is an PrimitiveType, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.GetHashCode">
            <summary>Serves as a hash function for PrimitiveType.</summary>
            <returns>A hash code for the current PrimitiveType.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.KeyName">
            <summary>
            Gets the key name that uniquely identifies this type.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.IsFromBaseOntology">
            <summary>
            Returns true if this role was defined on a base ontology
            as is not editable.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.Names">
            <summary>
            Gets the display name, in various locales, for this type.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.Descriptions">
            <summary>
            Gets the description, in various locales, for this type.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.GeometryType">
            <summary>
            Gets the type of which geometry added to this primitive must be.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.EntityType">
            <summary>
            Gets the entity type of which geometry added to this primitive must be.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.Ontology">
            <summary>
            Gets the Ontology of which this PrimitiveType is part.  Note that
            this is not necessarily the same as the one where it was originally
            defined, as that one may have been extended to form a new Ontology.
            </summary>		
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.Properties">
            <summary>
            Gets the collection of property definitions for this type.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveType.IsObsolete">
            <summary>
            Gets whether the object is obsolete (i.e. the data source's
            ontology has been updated since obtaining this object).
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveType.ChangeComparer">
            <summary>
            Compares objects to find out how they've changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.ChangeComparer.GetKeyName(System.Object)">
            <summary>
            Gets the key name of an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.ChangeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns how the one is
            changed from the other.
            </summary>
            <param name="oldObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.ChangeComparer.CompareProperties(Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Returns true if two entity types have the same properties,
            false if not.
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveType.CollectionDifferenceAnalyzer">
            <summary>
            Compares two collections.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.CollectionDifferenceAnalyzer.GetByKeyName(System.Collections.ICollection,System.String)">
            <summary>
            Tries to get an object with the specified key name.
            Returns null if not found.
            </summary>
            <param name="collection"></param>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveType.CollectionDifferenceAnalyzer.ValidateCanModify(Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Validate that an object is allowed to be modified or removed.
            Throw if it can't.
            </summary>
            <param name="dataSource"></param>
            <param name="objectToValidate"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveTypeSpecification">
            <summary>
            Editable specification for an PrimitiveType.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.MakeObsolete">
            <summary>
            MakeObsolete the object. This should be done when it is
            removed from the ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,System.String,Microsoft.MapPoint.Data.EntityTypeSpecification,System.Type)">
            <summary>
            Constructor used when building a new PrimitiveType
            </summary>
            <param name="ontology">The ontology specification to which this belongs.</param>
            <param name="keyName">The key name of the primitive type.</param>
            <param name="entityType">The entity type this primitive type is valid for.</param>
            <param name="geometryType">The type of the geometry for primitives</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Data.EntityTypeSpecification)">
            <summary>
            Construct an PrimitiveTypeSpecification from an existing primitive type.
            </summary>
            <param name="ontology"></param>
            <param name="primitiveType"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,System.String,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,Microsoft.MapPoint.Data.WriteableCollections.CultureInfoToStringWriteableLookup,System.Boolean,Microsoft.MapPoint.Data.EntityTypeSpecification,System.Type)">
            <summary>
            Private constructor.
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="isFromBaseOntology"></param>
            <param name="entityType"></param>
            <param name="geometryType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.ToString">
            <summary>
            Get a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.ValidateIsNotObsolete">
            <summary>
            Validate that the object has not expired due to being
            removed from the ontology.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.KeyName">
            <summary>
            Gets the key name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.Names">
            <summary>
            Gets the localized names of the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.Descriptions">
            <summary>
            Gets the localized descriptions of the entity type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.IsFromBaseOntology">
            <summary>
            Gets whether the entity type is inherited from a base ontology.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.EntityType">
            <summary>
            Gets the entity type that this primitive type is valid for.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.GeometryType">
            <summary>
            Gets/Sets the Geometry type associated with this primitive type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveTypeSpecification.Properties">
            <summary>
            The primitive property definitions
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelationshipPropertyDefinition">
            <summary>
            Defines a property on a relationship type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinition.#ctor(Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification,Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="specification"></param>
            <param name="enumDefinitions"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinition.#ctor(System.String,Microsoft.MapPoint.Data.CultureInfoToStringLookup,Microsoft.MapPoint.Data.CultureInfoToStringLookup,System.Type,Microsoft.MapPoint.Data.EnumDefinition,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor used only by deserialization code.
            </summary>
            <param name="keyName"></param>
            <param name="names"></param>
            <param name="descriptions"></param>
            <param name="valueType"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
            <param name="isFromBaseOntology"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinition.Derive(Microsoft.MapPoint.Data.EnumDefinitionKeyedCollection)">
            <summary>
            Called only when deriving one ontology from another.
            </summary>
            <param name="newOntologyEnumDefinitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinition.Equals(Microsoft.MapPoint.Data.RelationshipPropertyDefinition)">
            <summary>
            Determines whether the specified object is equal to the current RelationshipPropertyDefinition.
            If the specified object is an RelationshipPropertyDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="otherType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current RelationshipPropertyDefinition.
            If the specified object is an RelationshipPropertyDefinition, they are the same if keyname and ontology match.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinition.GetHashCode">
            <summary>Serves as a hash function for RelationshipPropertyDefinition</summary>
            <returns>A hash code for the current RelationshipPropertyDefinition.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification">
            <summary>
            Defines a property on a relationship type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Constructor. This is called from
            RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Create().
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="valueType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,System.String,Microsoft.MapPoint.Data.EnumDefinitionSpecification,System.Boolean,System.Boolean)">
            <summary>
            Constructor. This is called from
            RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection.Create().
            </summary>
            <param name="ontology"></param>
            <param name="keyName"></param>
            <param name="enumType"></param>
            <param name="isMultiValued"></param>
            <param name="isRequired"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification.#ctor(Microsoft.MapPoint.Data.OntologySpecification,Microsoft.MapPoint.Data.RelationshipPropertyDefinition)">
            <summary>
            Constructor. This is called from the constructor of
            RelationshipPropertyDefinitionSpecificationWriteableKeyedCollection
            that takes a read-only collection of RelationshipPropertyDefinitionSpecification
            as input.  That is, it's called when we're building an
            OntologySpecification from an Ontology.
            </summary>
            <param name="ontology"></param>
            <param name="definition"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelationshipPropertyDefinitionSpecification.Ontology">
            <summary>
            Gets the ontology specification to which this belongs.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PhoneNumber">
            <summary>
            The PhoneNumber represents a phone number in MapPoint.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.TrunkBits">
            <summary>
            The number of bits used to represent a trunk code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.CountryBits">
            <summary>
            The number of bits used to represent a country code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.AreaShortBits">
            <summary>
            The number of bits used to represent a short area code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.AreaLongBits">
            <summary>
            The number of bits used to represent a long area code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.ExtensionShortBits">
            <summary>
            The number of bits used to represent a short extension.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.ExtensionLongBits">
            <summary>
            The number of bits used to represent a long extension.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.ExtensionZerosBits">
            <summary>
            The number of bits used to represent leadign zeros in an extension.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.LocalShortBits">
            <summary>
            The number of bits used to represent a short local number.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.LocalLongBits">
            <summary>
            The number of bits used to represent a long local number.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.TrunkMaximum">
            <summary>
            The maximum value for a trunk code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.CountryMaximum">
            <summary>
            The maximum value for a country code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.AreaShortMaximum">
            <summary>
            The maximum value for a short area code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.AreaLongMaximum">
            <summary>
            The maximum value for a long area code.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.ExtensionShortMaximum">
            <summary>
            The maximum value for a short extension.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.ExtensionLongMaximum">
            <summary>
            The maximum value for a long extension.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.ExtensionZerosMaximumCount">
            <summary>
            The maximum number of zeros that may appear before an extension.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.LocalShortMaximum">
            <summary>
            The maximum value for a short local number.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.LocalLongMaximum">
            <summary>
            The maximum value for a long local number.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PhoneNumber.ValueMissing">
            <summary>
            The value passed in and out of parsing functions when a component is not present.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.Parse(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Creates a PhoneNumber object from pre-parsed components.  Pass in ValueMissing to indicate a missing or unneeded component.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extensionNumber"></param>
            <param name="extensionLeadingZeros"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.Parse(System.String)">
            <summary>
            Parses a phone number string and returns a PhoneNumber object
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.CountLeadingZeros(System.String)">
            <summary>
            Returns the number of zeros in the beginning of the string.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.Parse(System.Int64,System.Int32)">
            <summary>
            Takes a compact representation of a phone number and returns a PhoneNumber object.  If only 8 bytes of data is available pass ValueMissing into data4Byte.
            </summary>
            <param name="data8Byte"></param>
            <param name="data4Byte"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.op_Equality(Microsoft.MapPoint.Data.PhoneNumber,Microsoft.MapPoint.Data.PhoneNumber)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.op_Inequality(Microsoft.MapPoint.Data.PhoneNumber,Microsoft.MapPoint.Data.PhoneNumber)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.GetHashCode">
            <summary>
            Returns this object's hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.ToString">
            <summary>
            Convert the object to a string.
            </summary>
            <returns>String representation of the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.ToString(System.IFormatProvider)">
            <summary>
            Convert the object to a string.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.GetComponents(System.Int32@,System.Int32@,System.Int32@,System.Int64@,System.Int32@,System.Int32@)">
            <summary>
            Gets the components of the phone number in numeric form. A component
            that is not present in the number is represented by a value of ValueMissing.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extension"></param>
            <param name="extensionLeadingZeros"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.GetCompactForm(System.Int64@,System.Int32@)">
            <summary>
            Returns the compact representation of this phone number.  If only 8 bytes are needed to represent, data4Byte will return ValueMissing.
            </summary>
            <param name="data8Byte"></param>
            <param name="data4Byte"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber.FormatNumber(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Takes integer components and returns a formatted string.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extension"></param>
            <param name="extensionLeadingZeros"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PhoneNumber.DialingNumber">
            <summary>
            The number to use when needing a value to be dialed.  It excludes the extension if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PhoneNumber.DisplayNumber">
            <summary>
            The full number to use when displaying the number.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PhoneNumber.TrunkCode">
            <summary>
            The trunk code component.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PhoneNumber.CountryCode">
            <summary>
            The country code component.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PhoneNumber.AreaCode">
            <summary>
            The area code component.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PhoneNumber.LocalNumber">
            <summary>
            The local number component.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PhoneNumber.Extension">
            <summary>
            The extension component.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PhoneNumber8Byte">
            <summary>
            An implementation of PhoneNumber that uses 8 bytes of storage.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.#ctor(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Constructor that accepts parsed but not compact data.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extension"></param>
            <param name="extensionZeros"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.IsValid(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Checks that the supplied values will work with a 8 byte number.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.#ctor(System.Int64)">
            <summary>
            Constructor that accepts a number in already-compact form.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.GetCompactForm(System.Int64@,System.Int32@)">
            <summary>
            Returns the compact representation of this phone number.  If only 8 bytes are needed to represent, data4Byte will return ValueMissing.
            </summary>
            <param name="data8Byte"></param>
            <param name="data4Byte"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.GetComponents(System.Int32@,System.Int32@,System.Int32@,System.Int64@,System.Int32@,System.Int32@)">
            <summary>
            Pull all the components out of the compacted state.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extension"></param>
            <param name="extensionLeadingZeros"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.Equals(Microsoft.MapPoint.Data.PhoneNumber8Byte)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber8Byte.GetHashCode">
            <summary>
            Get a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PhoneNumber12Byte">
            <summary>
            An implementation of PhoneNumber that uses 12 bytes of storage.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.#ctor(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extension"></param>
            <param name="extensionZeros"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.IsValid(System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Checks that the supplied values will work with a 8 byte number.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.#ctor(System.Int64,System.Int32)">
            <summary>
            Constructor that accepts a number in already-compact form.
            </summary>
            <param name="data8Byte"></param>
            <param name="data4Byte"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.GetCompactForm(System.Int64@,System.Int32@)">
            <summary>
            Returns the compact representation of this phone number.  If only 8 bytes are needed to represent, data4Byte will return ValueMissing.
            </summary>
            <param name="data8Byte"></param>
            <param name="data4Byte"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.GetComponents(System.Int32@,System.Int32@,System.Int32@,System.Int64@,System.Int32@,System.Int32@)">
            <summary>
            Pull all the components out of the compacted state.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extension"></param>
            <param name="extensionLeadingZeros"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.Equals(Microsoft.MapPoint.Data.PhoneNumber12Byte)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumber12Byte.GetHashCode">
            <summary>
            Get a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PhoneNumberString">
            <summary>
            An implementation of PhoneNumber that uses a string for storage.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumberString.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumberString.GetCompactForm(System.Int64@,System.Int32@)">
            <summary>
            Returns the compact representation of this phone number.  Returns ValueMissing for string representation.
            </summary>
            <param name="data8Byte"></param>
            <param name="data4Byte"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumberString.GetComponents(System.Int32@,System.Int32@,System.Int32@,System.Int64@,System.Int32@,System.Int32@)">
            <summary>
            Pull all the components out of the compacted state.  Returns ValueMissing for string representation.
            </summary>
            <param name="trunkCode"></param>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="localNumber"></param>
            <param name="extension"></param>
            <param name="extensionLeadingZeros"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumberString.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumberString.Equals(Microsoft.MapPoint.Data.PhoneNumberString)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumberString.GetHashCode">
            <summary>
            Get a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PhoneNumberString.GetDisplay(Microsoft.MapPoint.Data.PhoneNumber)">
            <summary>
            Returns the string representation of the phone number.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PocketPcCache">
            <summary>
            The Pocket PC implementation of the cache.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PocketPcCache.MinimumEntryCount">
            <summary>
            The cache will always leave this many entries in it.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.InternalGetEntryLookup(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Gets the internal hashtable used for looking up entries.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.Clear">
            <summary>
            Clears entire contents, for all dataSources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.TryGetValue(Microsoft.MapPoint.Data.DataSource,System.Object,Microsoft.MapPoint.Data.CacheObject@,System.Boolean)">
            <summary>
            Trys to get a value out of the cache, returning false if it cannot.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
            <param name="item"></param>
            <param name="willRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.PruneCache(System.Int64)">
            <summary>
            Removes entries until the cache fits within the specified size.
            </summary>
            <param name="requiredSpace">The number of bytes you'd like free in the cache.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.Put(Microsoft.MapPoint.Data.DataSource,System.Object,Microsoft.MapPoint.Data.CacheObject)">
            <summary>
            Put an item into the cache, with a particular key and priority.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.Delete(Microsoft.MapPoint.Data.DataSource,System.Object)">
            <summary>
            Delete an item from the cache, with a particular key.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.UpdateSize(Microsoft.MapPoint.Data.DataSource,System.Object,System.Int64)">
            <summary>
            Updates the size of the item in the cache corresponding to a particular key.
            </summary>
            <param name="dataSource"></param>
            <param name="key"></param>
            <param name="newSize"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.ClearDataSource(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Clear all contents for a particular dataSource.
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.GetObjectsOfType(Microsoft.MapPoint.Data.DataSource,System.Type)">
            <summary>
            Gets all entries of a specified type.
            </summary>
            <param name="dataSource"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.DeleteObjectsOfType(Microsoft.MapPoint.Data.DataSource,System.Type)">
            <summary>
            Deletes all of the entries of a specified type.
            </summary>
            <param name="dataSource"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.GetWorkingSize">
            <summary>
            Gets the max working size.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.SetWorkingSize(System.Int64)">
            <summary>
            Sets the working size to the specified number of bytes.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.RemoveEntry(Microsoft.MapPoint.Data.CacheEntry)">
            <summary>
            Removes an entry from the cache.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.DisconnectEntry(Microsoft.MapPoint.Data.CacheEntry)">
            <summary>
            Disconnects a single entry from the linked list of entries.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.AttachEntryToHead(Microsoft.MapPoint.Data.CacheEntry)">
            <summary>
            Attaches an entry to the head of the linked list.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PocketPcCache.GetEnumerator">
            <summary>
            Enumerates through the entries for debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PocketPcCache.InternalHead">
            <summary>
            Gets the head of the linked list of entries.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PocketPcCache.InternalTail">
            <summary>
            Gets the tail of the linked list of entries.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PocketPcCache.LocalCacheWaitItemPool">
            <summary>
            Simple pool class
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair">
            <summary>
            Holder class for pair of primitive Id and specification
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair.#ctor(Microsoft.MapPoint.Data.PrimitiveId,Microsoft.MapPoint.Data.PrimitiveSpecification)">
            <summary>
            Public constructor
            </summary>
            <param name="id"></param>
            <param name="specification"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair.PrimitiveId">
            <summary>
            PrimitiveId
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair.PrimitiveSpecification">
            <summary>
            PrimitiveSpecification
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveIdMappingKey">
            <remarks>
            The PrimitiveIdMapping class maps a PrimitiveId/Primitive/Edge to one of these lightweight structs.
            Beware of struct's default constructors which initialize numeric values to zero (zero is a valid id
            in the RNDS world).  Always use the constructor override which takes a key parameter.  Pass 
            PrimitiveIdMappingKey.Invalid to create a mapping to an invalid key.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.#ctor(System.Int64)">
            <summary>
            Creates a new PrimitiveIdMappingKey. In general, only the PrimitiveIdMapping class should make these
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.CompareTo(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Efficiently compares 2 Keys.
            </summary>
            <param name="other"></param>
            <returns>returns 1 if this key is 'greater' than compareKey, -1 if it less,
            and 0 if they are equal</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.Equals(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Efficiently determines equality of 2 Keys
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.op_Equality(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Overloads == to give same result as Equals()
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.op_Inequality(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            Overloads != to be consistent with Equals()
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.GetHashCode">
            <summary>
            Overrides Object.GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.Equals(System.Object)">
            <summary>
            Override of Object.Equals for completeness
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.MaxKeyValue">
            <summary>key value to denote "THE" invalid key.  Valid keys must have lower values.
            Using 0x0000ffffffffffff to reserve the two highest bytes for other purposes</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.Invalid">
            <summary>The Invalid PrimitiveMappingKey.  Its value is MaxKeyValue</summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdMappingKey.Value">
            <summary>
            Gets the contained value
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveSource">
            <summary>
            Summary description for PrimitiveSource.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSource.#ctor">
            <summary>
            Cstor.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveSpecification">
            <summary>
            This class describes all the user settable data on an entity
            This is the primary method used to modify entity data
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.#ctor(Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Data.PrimitiveSpecification"/> class.
            </summary>
            <param name="primitiveType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Public constructor
            </summary>
            <param name="entity"></param>
            <param name="primitiveType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Public constructor
            </summary>
            <param name="entity"></param>
            <param name="primitiveType"></param>
            <param name="geometry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.#ctor(Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Public constructor
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType,Microsoft.MapPoint.Data.WriteableCollections.PrimitivePropertyValueWriteableKeyedCollection,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            private constructor
            </summary>
            <param name="entity"></param>
            <param name="primitiveType"></param>
            <param name="properties"></param>
            <param name="geometry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.CreateWithoutProperties(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.PrimitiveType)">
            <summary>
            Creates a specification with no properties
            </summary>
            <param name="entity"></param>
            <param name="primitiveType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.ValidateEntity(Microsoft.MapPoint.Data.Entity,System.String)">
            <summary>
            Validates that the entity is valid for this primitive type
            throws if it is not
            </summary>
            <param name="entity"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.ValidateGeometry(Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Ensures thate the geometry is valid for this primitive type
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpecification.ShallowClone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveSpecification.PrimitiveType">
            <summary>
            Primitive type reference
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveSpecification.Entity">
            <summary>
            Entity
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveSpecification.Properties">
            <summary>
            Property collection
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveSpecification.Geometry">
            <summary>
            Gets/sets the geometry for the primitive
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException">
            <summary>
            Exception class that is thrown when calling an EndQueryXxx() method
            when the asynchronous operation has been aborted.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryAbortedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryAbortedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryAbortedException.#ctor(System.Exception)">
            <summary>
            Constructor that simply wraps an internal error using a generic message.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryAbortedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.AsyncQueryAbortedException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryAbortedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements GetObjectData.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AsyncQueryResult">
            <summary>
            IAsyncResult implementation used by the Query API for asynchronous
            query methods.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.IAbortableAsyncResult">
            <summary>
            The result of an asynchronous call that can be aborted before completion.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.IAbortableAsyncResult.Abort">
            <summary>
            Cancel an asynchronous operation already in progress.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryResult.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="asyncState">An object to maintain asynchronous state; will be returned by the AsyncState property.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryResult.SetResults(System.Object,System.Exception)">
            <summary>
            Fill the results of the asynchronous query.  At this point the main 
            processing of the query is complete.  However, the queryresult is not 
            marked complete yet (not until the async callback is called).
            </summary>
            <param name="queryResultNew"></param>
            <param name="errorNew"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryResult.MarkCompleted">
            <summary>
            Mark the asynchronous request as being totally completed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.AsyncQueryResult.Abort">
            <summary>
            Cancel an asynchronous operation already in progress.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.AsyncProcessingThread">
            <summary>
            The thread used to do the synchronous processing.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Data.AsyncQueryResult.Aborted">
            <summary>
            Fires when the asynchronous call is aborted.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.WasAborted">
            <summary>
            Gets whether the asynchronous method was aborted.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.QueryResult">
            <summary>
            Gets the query result associated with the object.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.Error">
            <summary>
            Gets the error that occurred, if any.
            Will be null if no error occurred.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.IsSetResultsDone">
            <summary>
            Returns true if the SetResults has finished doing its work.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.IsSetResultsDoneWaitHandle">
            <summary>
            Use this handle to wait for the situation where SetResults has done its work.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.CompletedSynchronously">
            <summary>
            IAsyncResult implementation.  Always returns false.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.IsCompleted">
            <summary>
            IAsyncResult implementation.  Gets whether the asynchronous
            call has completed.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.AsyncWaitHandle">
            <summary>
            IAsyncResult implementation.  Gets a WaitHandle that the caller can
            use to wait for the async call to complete.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.AsyncQueryResult.AsyncState">
            <summary>
            IAsyncResult implementation.  Gets the object that was passed into
            the start of the asynchronous call.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.AsyncQueryResult.AbortedEventHandler">
            <summary>
            Delegate fgor handling Aborted events.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextTypeFilter">
            <summary>
            Represents a filter used to restrict the results of an entity name query to all entities,
            contexts entities or available contexts for a given child entity type filter.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ContextTypeFilter.AllEntities">
            <summary>
            A filter that allows all entities in the results.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ContextTypeFilter.ContextEntities">
            <summary>
            A filter that allows only context entities in the results.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextTypeFilter.#ctor(Microsoft.MapPoint.Data.ContextTypeFilterMode)">
            <summary>
            A ctor that defines mode only.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextTypeFilter.#ctor(Microsoft.MapPoint.Data.EntityTypeFilter)">
            <summary>
            A ctor only used for available context.
            </summary>
            <param name="childEntityTypeFilter"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextTypeFilter.AvailableContexts(Microsoft.MapPoint.Data.EntityTypeFilter)">
            <summary>
            Creates a ContextTypeFilter where the returned contexts will have entities that match
            the child EntityTypeFilter.
            </summary>
            <param name="childEntityTypeFilter"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextTypeFilter.Mode">
            <summary>
            The type or mode of this filter.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextTypeFilter.ChildTypeFilter">
            <summary>
            The Child EntityTypeFilter for this ContextTypeFilter.  Will be null
            for AllEntities or ContextEntities instances.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextTypeFilterMode">
            <summary>
            The possible modes of ContextTypeFilters.  
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ContextTypeFilterMode.AllEntities">
            <summary>
            A filter that allows all entities in the results.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ContextTypeFilterMode.ContextEntities">
            <summary>
            A filter that allows only context entities in the results.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ContextTypeFilterMode.AvailableContexts">
            <summary>
            A filter that allows only context entities in the results that have
            child entities that match the child entity type filter.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EdgeSpatialQuery">
            <summary>
            A spatial query for edges.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SpatialQuery">
            <summary>
            A spatial query.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MaxResultsQuery">
            <summary>
            A query that can specify a maximum number of results.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.MaxResultsQuery.NoLimit">
            <summary>
            Specifying this number of maximum results places no
            limit on the number of results returned.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MaxResultsQuery.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="maximumResults"></param>
            <param name="bestMatch"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MaxResultsQuery.MaximumResults">
            <summary>
            Gets or sets the maximum number of results to return from the query.
            Default is no limit.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MaxResultsQuery.BestMatch">
            <summary>
            Gets whether the returned results will be the best ones available
            (if true), or simply the first ones found (if false, the default).
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">The spatial filter for the query.</param>
            <param name="entityTypeFilter">The entity type filter for the query. May be null.</param>
            <param name="entityPropertyFilter">Property expression to limit the search. May be null.</param>
            <param name="maximumResults">The maximum number of results to return from the query.  The default is no limit.</param>
            <param name="bestMatch">Whether the returned results will be the best ones available(if true), or simply the first ones found (if false, the default).</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialQuery.Ontology">
            <summary>
            Gets the ontology that this query must be used with, if any.
            May be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialQuery.SpatialFilter">
            <summary>
            Gets the spatial filter for the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialQuery.EntityTypeFilter">
            <summary>
            Gets the filter for entity types.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialQuery.EntityPropertyFilter">
            <summary>
            Gets the entity property expression used to filter results.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeSpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter. May be null.</param>
            <param name="maximumResults">The maximum number of results to return from the query.  The default is no limit.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EdgeSpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter. May be null.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropertyObject">
            <summary>An enum that specifies a reference primitive property</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.PropNil">
            <summary>Default uninitialized state placeholder (no type)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.Approx2DPosOfFromNode">
            <summary>The Approximate 2D position of the "from" node of the edge as a Coordinate2D</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.Approx2DPosOfToNode">
            <summary>The Approximate 2D position of the "to" node of the edge as a Coordinate2D</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.Approx3DPosOfFromNode">
            <summary>The Approximate 3D position of the "from" node of the edge as a Coordinate3D</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.Approx3DPosOfToNode">
            <summary>The Approximate 3D position of the "to" node of the edge as a Coordinate3D</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.FromNodeEdges">
            <summary>
            An array containing the PrimitiveIds for all edges that are attached to the "from" node of the edge primitive
            (EdgeCollection as System.Object)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.FromNodePrimitiveId">
            <summary>
            Gets the PrimitiveId of the "from" node of the edge (Always null for BlockDataSource and RNDS).
            Transit uses this with XmlDataSource and MemoryNode (thats why we need to have this here).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.ToNodePrimitiveId">
            <summary>
            Gets the PrimitiveId of the "to" node of the edge (Always null for BlockDataSource and RNDS).
            Transit uses this with XmlDataSource and MemoryNode (thats why we need to have this here).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.ToNodeEdges">
            <summary>
            An array containing the PrimitiveIds for all edges that are attached to the "to" node of the edge primitive
            (EdgeCollection as System.Object)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.PolyValentTurnRestrictions">
            <summary>Gets an array of PolyValentTR objects that specify the polyvalent turn restrictions that involve this edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.SimpleTurnRestrictions">
            <summary>Gets an array of TurnRestriction objects that specify the simple turn restrictions that involve this edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.TransitLineId">
            <summary>The TransitLineId of the edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.UnderlyingEdges">
            <summary>Get an array of all the underlying directed real edges for a shortcut, otherwise returns null</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.FirstRealEdge">
            <summary>
            The first real edge in the underlying edges for a shortcut.
            Should return null if called on a real edge.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.LastRealEdge">
            <summary>
            The last real edge in the underlying edges for a shortcut.
            Should return null if called on a real edge.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.FromNode">
            <summary>The "from" node of the edge primitive (Microsoft.MapPoint.Data.Topology.Node as System.Object)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.ToNode">
            <summary>The "to" node of the edge primitive (Microsoft.MapPoint.Data.Topology.Node as System.Object)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyObject.GetDetailEdge">
            <summary>The Primitive for the edge</summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropertyValue">
            <summary>An enum that specifies a value primitive property</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.PropNil">
            <summary>Default uninitialized state placeholder (no type)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.ApproximateFromAzimuth">
            <summary>Angle from Azimuth for edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.ApproximateToAzimuth">
            <summary>Angle to Azimuth for edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.BwdReachValueQuickest">
            <summary>The time REACH value for an Edge Primitive when traversed from the "to" node to the "from" node of the edge (int)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.BwdReachValueShortest">
            <summary>The distance REACH value for an Edge Primitive when traversed from the "to" node to the "from" node of the edge (int)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.Color">
            <summary>Edge color. Used to quickly determine which edge is the continuation of which edge at an intersection</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.DistanceCost">
            <summary>The cost to traverse an Edge Primitive in meters * FixedPointMultiplier. (int)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.DividerType">
            <summary>The DividerType enum (byte) value that specifies the kind of divider</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.FromNodeValence">
            <summary>A quick check of the valence of the from node</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.FromToAllowed">
            <summary>Can this edge be traversed from its "from" node to its "to" node</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.FwdReachValueQuickest">
            <summary>The time REACH value for an Edge Primitive when traversed from the "from" node to the "to" node of the edge (int)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.FwdReachValueShortest">
            <summary>The distance REACH value for an Edge Primitive when traversed from the "from" node to the "to" node of the edge (int)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.HasTMCCode">
            <summary>Does the edge have a TMC Code</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsAutoAllowed">
            <summary>Can this edge be used by automobiles</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsEndEdge">
            <summary>A bool value indicating whether this edge is an end edge for a simple/polyvalent turn restriction</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsFerry">
            <summary>A bool value indicating if this is a Ferry edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsPaved">
            <summary>Is this edge a paved road</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsPrivate">
            <summary>Is this edge a private road, not open to through traffic</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsRightHandDriving">
            <summary>Is this edge a right hand driving edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsRoundabout">
            <summary>Is this edge for a roundabout</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsSeasonalClosure">
            <summary>Is this edge closed during some season (specific time of year)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsStartEdge">
            <summary>A bool value indicating whether this edge is a start edge for a simple/polyvalent turn restriction</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsToll">
            <summary>Is this an edge that requires a toll to be paid when traversing it</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsTransit">
            <summary>Is this edge a transit only edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsUTurnLegal">
            <summary>Are U-Turns allowed on this edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.IsViaEdge">
            <summary>A bool value indicating whether this edge is a via edge for a polyvalent turn restriction</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.Length">
            <summary>The Length property of an Edge Primitive in meters (float)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.ReachFixedPointMultiplier">
            <summary>This is the FixedPointMultiplier used when calculating REACH values</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.RoadClassification">
            <summary>The RoadClassificationType enum (byte) value that specifies the road class</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.RoutingHierarchy">
            <summary>The RoutingHierarchy of the edge</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.SpeedRealTimeFromTo">
            <summary>The Real Time or ClearFlow speed for this edge in km/hr (byte.  255 = null)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.SpeedRealTimeToFrom">
            <summary>The Real Time or ClearFlow speed for this edge in km/hr (byte.  255 = null)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.Speed">
            <summary>The static speed property of an Edge in km/hr (byte)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.TimeCost">
            <summary>The cost to traverse an Edge Primitive in seconds * FixedPointMultiplier. (int)</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.ToFromAllowed">
            <summary>Can this edge be traversed from its "to" node to its "from" node</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.ToNodeValence">
            <summary>A quick check of the valence of the to node</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.FirstRealEdgeForwards">
            <summary>
            The traversal direction for the first real edge in the underlying edges for a shortcut.
            FromTo => forwards, ToFrom => backwards.
            Should return PrimitivePropByValue.errProp if called on a real edge.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropertyValue.LastRealEdgeForwards">
            The traversal direction for the last real edge in the underlying edges for a shortcut.
            FromTo => forwards, ToFrom => backwards.
            Should return PrimitivePropByValue.errProp if called on a real edge.
        </member>
        <member name="T:Microsoft.MapPoint.Data.PolyValentTR">
            <summary>
            A struct that describes a polyvalent turn restriction
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.ID_MASK">
            <summary>
            A mask that can be applied to the compressed int storage to get the unique Id for the restriction
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.ACTION_MASK">
            <summary>
            A mask that can be applied to the compressed int storage to get the action performed on the restriction
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.DRIVING_ONLY_MASK">
            <summary>
            A mask that can be applied to the compressed int storage to find out if the restriction is for driving only (as opposed to for walking also)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.BACKWARDS_DIRECTION_MASK">
            <summary>
            A mask that can be applied to the compressed int storage to find out if the restriction is for which direction of edge traversal
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.trDescriptor">
            <summary>
            Compact integer storage that has all the info about the turn restriction that the routing engine needs
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PolyValentTR.#ctor(System.Boolean,System.Boolean,System.Int32,Microsoft.MapPoint.Data.PolyValentTR.TRAction)">
            <summary>
            Constructor of a TRInfo (Turn Restriction Info) object that takes all the attributes to be stored 
            and compresses the information about the turn restriction that the routing engine needs in an int.
            </summary>
            <param name="edgeForwards"></param>
            <param name="forDrivingOnly"></param>
            <param name="Id"></param>
            <param name="action"></param>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.PolyValentTRComparerObj">
            <summary>
            An object that implements IComparer on PolyValentTR so that we can compare
            and sort PolyValentTRs
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.PolyValentTRComparerByIdObj">
            <summary>
            An object that implements IComparer on PolyValentTR but compares only the restriction Id
            property to figure out if they refer to the same PVTR
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PolyValentTR.EdgeForwards">
            <summary>
            Does this action happen on the restriction when the edge is traversed in the forwards direction
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PolyValentTR.IsForDrivingOnly">
            <summary>
            Is this turn restriction applicable only for driving directions
            (as opposed to for walking directions also)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PolyValentTR.Id">
            <summary>
            An id value that uniquely identifies this turn restriction
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PolyValentTR.Action">
            <summary>
            The action that the edge performs on this turn restriction
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PolyValentTR.TRAction">
            <summary>
            An enum that specifies if the Turn Restriction is Initiated, Propagated or Terminated by this directed edge
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.TRAction.Initiated">
            <summary>
            The directed edge is a start edge that starts this turn restriction
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.TRAction.Propagated">
            <summary>
            The directed edge is a via edge that propagates this turn restriction
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PolyValentTR.TRAction.Terminated">
            <summary>
            The directed edge is an end edge that terminates this turn restriction
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropByValue">
            <summary>
            A value type for storing the result that can contain different types of primitive properties.
            It is used to store value type properties of size up to 4 bytes (larger value types are boxed
            and returned by ref using struct PrimitivePropByRef, instead of PrimitivePropByValue).
            It is effectively being used as a union and in the DEBUG build, it has some checks for type
            validation on use.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropByValue.errProp">
            <summary>
            A PrimitivePropByValue value representing an error condition
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropByValue.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyValue)">
            <summary>
            Constructor to create an error prop
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropByValue.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyValue,System.Byte)">
            <summary>
            Constructor (overloaded)
            </summary>
            <param name="prop"></param>
            <param name="b"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropByValue.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyValue,System.Boolean)">
            <summary>
            Constructor (overloaded)
            </summary>
            <param name="prop"></param>
            <param name="b"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropByValue.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyValue,System.Int32)">
            <summary>
            Constructor (overloaded)
            </summary>
            <param name="prop"></param>
            <param name="i"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropByValue.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyValue,System.Single)">
            <summary>
            Constructor (overloaded)
            </summary>
            <param name="prop"></param>
            <param name="f"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropByValue.byte_val">
            <summary>
            Get the value of this primitive property as a byte
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropByValue.bool_val">
            <summary>
            Get the value of this primitive property as a bool
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropByValue.int_val">
            <summary>
            Get the value of this primitive property as an int
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropByValue.float_val">
            <summary>
            Get the value of this primitive property as a float
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropByRef">
            <summary>
            A value type for storing the result that can contain different types of primitive properties.
            It is used to store reference type properties, as well as large value types of size greater
            than 4 bytes (small value types are returned by value using struct PrimitivePropByValue, 
            instead of PrimitivePropByRef).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitivePropByRef.errProp">
            <summary>
            A PrimitivePropByRef value representing an error condition
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropByRef.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyObject)">
            <summary>
            Constructor to create an error prop
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropByRef.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyObject,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="prop"></param>
            <param name="o"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitivePropByRef.Object_val">
            <summary>
            Get the value of this primitive property as a System.Object
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.MatchedEntityName">
            <summary>
            An entity and one of its names.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityName.#ctor(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.AbstractName)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The matching entity.</param>
            <param name="name">The name on the entity that matched.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityName.#ctor(Microsoft.MapPoint.Data.AbstractName,Microsoft.MapPoint.Data.Entity)">
            <summary>
            Constructor.  Internal, skips validation.
            </summary>
            <param name="name">The name on the entity that matched.</param>
            <param name="entity">The matching entity.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityName.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityName.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.MatchedEntityName.GetHashCode">
            <summary>
            Returns a hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MatchedEntityName.MatchingName">
            <summary>
            Gets the name found.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.MatchedEntityName.Entity">
            <summary>
            Gets the entity found.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PointProximityQueryRegion">
            <summary>
            A spatial region buffered by a specified radius.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.GeometryQueryRegion">
            <summary>
            A spatial region represented by a geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.QueryRegion">
            <summary>
            Represents a spatial region, as used by a SpatialFilter.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.QueryRegion.ResolveQueryRegionTo2D(Microsoft.MapPoint.Data.QueryRegion)">
            <summary>
            There are both Geometry2 and Geometry2D query region types.  The 2 ones
            use fixed point, the 2D ones use floating.  Some functions can only deal with
            fixed point, so this function converts the given region to 2D.
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.GeometryQueryRegion.#ctor(Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The geometry to which the region applies.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.GeometryQueryRegion.Geometry">
            <summary>
            Gets the geometry to which the region applies.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PointProximityQueryRegion.#ctor(Microsoft.MapPoint.Geometry.Geometry2D.Point2D,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="point">The center point of the search region.</param>
            <param name="radius">The radius (in meters) around the center point to search.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PointProximityQueryRegion.Radius">
            <summary>
            Gets the radius (in meters) around the center point to be included in the search.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PointProximityQueryRegion.Point">
            <summary>
            Gets the center point of this search region
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.OntologyChangedEventHandler">
            <summary>
            Delegate for the OntologyUpdate event.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityState">
            <summary>
            Defines the states in which an entity can exist.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityState.Valid">
            <summary>
            Entity is valid for use.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityState.Obsolete">
            <summary>
            Entity has been replaced by another entity instance and is no longer valid.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityState.Disconnected">
            <summary>
            Entity is part of a grid that has been thrown out of the cache.  It may
            or may not be valid.  Field by field equality is the only way to determine.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Entity">
            <summary>
            Encapsulates a single geographical entity.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Entity.IsPersistent">
            <summary>
            Gets or sets whether this entity is persistent or not.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Entity.Type">
            <summary>
            Gets or sets the type of this entity.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.#ctor(System.Boolean,Microsoft.MapPoint.Data.EntitySpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.Entity"/> class.
            </summary>
            <param name="isPersistent"></param>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.#ctor(Microsoft.MapPoint.Data.EntityId,System.Boolean,Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.AbstractNameCollection,Microsoft.MapPoint.Data.EntityPropertyValueKeyedCollection,Microsoft.MapPoint.Data.EntityRelationshipCollection)">
            <summary>
            Internal constructor used by deserialization
            </summary>
            <param name="id"></param>
            <param name="isPersistent"></param>
            <param name="entityType"></param>
            <param name="names"></param>
            <param name="properties"></param>
            <param name="relationships"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.GetDefaultNames">
            <summary>
            Gets the default names of this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.ValidateIsNotObsolete">
            <summary>
            Validates that the object is not obsolete. If it is, throws
            an exception.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.Invalidate">
            <summary>
            Sets the state of this entity to Obsolete.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.Disconnect">
            <summary>
            Sets the state of this entity to Disconnected.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.Equals(Microsoft.MapPoint.Data.Entity)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="other">Object to compare to this one.</param>
            <returns>True if the object equals this one.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.ToString">
            <summary>
            Gets a string representation for an entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.ToString(System.IFormatProvider)">
            <summary>
            Get a string representation of the object.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj">Object to compare to this one.</param>
            <returns>True if the object equals this one.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.op_Equality(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.Entity)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.op_Inequality(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.Entity)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.GetHashCode">
            <summary>Serves as a hash function for Entity.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.SetEntityId(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Set the entity id.  We need to make this internal so that only an Entity Authority
            can set it.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.SetNames(Microsoft.MapPoint.Data.AbstractNameCollection)">
            <summary>
            Allows the internal setting of the names collection directly.
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.SetPropertyValues(System.Object[])">
            <summary>
            Sets all of the properties in this object.
            </summary>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.SetRelationships(Microsoft.MapPoint.Data.EntityRelationshipCollection)">
            <summary>
            Sets the relationships.
            </summary>
            <param name="relationships"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.GetMapExtent">
            <summary>
            Return the geometry for this Entity by retrieving Geometry for each 
            primitive for the entity and then calculating the overall bounding geometry.        
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Entity.GetPropertySize(Microsoft.MapPoint.Data.PropertyDefinition,System.Object)">
            <summary>
            Given a property definition and value, determines how much managed memory this value consumes.
            </summary>
            <param name="def"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.Id">
            <summary>
            Gets the ID of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.State">
            <summary>
            Gets the state of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.Relationships">
            <summary>
            Gets the relationships that apply to this entity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.Properties">
            <summary>
            Gets the properties of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.DataSource">
            <summary>
            Gets the Data Source of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.Names">
            <summary>
            Gets the names of this entity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.ResultMask">
            <summary>
            Gets the result mask with which this entity was built.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Entity.IsObsolete">
            <summary>
            Gets whether the object is obsolete.  This will occur if the
            supporting ontology of this entity has changed or if it
            has been replaced by a newer entity. 
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextFilter">
            <summary>
            Specifies the find contexts within which to search when doing
            a name-based entity query.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.#ctor(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Constructor.
            </summary>
            <param name="contextId">The context ID in which to search.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.#ctor(Microsoft.MapPoint.Data.EntityId,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="contextId">The context ID in which to search.</param>
            <param name="goUp">Whether to search up the context hierarchy.</param>
            <param name="goDown">Whether to search down the context hierarchy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor.
            </summary>
            <param name="entries">Collection of ContextFilterEntry or ContextId objects.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.GetStorageGroupContexts(Microsoft.MapPoint.Data.ContextFilter,Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.StorageGroupCollection)">
            <summary>
            Enumerate all storageGroup-context combinations to search.
            </summary>
            <param name="filter">The context filter to use for the search. May be null.</param>
            <param name="dataSource">The data source containing search contexts.</param>
            <param name="storageGroups">The storageGroup in which to search.</param>
            <returns>Enumeration of StorageGroupContexts to search, in the order they should be searched.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.GetContextIds(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.StorageGroupCollection,Microsoft.MapPoint.Data.ContextFilterEntry[])">
            <summary>
            Enumerate all find contexts to search.
            </summary>
            <param name="dataSource"></param>
            <param name="storageGroups"></param>
            <param name="entries"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.GetEntries(System.Collections.ICollection)">
            <summary>
            Convert a collection of ContextFilterEntry-or-EntityId's into a
            collection of ContextFilterEntry objects.
            </summary>
            <param name="entries"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.GetRootContext(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Gets the root find context for the data source. Throws
            if not present.
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextFilter.Entries">
            <summary>
            Gets the collection of ContextFilter.ContextFilterEntry objects in the filter.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextFilter.ReadOnlyEntriesWrapper">
            <summary>
            Read-only wrapper for an array of entries.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ReadOnlyEntriesWrapper.#ctor(Microsoft.MapPoint.Data.ContextFilterEntry[])">
            <summary>
            Constructor.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser">
            <summary>
            Utility class for traversing contexts.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.#ctor(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.StorageGroupCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="dataSource"></param>
            <param name="storageGroups"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.Traverse(Microsoft.MapPoint.Data.ContextFilterEntry)">
            <summary>
            Traverse the specified entry.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.TraverseDown(Microsoft.MapPoint.Data.StorageGroup[],Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Traverse the context hierarchy downwards from the specified context.
            The context has already been marked as used, but not marked as having
            traversed down.
            </summary>
            <param name="storageGroupsToUse"></param>
            <param name="contextId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.GetParent(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.StorageGroupCollection)">
            <summary>
            Gets the parent context. Returns EntityId.Invalid if
            no relationship could be found for the context on any
            storageGroup.
            </summary>
            <param name="contextId"></param>
            <param name="storageGroupsToUse"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.ContextStorageGroupAccumulator">
            <summary>
            Organizes contexts and storageGroups for context hierarchy
            traversal purposes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.ContextStorageGroupAccumulator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.ContextStorageGroupAccumulator.Add(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Add a context-storageGroup combination to the accumulator.
            </summary>
            <param name="contextId"></param>
            <param name="storageGroup"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.ContextStorageGroupSet">
            <summary>
            A set of storageGroups corresponding to a context ID.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilter.ContextTraverser.ContextStorageGroupSet.#ctor(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Constructor.
            </summary>
            <param name="contextId"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextFilterEntry">
            <summary>
            Specifies a context in which to search, and whether to search
            up and/or down the context hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.#ctor(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Constructor.
            </summary>
            <param name="contextId">The context ID in which to search.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.#ctor(Microsoft.MapPoint.Data.EntityId,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="contextId">The context ID in which to search.</param>
            <param name="goUp">Whether to search up the context hierarchy.</param>
            <param name="goDown">Whether to search down the context hierarchy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.op_LessThan(Microsoft.MapPoint.Data.ContextFilterEntry,Microsoft.MapPoint.Data.ContextFilterEntry)">
            <summary>
            Overloads the less-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.op_GreaterThan(Microsoft.MapPoint.Data.ContextFilterEntry,Microsoft.MapPoint.Data.ContextFilterEntry)">
            <summary>
            Overloads the greater-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.op_LessThanOrEqual(Microsoft.MapPoint.Data.ContextFilterEntry,Microsoft.MapPoint.Data.ContextFilterEntry)">
            <summary>
            Overloads the less-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.op_GreaterThanOrEqual(Microsoft.MapPoint.Data.ContextFilterEntry,Microsoft.MapPoint.Data.ContextFilterEntry)">
            <summary>
            Overloads the greater-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.op_Equality(Microsoft.MapPoint.Data.ContextFilterEntry,Microsoft.MapPoint.Data.ContextFilterEntry)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.op_Inequality(Microsoft.MapPoint.Data.ContextFilterEntry,Microsoft.MapPoint.Data.ContextFilterEntry)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns>A hash code for the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterEntry.CompareTo(System.Object)">
            <summary>
            IComparable implementation.
            </summary>
            <param name="obj">The object to which to compare.</param>
            <returns>See IComparable documentation.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextFilterEntry.ContextId">
            <summary>
            Gets the context ID in which to search.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextFilterEntry.GoUp">
            <summary>
            Gets whether to search up the context hierarchy.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextFilterEntry.GoDown">
            <summary>
            Gets whether to search down the context hierarchy.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextFilterStorageGroupContext">
            <summary>
            Specifies a particular search context within a storageGroup.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextFilterStorageGroupContext.#ctor(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Constructor.
            </summary>
            <param name="storageGroup"></param>
            <param name="contextId"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextFilterStorageGroupContext.StorageGroup">
            <summary>
            Gets the storageGroup.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextFilterStorageGroupContext.ContextId">
            <summary>
            Gets the context ID.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextRelationshipQuery">
            <summary>
            A query for all subcontexts of a specific context ID.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextRelationshipQuery.#ctor(Microsoft.MapPoint.Data.EntityId,System.Boolean,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityResultOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="contextEntityId">The ID whose context relationships to retrieve.</param>
            <param name="includeSubcontexts">Whether to include subcontexts in the returned results.</param>
            <param name="entityTypeFilter">Entity type filter to use. May be null.</param>
            <param name="resultOptions">Entity result options. If null, default options will be used.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextRelationshipQuery.Ontology">
            <summary>
            Gets the ontology that this query must be used with, if any.
            May be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextRelationshipQuery.ContextEntityId">
            <summary>
            Gets the entity ID of the context whose relationships to query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextRelationshipQuery.IncludeSubcontexts">
            <summary>
            Gets whether to include subcontexts in the returned results.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextRelationshipQuery.EntityTypeFilter">
            <summary>
            Gets the entity type filter. May be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextRelationshipQuery.ResultOptions">
            <summary>
            Gets the result options.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ContextRelationshipQueryResult">
            <summary>
            The result of a context relationship query.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ContextRelationshipQueryResult.#ctor(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.Entity[])">
            <summary>
            Constructor.
            </summary>
            <param name="parentId">The entity ID of the parent context of the entity queried for.</param>
            <param name="subcontexts">The subcontexts of the entity queried for.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextRelationshipQueryResult.ParentId">
            <summary>
            Gets the entity ID of the parent context of
            the entity queried for. If the queried context was
            at the top of the context hierarchy, its parent
            will equal itself.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ContextRelationshipQueryResult.Subcontexts">
            <summary>
            Gets the subcontexts of the entity queried for, if any.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityIdQuery">
            <summary>
            A query for specific entities by ID.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityIdQuery.#ctor(System.Collections.ICollection,Microsoft.MapPoint.Data.EntityResultOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="entityIds">The ID's of the entities to query.</param>
            <param name="resultOptions">Entity result options. If null, default options will be used.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityIdQuery.Ids">
            <summary>
            Gets the entity ID's in the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityIdQuery.ResultOptions">
            <summary>
            Gets the result options.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityNameQuery">
            <summary>
            A query for finding entities by fuzzy name match.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQuery.#ctor(Microsoft.MapPoint.Data.NameFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.ContextFilter,Microsoft.MapPoint.Data.EntityResultOptions,System.Double,Microsoft.MapPoint.Data.ContextTypeFilter,System.Int32,System.Boolean)">
            <summary>
            Constructor for a collection of search contexts.
            </summary>
            <param name="nameFilter">The name filter.</param>
            <param name="typeFilter">The type filter. May be null.</param>
            <param name="propertyFilter">Property expression to limit the search. May be null.</param>
            <param name="contextFilter">Entity contexts to which to limit the search. May be null.</param>
            <param name="resultOptions">The entity result options. If null, default options will be used.</param>
            <param name="minimumScore">The minimum score to return.</param>
            <param name="contextTypeFilter">The context type filter used to filter entities based on whether they are contexts.</param>
            <param name="maximumResults">The maximum number of results to return from the query.  The default is no limit.</param>
            <param name="bestMatch">Whether the returned results will be the best ones available(if true), or simply the first ones found (if false, the default).</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQuery.#ctor(Microsoft.MapPoint.Data.NameFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.ContextFilter,Microsoft.MapPoint.Data.EntityResultOptions,System.Double,Microsoft.MapPoint.Data.ContextTypeFilter)">
            <summary>
            Constructor for a collection of search contexts.
            </summary>
            <param name="nameFilter">The name filter.</param>
            <param name="typeFilter">The type filter. May be null.</param>
            <param name="contextFilter">Property expression to limit the search. May be null.</param>
            <param name="propertyFilter">Entity contexts to which to limit the search. May be null.</param>
            <param name="resultOptions">The entity result options. If null, default options will be used.</param>
            <param name="minimumScore">The minimum score to return.</param>
            <param name="contextTypeFilter">The context type filter used to filter entities based on whether they are contexts.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.Ontology">
            <summary>
            Gets the ontology that this query must be used with, if any.
            May be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.NameFilter">
            <summary>
            Gets the name filter for the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.TypeFilter">
            <summary>
            Gets the type filter for the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.ContextFilter">
            <summary>
            Gets the collection of entity contexts to which to limit
            the search. May be null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.ResultOptions">
            <summary>
            Gets the entity result options.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.PropertyFilter">
            <summary>
            Gets the entity property expression used to filter properties.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.MinimumScore">
            <summary>
            Gets the minimum score for matched results.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQuery.ContextTypeFilter">
            <summary>
            Gets the context inclusion used to filter entities based on whether
            they are contexts.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityAuthority">
            <summary>
            EntityAuthorities are the naming authority for geospatial entities and the 
            ontology authority for a specific world model.  They exist as an identifier 
            and manager for geospatial entities and corresponding ontology.  An EntityAuthority
            is expressed as a capability of a dataSource.  While every DataSource must have
            an EntityAuthority, only those DataSources that “are” an EntityAuthority will have
            the capability to create, update or otherwise manage entities or the ontology.  An 
            EntityAuthority can be the naming authority for multiple dataSources – or for only 
            one data table.  An EntityAuthority may not always be able to be connected to from a 
            DataSource.  An example of multiple dataSources from a single EntityAuthority would 
            be how MapPoint.NA, MapPoint.EU, and MapPoint.World are currently implemented.  The 
            EntityAuthority in this case is MapPoint and the master dataSource is not even 
            exposed to the public (it’s Alexandria).  An example of a single table dataSource 
            with a single would be a single customer data table that holds their store 
            information.
            
            Creating a new EntityAuthority requires importing an existing Ontology (or the base 
            Ontology if none specified).
            
            Each EntityAuthority has its own Ontology, Ontologies are not shared between them 
            (although they may have the same types in them).  DataSources that share the same 
            EntityAuthority share the same Ontology, which is defined by the EntityAuthority.  
            If code depends on specific types/properties, it must use the type's KeyName and the 
            Ontology’s GUID.  
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthority.#ctor(System.Guid,Microsoft.MapPoint.Data.DataSource,System.String)">
            <summary>
            Cstor.
            </summary>
            <param name="entityAuthorityGuid"></param>
            <param name="dataSource"></param>
            <param name="description"></param>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityAuthority.Id">
            <summary>
            Gets the id of the entity authority.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityAuthority.DataSource">
            <summary>
            Gets the dataSource of this entity authority.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthority.CreateEntity(System.Boolean,Microsoft.MapPoint.Data.EntitySpecification)">
            <summary>
            Creates an entity in the dataSource that hosts the entity authority.
            </summary>
            <param name="isPersistent"></param>
            <param name="entitySpecification">Data for the new entity.</param>
            <returns>The newly created entity</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthority.ValidateEntityIdsInBinaryEntityRelationships(Microsoft.MapPoint.Data.WriteableCollections.EntityRelationshipSpecificationWriteableCollection)">
            <summary>
            Check to make sure the entity id's reference in the relationship are valid.
            </summary>
            <param name="relationships"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthority.ValidateEntityProperties(Microsoft.MapPoint.Data.EntitySpecification)">
            <summary>
            Validates that all required properties are present
            </summary>
            <param name="entitySpecification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthority.UpdateEntity(Microsoft.MapPoint.Data.Entity,Microsoft.MapPoint.Data.EntitySpecification)">
            <summary>
            Updates the Entity type, name, relationships, or property values based 
            on the input Entity object.  Requires a fully populated Entity object.  
            It will update all information to match specified input Entity.  This 
            method does not do partial updates.
            </summary>
            <param name="entity">The entity to update</param>
            <param name="entitySpecification">The new data to populate the entity with</param>
            <returns>The updated entity</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityAuthority.DeleteEntity(Microsoft.MapPoint.Data.Entity)">
            <summary>
            If the entity is persistent, this method merely retires it.  
            If the entity is non-persistent this deletes the entity provided.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityAuthority.Description">
            <summary>
            Gets/Sets the description.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityAuthority.Version">
            <summary>
            Gets the entity authority's version.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityAuthority.DataSourceReference">
            <summary>
            Gets the dataSource of this entity authority.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityAuthority.Ontology">
            <summary>
            Returns the ontology.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityId">
            <summary>
            An ID that uniquely identifies an entity within a given data source.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityId.Invalid">
            <summary>
            the value of an invalid entity id.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="idValue">The value to assign to the entity ID.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.#ctor(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Copy constructor.
            </summary>
            <param name="id">The ID to copy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.GetHashCode">
            <summary>
            Gets a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.op_Equality(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Overloads the equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.op_Inequality(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Overloads the inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.op_LessThan(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Overloads the less-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.op_GreaterThan(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Overloads the greater-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.op_LessThanOrEqual(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Overloads the less-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.op_GreaterThanOrEqual(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Overloads the greater-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.Equals(System.Object)">
            <summary>
            Equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.Equals(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Equals.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.ToString">
            <summary>
            Provide a string representation of the Entity Id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.Validate(System.String)">
            <summary>
            Ensures that the entity ID is not an invalid value.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.CompareTo(System.Object)">
            <summary>
            IComparable implementation.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityId.CompareTo(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            IComparable implementation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityId.Value">
            <summary>
            The value of the entity ID.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityNameQueryResult">
            <summary>
            A result from an entity name query.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResult.#ctor(System.String,System.Double,Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.MatchedEntityNameCollection)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The matching name.</param>
            <param name="score">The name's score.</param>
            <param name="context">The context this name was found in.</param>
            <param name="entities">The collection of entities that matched to this name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResult.OverrideScore(System.Double)">
            <summary>
            Overrides the score with a new score.
            </summary>
            <param name="newScore">The new score.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResult.CompareTo(Microsoft.MapPoint.Data.EntityNameQueryResult)">
            <summary>
            Compares this EntityNameQueryResult with another.  It will sort them in
            DESCENDING order, with higher scores moved ahead of lower scores.  If scores
            are identical, it will sort in alphabetical order of matched name.
            </summary>
            <param name="entityNameQueryResult">The EntityNameQueryResult to compare with.</param>
            <returns>Zero if equal, -1 if this EntityNameQueryResult is less than input
            EntityNameQueryResult, 1 if this EntityNameQueryResult is greater than input
            EntityNameQueryResult.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResult.CompareTo(System.Object)">
            <summary>
            Compares this EntityNameQueryResult with another.
            </summary>
            <param name="obj">The EntityNameQueryResult to compare with.</param>
            <returns>Zero if equal, -1 if this EntityNameQueryResult is less than input
            EntityNameQueryResult, 1 if this EntityNameQueryResult is greater than input
            EntityNameQueryResult.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResult.Equals(System.Object)">
            <summary>
            Overrides Equals method
            </summary>
            <param name="obj">The EntityNameQueryResult to compare with.</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityNameQueryResult.GetHashCode">
            <summary>
            Overrides GetHashCode method
            </summary>
            <returns>The Hashcode.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResult.Name">
            <summary>
            Gets the name found.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResult.Score">
            <summary>
            Gets the score for this name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResult.Context">
            <summary>
            Gets the find context this name was found in.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityNameQueryResult.Entities">
            <summary>
            Gets the entities that matched this name.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityPropertyExpression">
            <summary>
            Provides filtering of entities based on their properties.
            </summary>
            <remarks>
            Using the two constructors, it is possible to create complex trees of PropertyExpressions.  
            One constructor creates value comparisons, for example Property1 must equal 1.  The other constructor
            combines other expressions to form compound expressions.
            
            You can, for example, specify that Property1's value must equal 1 or 2 by specifying two expressions for 
            the same property definition and constructing another PropertyExpression that combines them.  You can also 
            specify multiple different property definitions in the same way, for example Property1 must equal 1 and 
            Property2 must equal 3.
            
            You can even specify properties from different entity types in a single compound expression.  In this case, a 
            value expression that refers to EntityType1 will always return true for entities of other types.  For example,
            EntityType1.Property1 equals 1 will allow all entities of type1 that have Property1 equals 1, and all entities
            of EntityType2 regardless of their property values.  If filtering on EntityType2 is desired, add a PropertyExpression
            that refers to a proeprty on that type, or if you wish all EntityType2 entities to be filtered use the
            EntityTypeFilter.
            </remarks>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyExpression">
            <summary>
            Provides filtering of entities based on their properties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpression.#ctor(Microsoft.MapPoint.Data.PropertyDefinition,System.Object,Microsoft.MapPoint.Data.PropertyExpressionComparisonType)">
            <summary>
            Constructor for a single value comparison.
            </summary>
            <param name="propertyDefinition">The property to be compared.</param>
            <param name="value">The value to be compared against.</param>
            <param name="comparison">The type of comparison to make.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpression.#ctor(Microsoft.MapPoint.Data.PropertyExpressionOperator,Microsoft.MapPoint.Data.PropertyExpression,Microsoft.MapPoint.Data.PropertyExpression)">
            <summary>
            Constructor for a binary operator.
            </summary>
            <param name="expressionOperator">The type of operation to use in this expression.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpression.ToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified PropertyExpression is equal to the current PropertyExpression.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpression.GetHashCode">
            <summary>
            Gets a hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpression.MatchesInternal(System.Object)">
            <summary>
            Evaluates the provided entity, and returns true if it matches
            the expression or false if it does not.
            Does not perform validation.
            </summary>
            <param name="candidate">The item to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyExpression.#ctor(Microsoft.MapPoint.Data.EntityPropertyDefinition,System.Object)">
            <summary>
            Constructor for a single value comparison, defaulting to EqualTo.  This expression will only filter
            entities that are of the correct type for the property.  Entities of other types will always pass.
            </summary>
            <param name="propertyDefinition">The property to be compared.</param>
            <param name="value">The value to be compared against.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyExpression.#ctor(Microsoft.MapPoint.Data.EntityPropertyDefinition,System.Object,Microsoft.MapPoint.Data.PropertyExpressionComparisonType)">
            <summary>
            Constructor for a single value comparison.  This expression will only filter
            entities that are of the correct type for the property.  Entities of other types will always pass.
            </summary>
            <param name="propertyDefinition">The property to be compared.</param>
            <param name="value">The value to be compared against.</param>
            <param name="comparison">The type of comparison to make.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyExpression.#ctor(Microsoft.MapPoint.Data.PropertyExpressionOperator,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.EntityPropertyExpression)">
            <summary>
            Constructor for a binary operator.
            </summary>
            <param name="expressionOperator">The type of operation to use in this expression.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyExpression.Matches(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Evaluates the provided entity, and returns true if it matches
            the expression or false if it does not.
            </summary>
            <param name="entity">The entity to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyExpression.op_BitwiseAnd(Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.EntityPropertyExpression)">
            <summary>
            And operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyExpression.op_BitwiseOr(Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.EntityPropertyExpression)">
            <summary>
            Or operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityPropertyExpression.op_ExclusiveOr(Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.EntityPropertyExpression)">
            <summary>
            Xor operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitivePropertyExpression">
            <summary>
            Provides filtering of primitives based on their properties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyExpression.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyDefinition,System.Object)">
            <summary>
            Constructor for a single value comparison, defaulting to EqualTo.
            </summary>
            <param name="propertyDefinition">The property to be compared.</param>
            <param name="value">The value to be compared against.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyExpression.#ctor(Microsoft.MapPoint.Data.PrimitivePropertyDefinition,System.Object,Microsoft.MapPoint.Data.PropertyExpressionComparisonType)">
            <summary>
            Constructor for a single value comparison.
            </summary>
            <param name="propertyDefinition">The property to be compared.</param>
            <param name="value">The value to be compared against.</param>
            <param name="comparison">The type of comparison to make.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyExpression.#ctor(Microsoft.MapPoint.Data.PropertyExpressionOperator,Microsoft.MapPoint.Data.PrimitivePropertyExpression,Microsoft.MapPoint.Data.PrimitivePropertyExpression)">
            <summary>
            Constructor for a binary operator.
            </summary>
            <param name="expressionOperator">The type of operation to use in this expression.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyExpression.Matches(Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Evaluates the provided primitive, and returns true if it matches
            the expression or false if it does not.
            </summary>
            <param name="primitive">The primitive to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyExpression.op_BitwiseAnd(Microsoft.MapPoint.Data.PrimitivePropertyExpression,Microsoft.MapPoint.Data.PrimitivePropertyExpression)">
            <summary>
            And operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyExpression.op_BitwiseOr(Microsoft.MapPoint.Data.PrimitivePropertyExpression,Microsoft.MapPoint.Data.PrimitivePropertyExpression)">
            <summary>
            Or operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitivePropertyExpression.op_ExclusiveOr(Microsoft.MapPoint.Data.PrimitivePropertyExpression,Microsoft.MapPoint.Data.PrimitivePropertyExpression)">
            <summary>
            Xor operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyValueComparison">
            <summary>
            Provides filtering of entities based on their properties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.#ctor(Microsoft.MapPoint.Data.PropertyDefinition,System.Object,Microsoft.MapPoint.Data.PropertyExpressionComparisonType)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinition">The keyname of the property to be compared.</param>
            <param name="value">The value to be compared against.</param>
            <param name="comparison">The type of comparison to make.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.ToString">
            <summary>
            Gets a string representation of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.Equals(System.Object)">
            <summary>
            Determines whether the specified EntityPropertyValueComparison is equal to the current EntityPropertyValueComparison.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.GetHashCode">
            <summary>
            Gets a hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.Matches(System.Object)">
            <summary>
            Evaluates the provided candidate, and returns true if it matches
            the expression or false if it does not.
            </summary>
            <param name="candidate">The candidate to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.Matches(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Evaluates the provided thing, and returns true if it matches
            the expression or false if it does not.
            </summary>
            <param name="entity">The entity to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.Matches(Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Evaluates the provided primitive, and returns true if it matches
            the expression or false if it does not.
            </summary>
            <param name="primitive">The primitive to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyValueComparison.MatchesValue(System.Object)">
            <summary>
            Checks whether a supplied value satisfies the comparisons requested.
            </summary>
            <param name="candidateValue"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyExpressionFormatException">
            <summary>
            Thrown from the constructor when the string expression
            is invalid for some reason.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpressionFormatException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpressionFormatException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpressionFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpressionFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.PropertyExpressionFormatException"/> class.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PropertyExpressionFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements GetObjectData.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyExpressionComparisonType">
            <summary>
            Defines how the supplied value and the candidate's value should be compared.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PropertyExpressionComparisonType.EqualTo">
            <summary>
            Only candidates that have a property equal to the supplied value will be returned.  For multivalued properties, if any
            value of the property matches then the candidate will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PropertyExpressionComparisonType.NotEqualTo">
            <summary>
            Only candidates that do not have a property equal to the supplied value will be returned.  For multivalued properties, if
            none of the values of the property matches then the candidate will be returned.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PropertyExpressionOperator">
            <summary>
            Defines how an expression should be combined with another.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PropertyExpressionOperator.Or">
            <summary>
            If either operand of this expression matches, the entity matches.  Can also use the | operator.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PropertyExpressionOperator.And">
            <summary>
            If both operands of this expression match, the entity matches.  Can also use the &amp; operator.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PropertyExpressionOperator.Xor">
            <summary>
            If one of the two operands, but not both, of the expression match, the entity matches.  Can also use the ^ operator.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityResultMask">
            <summary>
            Allows specifying what types of entity information to return
            from an entity query.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityResultMask.None">
            <summary>
            Nothing is specified.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityResultMask.Properties">
            <summary>
            Entity properties will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityResultMask.Names">
            <summary>
            Entity names will be returned. Note that the default name for
            the entity is always returned, even if this flag is not set.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityResultMask.Relationships">
            <summary>
            Entity relationships will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityResultMask.All">
            <summary>
            All information will be returned.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityResultOptions">
            <summary>
            Options for returning entity results.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityResultOptions.Default">
            <summary>
            Default Entity Result Options.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityResultOptions.#ctor">
            <summary>
            Private constructor, used only for the static Default property.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityResultOptions.#ctor(Microsoft.MapPoint.Data.EntityResultMask)">
            <summary>
            Constructor.
            </summary>
            <param name="resultMask">Entity result mask.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityResultOptions.SupplyDefaultIfNeeded(Microsoft.MapPoint.Data.EntityResultOptions)">
            <summary>
            If the options are null, supply default-constructed ones; otherwise,
            return the supplied options.
            </summary>
            <param name="options">Options.  May be null.</param>
            <returns>Options.  Will never be null.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityResultOptions.ResultMask">
            <summary>
            Gets the entity result mask.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntitySpatialQuery">
            <summary>
            A spatial query for entities.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntitySpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.EntityResultOptions,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter.</param>
            <param name="propertyFilter">Property expression to limit the search. May be null.</param>
            <param name="resultOptions">Entity result options. If null, default options will be used.</param>
            <param name="maximumResults">The maximum number of results to return from the query.  The default is no limit.</param>
            <param name="bestMatch">Whether the returned results will be the best ones available(if true), or simply the first ones found (if false, the default).</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntitySpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.EntityResultOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter.</param>
            <param name="propertyFilter">Property expression to limit the search. May be null.</param>
            <param name="resultOptions">Entity result options. If null, default options will be used.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntitySpatialQuery.ResultOptions">
            <summary>
            Gets the result options.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.LatLongBoundedQueryRegion">
            <summary>
            A spatial region that is a rectangle in lat/long space.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.LatLongBoundedQueryRegion.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Constructor.
            </summary>
            <param name="southwestCorner">The southwest corner of the region.</param>
            <param name="northeastCorner">The northeast corner of the region.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.LatLongBoundedQueryRegion.SouthwestCorner">
            <summary>
            Gets the southwest corner of the region.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.LatLongBoundedQueryRegion.NortheastCorner">
            <summary>
            Gets the northeast corner of the region.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveEntityIdQuery">
            <summary>
            Query specification for a primitive entity id query.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveEntityIdQuery.#ctor(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.PrimitiveResultOptions)">
            <summary>
            Constructor for a primitive enteity id query object.
            </summary>
            <param name="entityId">The entity ID on which to query.</param>
            <param name="resultOptions">Query options.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveEntityIdQuery.#ctor(Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.PrimitiveResultOptions,Microsoft.MapPoint.Data.GeometryOptions)">
            <summary>
            Constructor for a primitive enteity id query object.
            </summary>
            <param name="entityId">The entity ID on which to query.</param>
            <param name="resultOptions">Query options.</param>
            <param name="geometryOptions">Geometry options to use for primitives.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveEntityIdQuery.EntityId">
            <summary>
            Gets the entity id.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveEntityIdQuery.ResultOptions">
            <summary>
            Gets the result options for the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveEntityIdQuery.GeometryOption">
            <summary>
            Gets the geometry options for this query
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ResultStatus">
            <summary>
            The status of the query
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ResultStatus.ResultComplete">
            <summary>
            Query completed sucessfully and all results were returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ResultStatus.Timeout">
            <summary>
            Query timed out before all results could be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ResultStatus.InternalError">
            <summary>
            An internal error occured during processing of the query.
            All results may not have been returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ResultStatus.FileCorrupt">
            <summary>
            The file containing the data was corrupt.  All results
            may not have been returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ResultStatus.RequestCanceled">
            <summary>
            The request was canceled.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.ResultStatus.InProgress">
            <summary>
            The request has not yet been fully serviced.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ScoredEntityQueryResult">
            <summary>
            A scored result from an entity query.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.#ctor(Microsoft.MapPoint.Data.Entity,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity.</param>
            <param name="score">The entity's score.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.op_LessThan(Microsoft.MapPoint.Data.ScoredEntityQueryResult,Microsoft.MapPoint.Data.ScoredEntityQueryResult)">
            <summary>
            Overloads the less-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.op_GreaterThan(Microsoft.MapPoint.Data.ScoredEntityQueryResult,Microsoft.MapPoint.Data.ScoredEntityQueryResult)">
            <summary>
            Overloads the greater-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.op_LessThanOrEqual(Microsoft.MapPoint.Data.ScoredEntityQueryResult,Microsoft.MapPoint.Data.ScoredEntityQueryResult)">
            <summary>
            Overloads the less-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.op_GreaterThanOrEqual(Microsoft.MapPoint.Data.ScoredEntityQueryResult,Microsoft.MapPoint.Data.ScoredEntityQueryResult)">
            <summary>
            Overloads the greater-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.Equals(System.Object)">
            <summary>
            Returns whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ScoredEntityQueryResult.CompareTo(System.Object)">
            <summary>
            IComparable implementation.
            </summary>
            <param name="obj">The object to which to compare.</param>
            <returns>-1, 0, or 1 (see IComparable docs).</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ScoredEntityQueryResult.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ScoredEntityQueryResult.Score">
            <summary>
            Gets the entity's score.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.BinaryEntityRelationship">
            <summary>
            A binary entity relationship
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationship">
            <summary>
            An entity relationship.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityRelationship.RelationshipType">
            <summary>
            The type of this relationship
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationship.#ctor(Microsoft.MapPoint.Data.EntityRelationshipType,Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection)">
            <summary>
            Cstor.
            </summary>
            <param name="entityRelationshipType"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationship.SetPropertyValues(System.Object[])">
            <summary>
            Sets all of the properties in this object.
            </summary>
            <param name="propertyValues"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationship.Properties">
            <summary>
            Gets the properties of the relationship.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.BinaryEntityRelationship.TargetEntityId">
            <summary>
            The "target" entity Id.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationship.#ctor(Microsoft.MapPoint.Data.BinaryEntityRelationshipType,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Cstor.
            </summary>
            <param name="binaryEntityRelationshipType"></param>
            <param name="targetEntityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationship.#ctor(Microsoft.MapPoint.Data.BinaryEntityRelationshipType,Microsoft.MapPoint.Data.EntityId,Microsoft.MapPoint.Data.RelationshipPropertyValueKeyedCollection)">
            <summary>
            Cstor.
            </summary>
            <param name="binaryEntityRelationshipType"></param>
            <param name="targetEntityId"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.BinaryEntityRelationshipSpecification">
            <summary>
            Editable specification for an BinaryEntityRelationship.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityRelationshipSpecification">
            <summary>
            Editable specification for an EntityRelationship.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.EntityRelationshipSpecification.RelationshipType">
            <summary>
            The type of this relationship
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecification.#ctor(Microsoft.MapPoint.Data.EntityRelationshipType)">
            <summary>
            Cstor.
            </summary>
            <param name="entityRelationshipType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityRelationshipSpecification.#ctor(Microsoft.MapPoint.Data.EntityRelationship)">
            <summary>
            Create a specification using an existing relationship.
            </summary>
            <param name="existingRelationship"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityRelationshipSpecification.Properties">
            <summary>
            Gets the properties of the relationship.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.BinaryEntityRelationshipSpecification.TargetEntityId">
            <summary>
            The "target" entity Id.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipSpecification.#ctor(Microsoft.MapPoint.Data.BinaryEntityRelationshipType,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Cstor.
            </summary>
            <param name="binaryEntityRelationshipType"></param>
            <param name="targetEntityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.BinaryEntityRelationshipSpecification.#ctor(Microsoft.MapPoint.Data.BinaryEntityRelationship)">
            <summary>
            Create a specification using an existing relationship.
            </summary>
            <param name="existingRelationship"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.FilterInclusion">
            <summary>
            Enumeration of whether to include or exclude entries.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.FilterInclusion.IncludeEntries">
            <summary>
            Entries should be included in results.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.FilterInclusion.ExcludeEntries">
            <summary>
            Entries should b excluded from results.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.FilterStrictness">
            <summary>
            Enumeration of how strictly the filter must be followed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.FilterStrictness.Strict">
            <summary>
            Only types requested will be filtered.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.FilterStrictness.NonStrict">
            <summary>
            Similar types to those requested may be included in the filter.  May perform better.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityTypeFilter">
            <summary>
            Limits the results of a query to the specified entity types.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.#ctor(Microsoft.MapPoint.Data.EntityType,System.Boolean,Microsoft.MapPoint.Data.FilterInclusion,Microsoft.MapPoint.Data.FilterStrictness)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.EntityTypeFilter"/> 
            class with a single entry.
            </summary>
            <param name="entityType">The entity type to add.</param>
            <param name="includeChildren">Whether to include the type's children.</param>
            <param name="inclusion">Whether to include or exclude entries.</param>
            <param name="strictness">How strictly to filter.  Non-strict may allow types related to those requested but executes faster.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.#ctor(Microsoft.MapPoint.Data.EntityType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.EntityTypeFilter"/> 
            class with a single entry.
            </summary>
            <param name="entityType">The entity type to add.</param>
            <param name="includeChildren">Whether to include the type's children.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.#ctor(System.Collections.ICollection,Microsoft.MapPoint.Data.FilterInclusion,Microsoft.MapPoint.Data.FilterStrictness)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.EntityTypeFilter"/> 
            class from a collection of <see cref="T:Microsoft.MapPoint.Data.EntityTypeFilterEntry"/> 
            objects.
            </summary>
            <param name="entries">The filter entries.</param>
            <param name="inclusion">Whether to include or exclude entries.</param>
            <param name="strictness">How strictly to filter.  Non-strict may allow types related to those requested but executes faster.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.EntityTypeFilter"/> 
            class from a collection of <see cref="T:Microsoft.MapPoint.Data.EntityTypeFilterEntry"/> 
            objects.
            </summary>
            <param name="entries">The filter entries.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.IncludesEntity(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Gets whether or not a specified EntityType is accepted or rejected by this filter.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.AddEntityTypeToLookup(Microsoft.MapPoint.Data.EntityType,Microsoft.MapPoint.Data.EntityTypeFilterEntry)">
            <summary>
            Recursive method to add entity type and children (if flag is set) to entityTypeLookup.
            </summary>
            <param name="entityType"></param>
            <param name="entry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.BuildEntityTypeLookup">
            <summary>
            Builds entityTypeLookup field.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.BuildStorageGroups">
            <summary>
            Builds storageGroups field.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.Ontology">
            <summary>
            Gets the ontology that this filter must be used with.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.Inclusion">
            <summary>
            Gets whether to include or exclude entries that are in the filter.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.Strictness">
            <summary>
            Gets how strictly the filter must be followed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.Entries">
            <summary>
            Gets the collection of entries in the filter.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.StorageGroups">
            <summary>
            Gets the collection of storage groups that this filter includes.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection">
            <summary>
            A collection of EntityTypeFilterEntry objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">The array to which to copy.</param>
            <param name="index">The point within the array at which to begin the copy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection of entity ID's.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.Ontology">
            <summary>
            Gets the ontology that this collection must be used with.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.Item(System.Int32)">
            <summary>
            Gets the entry at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.Count">
            <summary>
            Gets the number of entity ID's in the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.IsSynchronized">
            <summary>
            Gets whether the collection is synchronized (thread-safe).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilter.EntryCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.EntityTypeFilterEntry">
            <summary>
            An entry in the filter.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilterEntry.#ctor(Microsoft.MapPoint.Data.EntityType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType">The entity type to include.</param>
            <param name="includeChildren">Whether to includ types descended from this type.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilterEntry.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.EntityTypeFilterEntry.GetHashCode">
            <summary>
            Get a hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilterEntry.EntityType">
            <summary>
            Gets the type to include in the filter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.EntityTypeFilterEntry.IncludeChildren">
            <summary>
            Gets whether to include types descended from this entity type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.GeometryOptions">
            <summary>
            Options for returning geometry from a query.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryOptions.DefaultScale">
            <summary>
            The scale values for the default constructor.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryOptions.MostDetailedScaleAvailable">
            <summary>
            Use this value for scale to get geometry at the smallest scale available.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryOptions.LeastDetailedScaleAvailable">
            <summary>
            Gets the maximum scale that can be used.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.GeometryOptions.Default">
            <summary>
            Default Geometry Options.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.GeometryOptions.#ctor">
            <summary>
            Private constructor, used only for the static Default property.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.GeometryOptions.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.GeometryOptions"/> class.
            </summary>
            <param name="coordinateReferenceSystem">Desired coordinate reference system of returned results. If null, defaults to the coordinate reference system of the data source.</param>
            <param name="cacheResults">Whether to cache the results of the query.</param>
            <param name="strictSpatialFilter">Whether the query is strict, i.e., will return only geometry that matches the spatial filter applied.</param>
            <param name="scale">The scale at which geometry should be retrieved.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.GeometryOptions.SupplyDefaultIfNeeded(Microsoft.MapPoint.Data.GeometryOptions)">
            <summary>
            If the options are null, supply default-constructed ones; otherwise,
            return the supplied options.
            </summary>
            <param name="options">Options.  May be null.</param>
            <returns>Options.  Will never be null.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.GeometryOptions.Scale">
            <summary>
            Gets the scale at which we want geometry.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.GeometryOptions.CoordinateReferenceSystem">
            <summary>
            Gets the convertor used for coordinate conversions, if any.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.GeometryOptions.CacheResults">
            <summary>
            Gets whether to cache the results of the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.GeometryOptions.StrictSpatialFilter">
            <summary>
            Gets whether the query is strict, i.e., will return only
            geometry that matches the spatial filter applied.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NameFilter">
            <summary>
            A filter to limit queries by fuzzy name match.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.NameFilter.Ontology">
            <summary>
            The ontology that this filter can be used with.
            May be null, meaning will work with any ontology.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameFilter.GetNameRoleLookup">
            <summary>
            A hashtable of name roles relevant for name matching, used for quick lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameFilter.Matches(Microsoft.MapPoint.Data.AbstractName,System.Double,System.Double@)">
            <summary>
            Returns whether an individual name matches this filter.  Matches against Base Name.
            </summary>
            <param name="candidate">The name to match.</param>
            <param name="minimumScore">The minimum score to allow.</param>
            <param name="score">The score this name received.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameFilter.MatchesFullName(Microsoft.MapPoint.Data.AbstractName,System.Double,System.Double@)">
            <summary>
            Returns whether an individual name matches this filter.  Matches against Full Name.
            </summary>
            <param name="candidate">The name to match.</param>
            <param name="minimumScore">The minimum score to allow.</param>
            <param name="score">The score this name received.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameFilter.Matches(Microsoft.MapPoint.Data.AbstractName,System.String,System.Double,System.Double@)">
            <summary>
            Does the actual matching work.
            </summary>
            <param name="candidate"></param>
            <param name="candidateText"></param>
            <param name="minimumScore"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameFilter.#ctor(System.String,Microsoft.MapPoint.Utility.NameFilterRules,Microsoft.MapPoint.Utility.StartsWith,System.Globalization.CultureInfo,System.Collections.ICollection)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name on which to filter.</param>
            <param name="rules">The rules to use when matching the name.</param>
            <param name="startsWith">Whether the name may start with the filter.  May be used in conjunction with any set of rules.</param>
            <param name="culture">The culture of the queried name.</param>
            <param name="nameRoles">The name roles to filter on.  May be null to allow all name roles.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameFilter.Name">
            <summary>
            Gets the name on which to filter.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameFilter.Rules">
            <summary>
            Gets what type of rules we should use when matching names.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameFilter.Culture">
            <summary>
            Gets the culture of the queried name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameFilter.StartsWith">
            <summary>
            If On, scoring will be based on whether the name matches the start of an entity name.
            If Off, scoring will be based on matching the entire string.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.NameFilter.NameRoles">
            <summary>
            The collection of name roles that are relevant for name matching.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.NameFilter.ReadOnlyNameRolesWrapper">
            <summary>
            Read-only wrapper for an array of entries.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.NameFilter.ReadOnlyNameRolesWrapper.#ctor(System.Collections.Hashtable)">
            <summary>
            Constructor.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveIdQuery">
            <summary>
            A query for specific primitives by ID.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdQuery.#ctor(System.Collections.ICollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions)">
            <summary>
            Constructor.  Turns on caching.
            </summary>
            <param name="primitiveIds">The ID's of the primitives to query.</param>
            <param name="coordinateReferenceSystem">The coordinate reference system in which to return results.</param>
            <param name="resultOptions">Primitive result options. If null, default options will be used.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdQuery.#ctor(System.Collections.ICollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="primitiveIds">The ID's of the primitives to query.</param>
            <param name="coordinateReferenceSystem">The coordinate reference system in which to return results.</param>
            <param name="resultOptions">Primitive result options. If null, default options will be used.</param>
            <param name="cacheResults">Specifies whether or not to cache the results of this query.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdQuery.Ids">
            <summary>
            Gets the primitive ID's in the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdQuery.CoordinateReferenceSystem">
            <summary>
            Gets the coordinate reference system in which to return results.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdQuery.ResultOptions">
            <summary>
            Gets the result options.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdQuery.CacheResults">
            <summary>
            Gets a flag indicating whether results will be cached.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveIdQuery.PrimitiveIdCollection">
            <summary>
            A collection of primitive ID's.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdQuery.PrimitiveIdCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor.
            </summary>
            <param name="primitiveIds"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdQuery.PrimitiveIdCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">The array to which to copy.</param>
            <param name="index">The point within the array at which to begin the copy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveIdQuery.PrimitiveIdCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection of primitive ID's.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdQuery.PrimitiveIdCollection.Count">
            <summary>
            Gets the number of primitive ID's in the query.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdQuery.PrimitiveIdCollection.IsSynchronized">
            <summary>
            Gets whether the collection is synchronized (thread-safe).
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveIdQuery.PrimitiveIdCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveResultMask">
            <summary>
            Allows specifying what types of primitive information to
            return from a query.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultMask.None">
            <summary>
            Nothing will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultMask.Properties">
            <summary>
            Primitive properties will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultMask.Geometry">
            <summary>
            Geometry will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultMask.Relationships">
            <summary>
            Primitive relationships will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultMask.Entity">
            <summary>
            Entity information will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultMask.PrimitiveId">
            <summary>
            primitive id information will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultMask.All">
            <summary>
            All information will be returned.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveResultOptions">
            <summary>
            Options for returning results of a primitive query.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.PrimitiveResultOptions.Default">
            <summary>
            Default primitive result options.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveResultOptions.#ctor">
            <summary>
            Private constructor, used only for the static Default property.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveResultOptions.#ctor(Microsoft.MapPoint.Data.PrimitiveResultMask,Microsoft.MapPoint.Data.EntityResultOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="resultMask">Primitive result mask.</param>
            <param name="entityResultOptions">Entity result options.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveResultOptions.SupplyDefaultIfNeeded(Microsoft.MapPoint.Data.PrimitiveResultOptions)">
            <summary>
            If the options are null, supply default-constructed ones; otherwise,
            return the supplied options.
            </summary>
            <param name="options">Options.  May be null.</param>
            <returns>Options.  Will never be null.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveResultOptions.ResultMask">
            <summary>
            Gets the primitive result mask.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveResultOptions.EntityResultOptions">
            <summary>
            Gets the entity result options.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.PrimitiveSpatialQuery">
            <summary>
            A spatial query for primitives.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.PrimitiveResultOptions,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter. May be null.</param>
            <param name="entityPropertyFilter">Property expression to limit the search. May be null.</param>
            <param name="options">Primitive result options.</param>
            <param name="maximumResults">The maximum number of results to return from the query.  The default is no limit.</param>
            <param name="bestMatch">Whether the returned results will be the best ones available(if true), or simply the first ones found (if false, the default).</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds for the query.  Pass 0 for default timeout, -1 for no timeout</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.PrimitiveResultOptions,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter. May be null.</param>
            <param name="entityPropertyFilter">Property expression to limit the search. May be null.</param>
            <param name="options">Primitive result options.</param>
            <param name="maximumResults">The maximum number of results to return from the query.  The default is no limit.</param>
            <param name="bestMatch">Whether the returned results will be the best ones available(if true), or simply the first ones found (if false, the default).</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.PrimitiveResultOptions,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter. May be null.</param>
            <param name="entityPropertyFilter">Property expression to limit the search. May be null.</param>
            <param name="options">Primitive result options.</param>
            <param name="timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.PrimitiveSpatialQuery.#ctor(Microsoft.MapPoint.Data.SpatialFilter,Microsoft.MapPoint.Data.EntityTypeFilter,Microsoft.MapPoint.Data.EntityPropertyExpression,Microsoft.MapPoint.Data.PrimitiveResultOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialFilter">Spatial filter.</param>
            <param name="entityTypeFilter">Entity type filter. May be null.</param>
            <param name="entityPropertyFilter">Property expression to limit the search. May be null.</param>
            <param name="options">Primitive result options.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveSpatialQuery.Options">
            <summary>
            Gets the primitive result options.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.PrimitiveSpatialQuery.Timeout">
            <summary>
            Gets the timeout in milliseconds for this query
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SpatialFilter">
            <summary>
            A filter for a spatial query, which limits results to the
            area specified.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SpatialFilter.#ctor(Microsoft.MapPoint.Data.SpatialOperator,Microsoft.MapPoint.Data.QueryRegion,Microsoft.MapPoint.Data.GeometryOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="spatialOperator">The spatial operation that the filter applies.</param>
            <param name="region">The spatial region to which the filter applies.</param>
            <param name="geometryOptions">Geometry options.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialFilter.SpatialOperator">
            <summary>
            Gets the value of the spatial operation that the filter performs.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialFilter.Region">
            <summary>
            Gets the region to which the filter applies.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialFilter.GeometryOptions">
            <summary>
            Gets the geometry options.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SpatialOperator">
            <summary>
            Enumerates the various operations that a SpatialFilter can perform.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.SpatialOperator.Intersects">
            <summary>
            Include objects that intersect the filter, even if
            not fully contained.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelativeLine">
            <summary>
            RelativeLine for linear referencing.  It's a line that is relative to a primitive.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLine.dataSourceReference">
            <summary>
            A relative primitive can exist in one of two states
            When constructed, it will have a reference to the original primitive
            When de-serialized, it will not, but will only have the DS reference and Id.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLine.primitive">
            <summary>
            the primitive that the RelativeLine is relative to.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLine.fromFraction">
            <summary>
            the location from the starting point of the primitive.
            Value is between 0.0 and 1.0.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLine.toFraction">
            <summary>
            the location from the end point of the primitive.
            Value is between 0.0 and 1.0.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLine.segmentSide">
            <summary>
            indicates which side of the segment/primitive this relative line is on.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLine.forwards">
            <summary>
            Is the primitive traversed in the forwards direction. This needs to be specified
            because the fromFraction can equal the toFraction, making it impossible to deduce
            what the direction of traversal was. The traversal direction is important for example
            when via waypoints are involved.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativeLine.polyline">
            <summary>
            the polyline of this relative line.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.#ctor(Microsoft.MapPoint.Data.Primitive,System.Double,System.Double,System.Boolean,Microsoft.MapPoint.Data.SegmentSide)">
            <summary>
            Cstor.  The first coordinate of each polyline is the starting
            point of the segement in the direction of the segment, i.e. at the FromPercentage.
            </summary>
            <param name="primitive"></param>
            <param name="fromFraction"></param>
            <param name="toFraction"></param>
            <param name="forwards"></param>
            <param name="segmentSide"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.#ctor(Microsoft.MapPoint.Data.DataSourceReference,Microsoft.MapPoint.Data.PrimitiveId,System.Double,System.Double,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D)">
            <summary>
            Cstor.  used when the reference and id are known, but the primitive is not
            point of the segement in the direction of the segment, i.e. at the FromPercentage.
            </summary>
            <param name="reference"></param>
            <param name="primitiveId"></param>
            <param name="fromFraction"></param>
            <param name="toFraction"></param>
            <param name="segmentSide"></param>
            <param name="geometry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.ReconnectToPrimitive(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Re-connects a disconnected primitive
            </summary>
            <param name="relatedSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.GetPositionInformation(System.Double[],System.Double,System.Double,System.Int32@,System.Double@,System.Int32@,System.Double@)">
            <summary>
            Searches through a set of segment lengths (distances) for a start 
            and finish fraction and returns the segment indices and start 
            distances.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.GetPolyline">
            <summary>
            Gets the polyline of this relative line.
            The internal cache of the polyline will be generated to fulfill this method if it hasn't already.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.GetVertexCount">
            <summary>
            Gets the number of vertices in this geometry.  
            The internal cache of the polyline will be generated to fulfill this method if it hasn't already.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.CalculateLength">
            <summary>
            Gets the length of this geometry.
            The internal cache of the polyline will be generated to fulfill this method if it hasn't already.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativeLine.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLine.RelatedDataSource">
            <summary>
            Gets the dataSource reference. 
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLine.RelatedPrimitiveId">
            <summary>
            Gets the primitive id of the related primitive
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLine.Primitive">
            <summary>
            Gets the primitive that the RelativeLine is relative to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLine.FromFraction">
            <summary>
            Gets the location from the starting point of the primitive.
            Value is between 0.0 and 1.0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLine.ToFraction">
            <summary>
            Gets the location from the end point of the primitive.
            Value is between 0.0 and 1.0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLine.SegmentSide">
            <summary>
            Gets the segement side of the relative line.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativeLine.Forwards">
            <summary>
            Gets a bool value that specifies if the primitive is traversed in the forwards direction
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelativePoint">
            <summary>
            RelativePoint for linear referencing.  A point relative to a primitive.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativePoint.dataSourceReference">
            <summary>
            A relative primitive can exist in one of two states
            When constructed, it will have a reference to the original primitive
            When de-serialized, it will not, but will only have the DS reference and Id.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativePoint.primitive">
            <summary>
            the primitive that the RelativePoint is relative to.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativePoint.fromFraction">
            <summary>
            the location from the starting point of the primitive.
            Value is between 0.0 and 1.0.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativePoint.segmentSide">
            <summary>
            indicates which side of the segment/primitive this relative point is on.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RelativePoint.point">
            <summary>
            the actual point of this relative point.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.#ctor(Microsoft.MapPoint.Data.Primitive,System.Double,Microsoft.MapPoint.Data.SegmentSide)">
            <summary>
            Cstor.  The first coordinate of each polyline is the starting
            point of the segement in the direction of the segment, i.e. at the FromPercentage.
            </summary>
            <param name="primitive"></param>
            <param name="fromFraction"></param>
            <param name="segmentSide"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.#ctor(Microsoft.MapPoint.Data.DataSourceReference,Microsoft.MapPoint.Data.PrimitiveId,System.Double,Microsoft.MapPoint.Data.SegmentSide,Microsoft.MapPoint.Geometry.Geometry2D.Point2D)">
            <summary>
            Cstor.  used when the reference and id are known, but the primitive is not
            point of the segement in the direction of the segment, i.e. at the FromPercentage.
            </summary>
            <param name="reference"></param>
            <param name="primitiveId"></param>
            <param name="fromFraction"></param>
            <param name="segmentSide"></param>
            <param name="geometry"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.ReconnectToPrimitive(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Re-connects a disconnected primitive
            </summary>
            <param name="relatedSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.GetPointAndVertexIndex(System.Int32@)">
            <summary>
            Gets the actual point of the relativePoint, and also the vertex index of the primitive where the relative
            point is on
            </summary>
            <param name="vertexIndex">the vertex index of the from vertex on the primitive where the RelativePoint is on</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.GetPoint">
            <summary>
            Gets the actual point of this relative point.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.GetVertexCount">
            <summary>
            Returns the number of vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePoint.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePoint.RelatedDataSource">
            <summary>
            Gets the dataSource reference. 
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePoint.RelatedPrimitiveId">
            <summary>
            Gets the primitive id of the related primitive
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePoint.Primitive">
            <summary>
            Gets the primitive that the RelativePoint is relative to
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePoint.FromFraction">
            <summary>
            Gets the location from the starting point of the primitive
            Value is between 0.0 and 1.0.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePoint.SegmentSide">
            <summary>
            Gets the segement side of the relative point.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RelativePointAndDirection">
            <summary>
            Class which encapsulates a location on a Primitive, and the allowed traversal along that Primitive
            
            Unless otherwise specified, travel is assumed in all directions
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePointAndDirection.#ctor(Microsoft.MapPoint.Data.RelativePoint)">
            <summary>
            ctor.  assumes travel is allowed in both directions
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePointAndDirection.#ctor(Microsoft.MapPoint.Data.RelativePoint,System.Boolean,System.Boolean)">
            <summary>
            ctor. allows restricting the travel in either direction
            </summary>
            <param name="point"></param>
            <param name="fromToAllowed"></param>
            <param name="toFromAllowed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePointAndDirection.#ctor(Microsoft.MapPoint.Data.RelativePointAndDirection,System.Boolean,System.Boolean)">
            <summary>
            ctor.  copies and applies new direction restrictions
            </summary>
            <param name="original"></param>
            <param name="fromToAllowed"></param>
            <param name="toFromAllowed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePointAndDirection.Equals(System.Object)">
            <summary>
            object.Equals override
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RelativePointAndDirection.GetHashCode">
            <summary>
            object.GetHashCode override
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePointAndDirection.FromToAllowed">
            <summary>
            If travel is allowed from this point towards the 'to' end of the primitive
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePointAndDirection.ToFromAllowed">
            <summary>
            If travel is allowed from this point towards the 'from' end of the primitive
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RelativePointAndDirection.Point">
            <summary>
            The RelativePoint.  readonly
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SegmentParity">
            <summary>
            Indicates the Parity of a line; odd, even or both, that a specific feature is associated with.  Used in AddressRange classes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.SegmentParity.Mixed">
            <summary>
            The feature has either odd or even Parity.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.SegmentParity.Odd">
            <summary>
            The feature has odd Parity. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.SegmentParity.Even">
            <summary>
            The feature has even Parity.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SegmentSide">
            <summary>
            Indicates which side of a line, if any, a specific feature is associated with.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.SegmentSide.Both">
            <summary>
            The feature affects either left or right side of the segment, from the perspective 
            taken from the native direction of the curve or derived linear geometry.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.SegmentSide.Left">
            <summary>
            The feature affects only the left side of the segment, from the perspective taken 
            from the native direction of the curve or derived linear geometry.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.SegmentSide.Right">
            <summary>
            The feature affects only the right side of the segment, from the perspective taken 
            from the native direction of the curve or derived linear geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RoutePath">
            <summary>
            Class that abstracts a list of connected RelativeLines which trace a route
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RoutePath.pathPrimitives">
            <summary>
            An ordered collection of keys plus direction that describe the route
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RoutePath.IdMapping">
            <summary>
            The mapping of PrimitiveIdMappingKeys to actual Primitives.
            Use keys from RoutePathPrimitive.Key
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetEdge(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>
            This method gets the edge associated with the given key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetPrimitiveIdAt(System.Int32)">
            <summary>
            Get the primitive id for the primitive at the specified position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetEdgeAt(System.Int32)">
            <summary>
            Provides random access to an Edge in the path
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetEdgeAt(System.Int32,System.Double@,System.Double@)">
            <summary>
            Provides random access to an Edge in the path
            </summary>
            <param name="index"></param>
            <param name="fromFraction"></param>
            <param name="toFraction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetSpatialExtent(System.Int32,System.Int32)">
            <summary>
            Gets the approximate spatial extent of a section of this path.
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetRelativeLines(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions,System.Int32)">
            <summary>
            Enumerates over the RelativeLines in this path.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="primitiveResultOptions"></param>
            <param name="firstIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetRelativeLineAt(System.Int32,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Data.PrimitiveResultOptions)">
            <summary>
            Provides random access to the RelativeLines in the path.
            </summary>
            <param name="index"></param>
            <param name="coordinateReferenceSystem"></param>
            <param name="primitiveResultOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetFractionsAt(System.Int32,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="fromFraction"></param>
            <param name="toFraction"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.GetRoutePathPrimitiveAt(System.Int32)">
            <summary>
            Returns the RoutePathPrimitive (a structure describing the primitive Key, to be used
            with IdMapping), a direction and a side.
            Most RoutePathPrimitives in a RoutePath are traversed in their entirety; the exceptions
            being the beginning and end.  Use GetFractionsAt to get those parts.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.#ctor(Microsoft.MapPoint.Data.PrimitiveIdMapping,Microsoft.MapPoint.Data.RoutePathPrimitiveCollection,System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a new RoutePath
            </summary>
            <param name="idMapping"></param>
            <param name="pathPrimitives"></param>
            <param name="startFraction"></param>
            <param name="endFraction"></param>
            <param name="cost"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePath.#ctor(Microsoft.MapPoint.Data.PrimitiveIdMapping,Microsoft.MapPoint.Data.RoutePathPrimitiveCollection,System.Double,System.Double)">
            <summary>
            Constructs a new RoutePath
            </summary>
            <param name="idMapping"></param>
            <param name="pathPrimitives"></param>
            <param name="startFraction"></param>
            <param name="endFraction"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RoutePath.PrimitiveCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.MapPoint.Data.RoutePath.Cost">
            <summary>
            Gets the cost.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.RoutePathPrimitive">
            <summary>
            A simple struct that encapsulates a Primitive Key (obtained from a PrimitiveIdMapping),
            a direction and a side.  A collection of these are used to build a route.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RoutePathPrimitive.Key">
            <summary>
            The key to feed into the owning PrimitiveIdMapping to get the actual Primitive
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RoutePathPrimitive.Forwards">
            <summary>
            True iff traversal goes from the From node to the To Node.  (or from the 0th
            point in the polyline to the last)
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.RoutePathPrimitive.SegmentSide">
            <summary>
            Which side of the Primitive to travel on
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitive.#ctor(Microsoft.MapPoint.Data.PrimitiveIdMappingKey)">
            <summary>Default constructor surrogate:  the key is always set to PrimitiveIdMappingKey.Invalid</summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitive.#ctor(Microsoft.MapPoint.Data.PrimitiveIdMappingKey,System.Boolean,Microsoft.MapPoint.Data.SegmentSide)">
            <summary>
            Constructor
            </summary>
            <param name="key"></param>
            <param name="forwards"></param>
            <param name="segmentSide"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitive.Equals(System.Object)">
            <summary>
            Compares obj to this struct and returns true if they are equal, false otherwise.
            We choose to override the default implementation because reflection is computationally 
            expensive.  Note: this implementation also uses reflection, but not in all cases.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitive.op_Equality(Microsoft.MapPoint.Data.RoutePathPrimitive,Microsoft.MapPoint.Data.RoutePathPrimitive)">
            <summary>
            Tests for equality between two RoutePathPrimitive
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitive.op_Inequality(Microsoft.MapPoint.Data.RoutePathPrimitive,Microsoft.MapPoint.Data.RoutePathPrimitive)">
            <summary>
            Tests for inequality between two RoutePathPrimitive
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitive.Equals(Microsoft.MapPoint.Data.RoutePathPrimitive)">
            <summary>
            Compares routePathPrimitive to this struct and returns true if they are equal, false otherwise.
            </summary>
            <param name="routePathPrimitive">The struct to compare to this</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.RoutePathPrimitive.GetHashCode">
            <summary>
            Returns an int hashcode for this struct.
            Note: if you override Equals without overriding GetHashCode() you get a build warning-as-error.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.ShieldName">
            <summary>
            Encapsulates the name a street shield.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ShieldName.#ctor(Microsoft.MapPoint.Data.NameRole,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.ShieldName"/> class.
            </summary>
            <param name="nameRole"></param>
            <param name="numeric"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ShieldName.#ctor(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.ShieldName"/> class.
            </summary>
            <param name="cultureInfo"></param>
            <param name="nameRole"></param>
            <param name="numeric"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.ShieldName.#ctor(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.ShieldName"/> class.
            </summary>
            <param name="cultureInfo"></param>
            <param name="nameRole"></param>
            <param name="numeric"></param>
            <param name="prefix"></param>
            <param name="directional"></param>
            <param name="modifier"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ShieldName.Numeric">
            <summary>
            Gets the numeric part of the shield (which is not necessarily numeric).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ShieldName.Prefix">
            <summary>
            Gets the prefix of the shield (ie., "I-", "SR-", etc).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ShieldName.Directional">
            <summary>
            Gets the directional of the shield (ie., "-W", "-E", etc).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ShieldName.Modifier">
            <summary>
            Gets the modifier for the shield (ie., "Bus", etc).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ShieldName.FullName">
            <summary>
            Gets the entire name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ShieldName.BaseName">
            <summary>
            Gets very minimal version of the name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.ShieldName.MapName">
            <summary>
            Gets a map-displayable name.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Signpost">
            <summary>
            Sign Posts.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Signpost.CompareDestination(Microsoft.MapPoint.Data.PrimitiveId)">
            <summary>
            
            </summary>
            <param name="destinationPrimitiveId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Signpost.ExitNumber">
            <summary>
            ExitNumber
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Signpost.BranchRouteId">
            <summary>
            BranchRouteId
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Signpost.BranchRouteDirection">
            <summary>
            BranchRouteDirection
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Signpost.SignTextType">
            <summary>
            TextType
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Signpost.TowardRouteId">
            <summary>
            TowardRouteId
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Signpost.SignText">
            <summary>
            SignText
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Signpost.DirectionType">
            <summary>
            Travel Direction.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.North">
            <summary>
            North
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.Northwest">
            <summary>
            NorthWest
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.Northeast">
            <summary>
            NorthEast
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.South">
            <summary>
            South
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.Southwest">
            <summary>
            SouthWest
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.Southeast">
            <summary>
            SouthEast
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.East">
            <summary>
            East
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.DirectionType.West">
            <summary>
            West
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Signpost.TextType">
            <summary>
            Travel Direction.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.TextType.None">
            <summary>
            Toward
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.TextType.Toward">
            <summary>
            Toward
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Signpost.TextType.Branch">
            <summary>
            Branch
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SimplifiedDataSource">
            <summary>
            A simplified DataSource.  Some advanced functions are removed and abstract/virtual functions are stripped down.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.#ctor(System.Guid)">
            <summary>
            Create this datasource with a simple ontology.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.CreateDataSourceStorageGroup(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Storage groups are not implemented.
            </summary>
            <param name="rootEntityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.PurgeStorageGroupFromStore(Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Storage groups are not implemented.
            </summary>
            <param name="storageGroup"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.UpdatePrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveIdSpecificationPair[],System.Int32[],System.String,System.Boolean)">
            <summary>
            Updates are not implemented.
            </summary>
            <param name="primitiveIdSpecificationPairs"></param>
            <param name="bucketIds"></param>
            <param name="primitiveIdSpecificationPairsArgumentName"></param>
            <param name="isArgumentIndexed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.UpdateBucketsInternal(Microsoft.MapPoint.Data.PrimitiveId[],System.Int32[],System.String,System.Boolean)">
            <summary>
            Updates are not implemented.
            </summary>
            <param name="primitiveIds"></param>
            <param name="bucketIds"></param>
            <param name="primitiveIdsArgumentName"></param>
            <param name="isArgumentIndexed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.LoadCountsFromStore">
            <summary>
            Counts are not implemented.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SetEntityCountInStore(System.String,System.Int32)">
            <summary>
            Counts are not implemented.
            </summary>
            <param name="entityTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SetPrimitiveCountInStore(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Counts are not implemented.
            </summary>
            <param name="storageGroup"></param>
            <param name="primitiveTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SetRelationshipCountInStore(Microsoft.MapPoint.Data.StorageGroup,System.String,System.Int32)">
            <summary>
            Counts are not implemented.
            </summary>
            <param name="storageGroup"></param>
            <param name="relationshipTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.LoadEntityAuthorityVersionInternal">
            <summary>
            Persistence is not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SaveEntityAuthorityVersionInternal(System.Version)">
            <summary>
            Persistence is not implemented.
            </summary>
            <param name="entityAuthorityVersion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SaveDataSourceVersionInternal(System.Version)">
            <summary>
            Persistence is not implemented.
            </summary>
            <param name="dataSourceVersion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.LoadEntityAuthorityDescriptionInternal">
            <summary>
            Persistence is not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SaveEntityAuthorityDescriptionInternal(System.String)">
            <summary>
            Persistence is not implemented.
            </summary>
            <param name="entityAuthorityDescription"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SaveEntityAuthorityGuidInternal(System.Guid)">
            <summary>
            Persistence is not implemented.
            </summary>
            <param name="entityAuthorityGuid"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.LoadDataSourceDescriptionInternal">
            <summary>
            Persistence is not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SaveDataSourceDescriptionInternal(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Persistence is not implemented.
            </summary>
            <param name="dataSourceDescription"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SaveDataSourceKeyNameInternal(System.String)">
            <summary>
            Persistence is not implemented.
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.LoadDataSourceNamesInternal">
            <summary>
            Persistence is not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.SaveDataSourceNamesInternal(Microsoft.MapPoint.Data.CultureInfoToStringLookup)">
            <summary>
            Persistence is not implemented.
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.AddEntityTypeStorageGroupMapInternal(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Storage groups are not implemented.
            </summary>
            <param name="containingStorageGroup"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.GetNewPrimitiveIdMapping">
            <summary>
            PrimitiveId Mappings are not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.DeserializePrimitiveId(System.Byte[])">
            <summary>
            PrimitiveId serialization is not implemented
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.ValidateEntityIdInternal(System.Int64)">
            <summary>
            Validation is not implemented.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.DeleteEntityId(System.Int64)">
            <summary>
            This particular method is special case and is not implemented.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.DeletePrimitivesByEntityId(System.String,Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Simplify the interface.
            </summary>
            <param name="argumentName"></param>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.DeletePrimitivesByEntityId(Microsoft.MapPoint.Data.EntityId)">
            <summary>
            Implement this to delete primitives by their entity.
            </summary>
            <param name="entityId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.AddPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpecification[],System.Int32[],System.Double,System.Double,System.String,System.Boolean)">
            <summary>
            Simplify the interface.
            </summary>
            <param name="primitiveSpecifications"></param>
            <param name="bucketIds"></param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <param name="primitiveSpecificationsArgumentName"></param>
            <param name="isArgumentIndexed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.AddPrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveSpecification[],System.Int32[],System.Double,System.Double)">
            <summary>
            Implement this to add primitives to the datasource.
            </summary>
            <param name="primitiveSpecifications"></param>
            <param name="bucketIds"></param>
            <param name="minScaleDenominator"></param>
            <param name="maxScaleDenominator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.DeletePrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveId[],System.String,System.Boolean)">
            <summary>
            Simplify the interface.
            </summary>
            <param name="primitiveIds"></param>
            <param name="primitiveIdsArgumentName"></param>
            <param name="isArgumentIndexed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.DeletePrimitivesInternal(Microsoft.MapPoint.Data.PrimitiveId[])">
            <summary>
            Implement this to delete primitives from the datasource.
            </summary>
            <param name="primitiveIds"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplifiedDataSource.CreateEntityInternal(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Handle entityid.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SimplePrimitive">
            <summary>
            A simple implementation of the Primitive class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitive.#ctor(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.PrimitiveSpecification,System.Double,System.Double)">
            <summary>
            Ctor.
            </summary>
            <param name="owner"></param>
            <param name="spec"></param>
            <param name="minScale"></param>
            <param name="maxScale"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitive.#ctor(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.PrimitiveSpecification)">
            <summary>
            Ctor.
            </summary>
            <param name="owner"></param>
            <param name="spec"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitive.GetPrimitiveId">
            <summary>
            Gets a unique id for this primitive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitive.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitive.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitive.Equals(Microsoft.MapPoint.Data.SimplePrimitive)">
            <summary>
            Equals
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SimplePrimitive.MaximumScale">
            <summary>
            The maximum scale level that this primitive is valid at.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SimplePrimitive.MinimumScale">
            <summary>
            The minimum scale level that this primitive is valid at.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SimplePrimitiveId">
            <summary>
            A simple implementation of PrimitiveId.  A primitive id should be unique, even across datasources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitiveId.#ctor(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitiveId.CalculateAdditionalSizeInBytes">
            <summary>
            Used by caches to determine pressure.  This is size of fields, not including the object itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitiveId.Equals(System.Object)">
            <summary>
            Equals.  Should be unique even across datasources.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitiveId.Equals(Microsoft.MapPoint.Data.SimplePrimitiveId)">
            <summary>
            Equals.  Should be unique within this datasource and even across datasources.
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitiveId.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitiveId.ToString">
            <summary>
            ToString.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimplePrimitiveId.Serialize(Microsoft.MapPoint.Data.DataSource)">
            <summary>
            PrimitiveId serialization not implemented in this DataSource
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SimpleQueryMatcher">
            <summary>
            Given a query specification, tells you whether an individual item matches the query.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.#ctor(Microsoft.MapPoint.Data.SpatialQuery)">
            <summary>
            Create a matcher for a primitive spatial query.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.#ctor(Microsoft.MapPoint.Data.EntityNameQuery)">
            <summary>
            Create a matcher for a name query.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.Matches(Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Does this primitive match the filter?
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.Matches(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Does this entity match the filter?  Does not account for any spatial component of the filter.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.Matches(Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Does this geometry match the filter?  Does not account for any scale component of the filter, only the direct spatial.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.Matches(Microsoft.MapPoint.Data.AbstractName,System.Double@)">
            <summary>
            Does this name match the filter?  Matches against BaseName.
            </summary>
            <param name="name"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.MatchesFullName(Microsoft.MapPoint.Data.AbstractName,System.Double@)">
            <summary>
            Does this name match the filter?  Matches agaisnt FullName.
            </summary>
            <param name="name"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.EntityMatches(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Does the entity match the supplied filters?
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.NameMatches(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Does the entity match the name filter?
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.PrimitiveMatches(Microsoft.MapPoint.Data.Primitive)">
            <summary>
            Does the primitive match the supplied filters?
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleQueryMatcher.GeometryMatches(Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Does the geometry match the supplied filters?
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SpatialExtent">
            <summary>
            Indicates the spatial extent through a several different mechanisms (see 
            logical model).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SpatialExtent.#ctor(Microsoft.MapPoint.Data.EntityIdCollection,Microsoft.MapPoint.Geometry.AbstractGeometryCollection,Microsoft.MapPoint.Data.PrimitiveIdCollection)">
            <summary>
            Cstor.
            </summary>
            <param name="entities">Can be null.</param>
            <param name="footprint">Can be null.</param>
            <param name="primitives">Can be null.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialExtent.EntityExtent">
            <summary>
            Gets the entity extent.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialExtent.Footprint">
            <summary>
            Gets the footprint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SpatialExtent.PrimitiveExtent">
            <summary>
            Gets the primitives extent.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.StorageGroup">
            <summary>
            Certain EntityTypes are marked as a “StorageGroup”.  In the example below, 
            each color corresponds to a different storageGroup. A storageGroup continues 
            downward in the EntityType tree until we reach a child which also 
            has its storageGroup bit set.  StorageGroups have a restriction that only EntityTypes 
            which are StorageGroups can add new PrimitiveTypes, because otherwise pairing 
            of EntityType,PrimitiveType becomes problematic – we don’t want an 
            EntityType somewhere within the hierarchy for that StorageGroup adding a new 
            PrimitiveType, because it would change how we chunk the data for the 
            entire StorageGroup.
            A StorageGroup is identified by one, and only one, EntityType KeyName.  It 
            implicitly contains all the StorageGroup’s children.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.StorageGroup.primitiveCountByTypeKeyName">
            <summary>
            The counts of primitives by type in this group
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.StorageGroup.relationshipCountByTypeKeyName">
            <summary>
            The counts of relationships by type in this group
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.#ctor(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Cstor.
            A StorageGroup is the root entity type and implicitly all its children(until a child 
            has the StorageGroup bit set).
            </summary>
            <param name="rootEntityType">The root entityType of this StorageGroup.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.GetEntityCount(Microsoft.MapPoint.Data.DataSource,Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Recursive routine to count the number of entities from the 
            specified Entity Type down through any of its children that
            are part of this Storage Group.
            </summary>
            <param name="dataSource"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.GetEntityCount">
            <summary>
            Gets the number of Entities that exist in this Storage Group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.GetPrimitiveCount(System.String)">
            <summary>
            Gets the number of Primitives of a specified type.
            </summary>
            <param name="primitiveTypeKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.GetRelationshipCount(System.String)">
            <summary>
            Gets the number of Relationships of a specified type.
            </summary>
            <param name="relationshipTypeKeyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.SetPrimitiveCount(System.String,System.Int32)">
            <summary>
            Called by the Data Source to update the number of Primitives in this group.
            </summary>
            <param name="primitiveTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.SetRelationshipCount(System.String,System.Int32)">
            <summary>
            Called by the Data Source to update the number of Relationships in this group.
            </summary>
            <param name="relationshipTypeKeyName"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.SetRootEntityType(Microsoft.MapPoint.Data.EntityType)">
            <summary>
            Reset the instance of the root type after an ontology change.  This cannot be used
            to change the type for other purposes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.DisconnectEntity(Microsoft.MapPoint.Data.Entity)">
            <summary>
            Mark an entity as disconnected.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.op_LessThan(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Overloads the less-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.op_GreaterThan(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Overloads the greater-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.op_LessThanOrEqual(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Overloads the less-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.op_GreaterThanOrEqual(Microsoft.MapPoint.Data.StorageGroup,Microsoft.MapPoint.Data.StorageGroup)">
            <summary>
            Overloads the greater-than-or-equal operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.GetHashCode">
            <summary>
            Gets the hash code for the StorageGroup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.Equals(System.Object)">
            <summary>
            Gets whether this object equals another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StorageGroup.CompareTo(System.Object)">
            <summary>
            IComparable implementation. 
            This needs to be implemented in derived classes since they have to 
            implement IComparable.		/// </summary>
            <param name="obj">Object to which to compare.</param>
            <returns>-1, 0, or 1 (see IComparable docs)</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StorageGroup.PreComputedHashCode">
            <summary>
            Gets or sets a pre-computed hash code for the storage group
            If you wish, you can override the default hash
            code if you have a better way of hashing.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StorageGroup.RootEntityType">
            <summary>
            Gets the root Entity Type of this Storage Group.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StorageGroup.KeyName">
            <summary>
            Gets the keyname of the StorageGroup's root Entity Type.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.StreetName">
            <summary>
            Encapsulates the name of a street.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetName.#ctor(Microsoft.MapPoint.Data.NameRole,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.StreetName"/> class.
            </summary>
            <param name="nameRole"></param>
            <param name="streetBody"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetName.#ctor(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.StreetName"/> class.
            </summary>
            <param name="culture"></param>
            <param name="nameRole"></param>
            <param name="streetBody"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetName.#ctor(System.Globalization.CultureInfo,Microsoft.MapPoint.Data.NameRole,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Data.StreetName"/> class.
            </summary>
            <param name="cultureInfo"></param>
            <param name="nameRole"></param>
            <param name="streetBody"></param>
            <param name="streetType"></param>
            <param name="directionalPrefix"></param>
            <param name="directionalSuffix"></param>
            <param name="attachToBody"></param>
            <param name="precedeBody"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.StreetName.ParseStreetName(System.String,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Given a string and indices, returns a StreetName object using the invariant culture and
            primary name role.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.StreetBody">
            <summary>
            Gets streetBody.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.StreetType">
            <summary>
            Gets streetType.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.DirectionalPrefix">
            <summary>
            Gets directionalPrefix.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.DirectionalSuffix">
            <summary>
            Gets directionalSuffix.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.AttachToBody">
            <summary>
            Gets attachToBody.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.PrecedeBody">
            <summary>
            Gets precedeBody.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.BaseName">
            <summary>
            Gets very minimal version of the name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.FullName">
            <summary>
            Gets the entire name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.StreetName.MapName">
            <summary>
            Gets a map-displayable name.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DirectedPrimitive">
            <summary>
            Immutable value type which encapsulates a Primitive and a direction of travel along that Primitive (oriented as the geometry).
            Really only meaningful for linear geometry types.  Used to express routes
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DirectedPrimitive.#ctor(Microsoft.MapPoint.Data.PrimitiveId,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="primitiveId">A PrimitiveId</param>
            <param name="forwards">true iff travel "From-To" - ie the same as the geometry. False otherwise</param>
            <param name="virtualPrimitive">true iff this Primitive is a construct added for performance only and does not represent
            real-world geometry</param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DirectedPrimitive.#ctor(Microsoft.MapPoint.Data.PrimitiveId,System.Boolean)">
            <summary>
            Constructor.   Assumes a 'real-world' Primitive
            </summary>
            <param name="primitiveId"></param>
            <param name="forwards"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DirectedPrimitive.PrimitiveId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DirectedPrimitive.Forwards">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DirectedPrimitive.IsVirtualPrimitive">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.EdgeDirection">
            <summary>
            Direction of edge
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.EdgeDirection.From">
            <summary>
            Edge is going to the From node
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.EdgeDirection.To">
            <summary>
            Edge is going to the To node
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TertiaryType">
            <summary>
            Attributes containing 3 valid states.
            </summary>
            
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TertiaryType.False">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TertiaryType.True">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TertiaryType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.DividerType">
            <summary>
            DividerType.
            </summary>
            
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.DividerType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.DividerType.OnStartingNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.DividerType.OnEndingNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.DividerType.OnLinkOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.DividerType.OnBothNodes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.DividerType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.RoadClassificationType">
            <summary>
            RoadClassification.
            </summary>
            
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.Ramp">
            <summary>
            Ramp
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.LimitedAccessHighway">
            <summary>
            Controlled Access Highway
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.Highway">
            <summary>
            Highway
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.MajorRoad">
            <summary>
            Major Road
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.Arterial">
            <summary>
            Arterial
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.Street">
            <summary>
            Street
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.Ferry">
            <summary>
            Ferry
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.Transit">
            <summary>
            Transit line
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.RoadClassificationType.WalkingPath">
            <summary>
            Walking path
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.TimeTable">
            <summary>
            The TimeTable class defines the abstract interface for all time tables.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.TimeTable.UnknownStartTime">
            <summary>
            Represents an unknown start time.  This field is readonly.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.TimeTable.GetNextDeparture(System.DateTime)">
            <summary>
            Gets the next departure time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.SimpleTimeTable">
            <summary>
            The SimpleTimeTable class represents the simplest form of time tables:
            start time, end time, and departure frequency.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleTimeTable.#ctor(System.TimeSpan)">
            <summary>
            Creates a simple time table.
            </summary>
            <param name="period"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleTimeTable.#ctor(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Creates a simple time table.
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="period"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleTimeTable.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a simple time table.
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="period"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.SimpleTimeTable.GetNextDeparture(System.DateTime)">
            <summary>
            Gets the next departure time after the specified time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SimpleTimeTable.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SimpleTimeTable.EndTime">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.SimpleTimeTable.Period">
            <summary>
            Gets the period.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.DetailedTimeTable">
            <summary>
            The DetailedTimeTable represents the most detailed of time tables:
            each departure is listed explicitly.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DetailedTimeTable.#ctor(System.Collections.Generic.List{System.TimeSpan})">
            <summary>
            Creates a new DetailedTimeTable.
            </summary>
            <param name="times"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.DetailedTimeTable.GetNextDeparture(System.DateTime)">
            <summary>
            Gets the next departure after the specified time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.DetailedTimeTable.Times">
            <summary>
            Gets the list of departure times.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.FederatedTimeTable">
            <summary>
            The FederatedTimeTable class supports a combination of time tables that
            can be used together.  This enables multiple periods and periods of
            detailed schedules.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FederatedTimeTable.#ctor(System.Collections.Generic.List{Microsoft.MapPoint.Data.TimeTable})">
            <summary>
            Creates a new FederatedTimeTable.
            </summary>
            <param name="timeTables"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.FederatedTimeTable.GetNextDeparture(System.DateTime)">
            <summary>
            Gets the next departure after the specified time.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TurnRestriction">
            <summary>
            Represents the base class for a turn restriction.  A collection of these exist
            on an Edge. The most common case is the SimpleTurnRestriction, less common
            instances are provided by sub-class PolyvalentTurnRestriction, Gate and TollBooth.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.turnRestrictionTimeModifier">
            <summary>
            Time Modifier for this Turn Restriction. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionId">
            <summary>
            Unique Id for Turn Restriction.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedVehicles">
            <summary>
            The restricted vehicles for this Turn Restriction.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionNode">
            <summary>
            Node at which restriction applies
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionConditionType">
            <summary>
            The condition Type.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionType">
            <summary>
            The turn restriction type, Toll Booth, Gate or Turn Restriction.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskAuto">
            <summary>
            Restricted Mask Autos.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskBus">
            <summary>
            Restricted Mask Buses.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskTaxi">
            <summary>
            Restricted Taxi Trucks.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskCarpool">
            <summary>
            Restricted Mask Carpools.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskPedestrian">
            <summary>
            Restricted Mask Pedestrians.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskTruck">
            <summary>
            Restricted Mask Trucks.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskDeliveryVehicle">
            <summary>
            Restricted Mask delivery Vehicles.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictedMaskEmergencyVehicle">
            <summary>
            Restricted Mask Emergency Vehicles.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.TurnRestriction.#ctor(Microsoft.MapPoint.Data.FlagsEnumValue,Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier,System.Int32,Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionType,Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType,Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionNodeType)">
            <summary>
            Constructor used by build system only.
            </summary>
            <param name="restrictedVehicles"></param>
            <param name="turnRestrictionTimeModifier"></param>
            <param name="turnRestrictionId"></param>
            <param name="type"></param>
            <param name="conditionType"></param>
            <param name="restrictionNode"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.TurnRestriction.CalculateSizeInBytes">
            <summary>
            Calculates the number of bytes this object consumes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.TurnRestriction.CompareTo(Microsoft.MapPoint.Data.Topology.TurnRestriction)">
            <summary>
            A method to order turn restrictions by
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.TurnRestriction.GetViaEdges">
            <summary>
            Gets the list of via edges between the start edge and end edge.  Via edges should
            only be available when RestrictionType = PolyvalentTurnRestriction.  Returns null otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestriction.TimeModifier">
            <summary>
            Is this turn restriction time restricted?
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestriction.StartEdge">
            <summary>
            Gets the start edge of the turn restriction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestriction.EndEdge">
            <summary>
            Gets the end edge of the turn restriction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestriction.StartEdgeId">
            <summary>
            Gets the start edge of the turn restriction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestriction.EndEdgeId">
            <summary>
            Gets the end edge of the turn restriction.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionType">
            <summary>
            Type of turn restriction.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionType.Tollbooth">
            <summary>
            Toll Booth.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionType.Gate">
            <summary>
            Gate.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionType.SimpleTurnRestriction">
            <summary>
            Simple Turn Restriction.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.TurnRestrictionType.PolyvalentTurnRestriction">
            <summary>
            Poly Valent Turn Restriction.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType">
            <summary>
            Condition type.  This is NAVTEQ specific.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.Divider">
            <summary>
            Divider.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.TollBooth">
            <summary>
            Toll booth.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.GateKeyAccess">
            <summary>
            Gates
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.TurnRestrictionLegal">
            <summary>
            Regular turn restriction.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.SpecialExplication">
            <summary>
            Special explication
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.SpecialSpeedSituation">
            <summary>
            Europe: Links with Controlled Access = Y
            Continental US: Links with Controlled Access = Y and Functional Class = 1 or 2
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.VariableSpeedSign">
            <summary>
            Europe: Links with Controlled Access = Y
            Continental US: Links with Controlled Access = Y and Functional Class = 1 or 2
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.UsageFeeRequired">
            <summary>
            UK, Czech Republic, Hungary, Austria, Switzerland, and Slovak Republic only
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.ConditionType.LaneTraversal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionNodeType">
            <summary>
            Node at which Restriction applies on the StartEdge of TurnRestriction
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionNodeType.Invalid">
            <summary>
            Invalid - Do not use this property
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionNodeType.FromNode">
            <summary>
            Restriction applies to FromNode of the startedge
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionNodeType.ToNode">
            <summary>
            Restriction applies to ToNode of the startedge
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestriction.RestrictionNodeType.BothNode">
            <summary>
            Restriction applies to both fromNode and ToNode of the edge
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier">
            <summary>
            Turn restriction time modifier.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.#ctor(System.DateTime,System.DateTime,System.String,System.String,Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType)">
            <summary>
            Cosntructor.
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="dateFormat"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.CalculateSizeInBytes">
            <summary>
            Calculate size for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.StartTime">
            <summary>
            Start Time
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.EndTime">
            <summary>
            End Time
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.StartDate">
            <summary>
            Start Date
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.EndDate">
            <summary>
            End Date
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateFormat">
            <summary>
            Date Type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType">
            <summary>
            The format of the date. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.DateRange">
            <summary>
            DateRange
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.DayOfYear">
            <summary>
            DayOfYear
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.DayOfMonth">
            <summary>
            DayOfMonth
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.DayOfWeekOfMonth">
            <summary>
            DayOfWeekOfMonth
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.DayOfWeekOfYear">
            <summary>
            DayOfWeekOfYear
            </summary>
            
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.WeekOfMonth">
            <summary>
            WeekOfMonth 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.WeekOfYear">
            <summary>
            WeekOfYear
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.MonthOfYear">
            <summary>
            MonthOfYear
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.DayOfMonthOfYear">
            <summary>
            DayOfMonthOfYear
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Data.Topology.TurnRestrictionTimeModifier.DateType.DayMask">
            <summary>
            DayMask
            </summary>
        </member>
    </members>
</doc>
