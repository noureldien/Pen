<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.MapPoint.Rendering3D</name>
    </assembly>
    <members>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AsyncCloudLoader">
            <summary>
            Encapsulates an asynchronous cloud loader.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AsyncCloudLoader.#ctor(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.ICloudTileProvider)">
            <summary>
            Constructs a new instance of AsyncCloudLoader.
            </summary>
            <param name="provider">A valid implementation of ICloudTileProvider.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AsyncCloudLoader.QueueCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell)">
            <summary>
            Queues a new CloudCell to be loaded. RenderableCloud objects will asynchronously created from the description
            provided by CloudCell.
            </summary>
            <param name="cell">A CloudCell describing the RenderableCloud to be loaded.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AsyncCloudLoader.GetLoadedClouds">
            <summary>
            Gets the RenderableClouds objects (and their associated CloudCell objects) that were asynchronously loaded
            since the last time this method was called.
            </summary>
            <returns>A list of pairs of RenderableCloud and CloudCell objects.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AsyncCloudLoader.CloudLoaded(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDescription)">
            <summary>
            Builds a new renderable cloud object and adds it to the 'loaded' list.
            
            This method is a callback method called by the ICloudProvider instance when a cloud file is loaded.
            </summary>
            <param name="cell">The cloud cell associated with the new cloud object.</param>
            <param name="desc">The CloudTileDescription instance that defines the new cloud object.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AsyncCloudLoader.LoadCloud(System.Object)">
            <summary>
            Asynchronously loads a cloud description file.
            </summary>
            <param name="obj">An instance of CloudCell.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFace">
            <summary>
            Encapsulates a cloud sprite position and an id. A cloud face is used to sort indices at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFace.Id">
            <summary>
            The id representing the face position in the vertex buffer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFace.WorldPosition">
            <summary>
            The face (sprite) position in world coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileGroup">
            <summary>
            Encapsulates a list of file identifiers that are used to render a specific cloud type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileGroup.AddVariation(System.Int32,System.String[])">
            <summary>
            Adds a new list of files that can be used for a given coverage amount.
            </summary>
            <param name="coverageAmount">The coverage amount provided by the corresponding files. This should be a number between 1 and 10.</param>
            <param name="files">The list of file identifiers.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileGroup.GetVariation(System.Single)">
            <summary>
            Returns a random filename from the list of files that can be used for the given coverage amount.
            This method returns null if no file is available for the given coverage amount.
            </summary>
            <param name="coverageAmount">The cloud coverage amount.</param>
            <returns>A file identifier or null.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileGroup.Update">
            <summary>
            Updates the coverage map used by GetVariation().
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileGroup.Description">
            <summary>
            The description for this group of files.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader">
            <summary>
            Encapsulates the method that loads a CloudTileDescription object from a stream.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader.GetCloud(System.IO.Stream)">
            <summary>
            Loads a CloudTileDescription object from a stream.
            </summary>
            <param name="file">The file stream to load the CloudTileDescription object.</param>
            <returns>A new instance of CloudTileDescription or null if the stream is invalid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader.ComputeAmbientColorLookup(System.Int32,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AmbientShadingInfo[])">
            <summary>
            Computes the ambient shading lookup table, which is used to light each cloud sprite according to its height.
            </summary>
            <param name="lookupLength">The lookup table length.</param>
            <param name="info">An array of AmbientShadingInfo objects. The array must contain at least 2 elements (at 0% and 100% percent).</param>
            <returns>An array of Color values, ordered by height (from bottom to top).</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader.ReadCloudFile(System.IO.Stream,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AmbientShadingInfo[]@,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData[]@)">
            <summary>
            Reads the contents of a cloud description file.
            </summary>
            <param name="file">The cloud description file stream.</param>
            <param name="shading">An array of AmbientShadingInfo objects.</param>
            <param name="sprites">An array of SpriteData objects.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader.ReadAndVerifyTexture(System.IO.BinaryReader)">
            <summary>
            Reads the texture name referenced by the file and ensures it is supported by the engine.
            </summary>
            <param name="reader">The cloud description file reader.</param>
            <returns>True if the texture name is supported; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader.ReadAndVerifyHeader(System.IO.BinaryReader)">
            <summary>
            Reads the file header and ensures that the file version is valid.
            </summary>
            <param name="reader">The cloud description file reader.</param>
            <returns>True if the file is valid; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader.ReadAmbientShadingInfo(System.IO.BinaryReader)">
            <summary>
            Reads the ambient shading levels from the Cloud Description file.
            </summary>
            <param name="reader">The cloud description file reader.</param>
            <returns>An array of ShadingInfo objects.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileLoader.ReadSprites(System.Int32,System.IO.BinaryReader)">
            <summary>
            Reads all cloud sprites from the Cloud Description file.
            </summary>
            <param name="spriteCount">The number of sprites to read from the file.</param>
            <param name="reader">The cloud description file reader.</param>
            <returns>An array of SpriteData objects.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager">
            <summary>
            Manages all files that store all CloudTileDescription instances that are used to generate renderable clouds.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.ICloudTileProvider">
            <summary>
            Describes the interface of a class that returns a CloudTileDescription object from a CloudCell.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.ICloudTileProvider.CloudTileFromWeatherCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell)">
            <summary>
            Returns a CloudTileDescription object from a CloudCell object.
            </summary>
            <param name="cell">The CloudCell object.</param>
            <returns>A new instance of CloudTileDescription.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.ICloudTileProvider.AsyncCloudTileFromWeatherCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDelegate)">
            <summary>
            Asynchronously loads a CloudTileDescription object from a CloudCell object.
            </summary>
            <param name="cell">The CloudCell object.</param>
            <param name="desc">The delegate that is called when the CloudTileDescription object is loaded.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.ICloudTileProvider.TileLength">
            <summary>
            Gets the length of the tiles created by this provider, in meters.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.CloudTileFromWeatherCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell)">
            <summary>
            Returns a CloudTileDescription object from a CloudCell object.
            </summary>
            <param name="cell">The CloudCell object.</param>
            <returns>A new instance of CloudTileDescription.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.AsyncCloudTileFromWeatherCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDelegate)">
            <summary>
            Asynchronously loads a CloudTileDescription object from a CloudCell object.
            </summary>
            <param name="cell">The CloudCell object.</param>
            <param name="callback">The delegate that is called when the CloudTileDescription object is loaded.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.#ctor(Microsoft.MapPoint.Rendering3D.HttpManager,System.String)">
            <summary>
            Constructs a new instance of CloudFileManager.
            </summary>
            <param name="httpManager">The HttpManager instance associated with the Host object.</param>
            <param name="filePath">The directory that contains all cloud files.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.CoverageFileLoaded(System.Object,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestCompleteEventArgs)">
            <summary>
            This method is called when the cloud coverage file is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The request failed arguments.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.CoverageFileLoadFailed(System.Object,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailedEventArgs)">
            <summary>
            This method is called when the cloud coverage file fails to load.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The request failed arguments.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.GetCloud(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType,System.Single)">
            <summary>
            Gets a new instance of a CloudTileDescription object given a cloud type and a coverage amount.
            
            Multiple files may be available for a given cloud type and coverage. Each time this method is called, one of
            the available files is randomly selected. In addition, the sprites rotations are also randomly selected based
            on constraints specified by each file.
            </summary>
            <param name="cloudType">One of the CloudType enum values.</param>
            <param name="coverage">The coverage amount, between 0 and 1.0.</param>
            <returns>A new instance of CloudTileDescription or null if no corresponding cloud file is found.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.AsyncGetCloud(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDelegate)">
            <summary>
            Asynchronously loads a new instance of a CloudTileDescription object given a cloud type and a coverage amount
            specified by a CloudCell object.
            
            Multiple files may be available for a given cloud type and coverage. Each time this method is called, one of        
            the available files is randomly selected. In addition, the sprites rotations are also randomly selected based
            on constraints specified by each file.
            
            The callback is synchronously called if the file is cached by the Persistence Cache.
            </summary>
            <param name="cell">The CloudCell object containing the CloudType and coverage amount used to load the new cloud.</param>
            <param name="callback">The method that will be called when the new cloud is loaded.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.TypeFromDescription(System.String)">
            <summary>
            Gets a CloudType from a string.
            </summary>
            <param name="desc">The cloud type string.</param>
            <returns>One of the CloudType enum values.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.RequestComplete(System.Object,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestCompleteEventArgs)">
            <summary>
            This method is called when a new cloud file is succesfully loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The request event args.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.RequestFailed(System.Object,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailedEventArgs)">
            <summary>
            This method is called when a request for a new cloud file fails.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The request event args.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.ReadFile(System.IO.Stream)">
            <summary>
            Reads the coverage file from the disk. The coverage file describes which files are available for
            each cloud type and coverage amount.
            </summary>
            <param name="input">The file stream.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.ReadCloudVariations(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileGroup)">
            <summary>
            Reads the 'cloud variation' section from the coverage file.
            </summary>
            <param name="group">The CloudFileGroup instance to be populated by this method.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.Dispose">
            <summary>
            Releases all objects and pending requests.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFileManager.TileLength">
            <summary>
            Gets the length of all square tiles returned by this provider.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer">
            <summary>
            Encapsulates a cloud-specific renderer.
            
            The cloud renderer manages all resources used to render clouds, such as textures and effects. It also handles
            per-face sorting (since all cloud sprites are alpha-blended).
            
            The cloud renderer applies per-object culling while keeping the number of Draw calls as low as possible.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.MAX_TILES">
            <summary>
            The maximum number of tiles managed by the renderer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.MIN_CAMERA_POS_THRESHOLD">
            <summary>
            Minimum distance the camera must travel before the cloud sprites are resorted.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.MIN_CAMERA_ANGLE_THRESHOLD">
            <summary>
            Minimum angle the camera should turn before the cloud sprites are resorted.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.ALTITUDE_FADE_DELTA">
            <summary>
            Constant that determines the rate at which clouds are faded in and out.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.MAX_VERTICES_PER_TILE">
            <summary>
            The average maximum number of vertices per cloud tile.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.ICloudTileProvider,System.Int32)">
            <summary>
            Constructs a new instance of CloudRenderer.
            </summary>
            <param name="provider">An implementation of ICloudTileProvider.</param>
            <param name="host">A valid instance of Host.</param>
            <param name="cellCount">The maximum number of cloud cells managed by the renderer.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.AddCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell)">
            <summary>
            Adds a new cloud cell to the set of renderable clouds.
            
            This operation is completed asynchronously.
            </summary>
            <param name="cell">The new cloud cell.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.AddRenderableCloud(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud)">
            <summary>
            Adds a renderable cloud to the renderer.
            </summary>
            <param name="cell">The cloud cell that is associated with the renderable cloud.</param>
            <param name="cloud">A valid instance of RenderableCloud.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.RemoveCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell)">
            <summary>
            Removes a cloud cell from the set of renderable clouds.
            </summary>
            <param name="cell">The cloud cell to be removed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.InitializeInternalMesh">
            <summary>
            Initializes the internal mesh and associated resources (such as textures and effects) that are used to render clouds.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.GetAmbientLookupCoordinate(System.Int32,System.Drawing.Color[])">
            <summary>
            Adds the specified color array to the ambient lookup texture and returns the texture coordinate (between 0 and 1) corresponding
            to the texture row that contains the new colors.
            </summary>
            <param name="id">The id for the renderable cloud that will use this texture coordinate.</param>
            <param name="ambientColors">The color array to add to the lookup texture.</param>
            <returns>A texture coordinate.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.LoadPendingClouds">
            <summary>
            Loads all clouds loaded asynchronously during the previous frame.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.UpdateFadingAltitude">
            <summary>
            Updates the minimum altitude at which the clouds start fading out.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.ComputeCameraAlpha(System.Single,System.Single)">
            <summary>
            Computes the clouds transparency based on the current camera altitude and orientation.
            </summary>
            <param name="cameraAltitude">The current camera altitude.</param>
            <param name="cameraDot">The dot product between the camera LookAt and camera normal.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.UpdateReferencePoint(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Updates the reference point used to render the clouds.
            
            A reference point is necessary to minimize floating-point precision issues that arise when clouds
            are rendered in world coordinates (since at the surface of the earth, floating-point precision is less than 0.25).
            </summary>
            <param name="position">The current camera position.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.GetGraphicsObject(Microsoft.MapPoint.Rendering3D.State.CameraData,System.Single)">
            <summary>
            Updates and returns the graphics object that is responsible for rendering all cloud sprites.
            </summary>
            <param name="camera">The current camera.</param>
            <param name="elapsedSeconds">The elapsed number of seconds since the start of the application.</param>
            <returns>A GraphicsObject instance that can be added to a render queue.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.Dispose">
            <summary>
            Releases all resources (in system and video memory) used by the renderer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.ViewAlphaEnabled">
            <summary>
            Gets or sets whether the camera view should affect the transparency of clouds. When this property is true (and the
            camera is above the cloud layer), the clouds are fully transparent when the camera is pointing straight down. Transparency is
            reduced as the camera points towards the horizon.
            
            The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.AltitudeAlphaEnabled">
            <summary>
            Gets or sets whether the camera altitude should affect the transparency of clouds. When this property is true, the clouds
            get increasingly more transparent as the camera moves up, away from the clouds. The altitude at which clouds start fading
            out is adjusted dynamically according to the current clouds in view.
            
            When this property is false, clouds won't gradually fade out as the camera moves up. They will suddenly disappear when the
            camera is at or above 30000 meters. For performance reasons, this value cannot be changed.
            
            The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer.GlobalAlpha">
            <summary>
            Gets or sets an alpha value that is multiplied to all cloud vertices in view. If set to 0.0, the clouds will be invisible; when
            set to 1.0, the clouds opacity is unchanged.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudStep">
            <summary>
            The render step that renders 3D clouds as defined by the weather interface.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager,System.Int32,System.String)">
            <summary>
            Constructs a new instance of CloudStep.
            </summary>
            <param name="host">A valid instance of Host.</param>
            <param name="weather">The weather manager.</param>
            <param name="gridLength">The weather grid length. The grid will contain length x length tiles.</param>
            <param name="cloudManifestPath">The full path to the cloud art manifest file.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudStep.ComputeDistanceFromCamera(Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Computes the approximate distance between the clouds and the camera.
            </summary>
            <returns>The distance value in meters.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Updates the clouds.
            </summary>
            <param name="state">The current scene state.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudStep.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this object.
            </summary>
            <param name="disposing">Whether this object is being disposed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudStep.ReleaseRenderObjects">
            <summary>
            Called when the render thread is shutting down and all graphics resources must be released.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDescription">
            <summary>
            Describes a group of cloud sprites that can be converted into renderable clouds.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDescription.AMBIENT_COLOR_LOOKUP_LENGTH">
            <summary>
            The length of the ambientColors array expected by the constructor of CloudTileDescription.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDescription.#ctor(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData[],System.Drawing.Color[])">
            <summary>
            Constructs a new instance of CloudTileDescription.
            </summary>
            <param name="sprites">An array of SpriteData objects.</param>
            <param name="ambientColors">An array of Colors. The number of elements should be AMBIENT_COLOR_LOOKUP_LENGTH.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDescription.Sprites">
            <summary>
            Gets the array of sprites.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDescription.AmbientColors">
            <summary>
            Gets the list of ambient colors. The colors represent the ambient color of a cloud, in linear samples
            from its bottom to the top.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDelegate">
            <summary>
            The signature for the method that is called when a cloud tile is loaded.
            </summary>
            <param name="cell">The cloud cell describing the tile to be loaded.</param>
            <param name="desc">The new instance of CloudTileDescription.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.IndexBufferManager">
            <summary>
            Manages the creation and sorting of all indices used to render cloud sprites.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.IndexBufferManager.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject{Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex,System.UInt32},System.Int32)">
            <summary>
            Constructs a new instance of IndexBufferManager.
            </summary>
            <param name="mesh">The mesh that contains all cloud vertices and indices.</param>
            <param name="maxVertexCount">The maximum number of vertices managed by the cloud renderer.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.IndexBufferManager.SetFaces(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFace[],System.Int32)">
            <summary>
            Sets the faces that should be managed by this object.
            </summary>
            <param name="faces">An array of CloudFace objects.</param>
            <param name="faceCount">The number of valid faces in the source array.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.IndexBufferManager.Update(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Sort all faces and updates the index buffer.
            </summary>
            <param name="cameraPosition">The current camera position.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.IndexBufferManager.BuildIndexBuffer">
            <summary>
            Builds the index buffer from the list of sorted indices.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.IndexBufferManager.SortFaces">
            <summary>
            Sort all faces.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.IndexBufferManager.ComputeDistances">
            <summary>
            Computes the squared distances (to avoid a square root per face) from each face to the camera.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager">
            <summary>
            Manages the memory allocation of all vertices and faces that are used to render cloud sprites.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject{Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex,System.UInt32},System.Int32)">
            <summary>
            Constructs a new instance of BufferManager.
            </summary>
            <param name="host">A valid instance of host.</param>
            <param name="mesh">The mesh that contains all cloud vertices.</param>
            <param name="maxVertexCount">The maximum number of vertices managed by the cloud renderer.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.GetFaces(System.Int32@)">
            <summary>
            Gets an array of currently visible faces.
            </summary>
            <param name="faceCount">The number of valid faces.</param>
            <returns>A CloudFace array.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.Add(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud)">
            <summary>
            Adds a new renderable cloud to the internal mesh.
            </summary>
            <param name="cloud">A valid renderable cloud.</param>
            <returns>Whether the renderable cloud was successfully added.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.Remove(System.Int32)">
            <summary>
            Removes a renderable cloud (by id) from the internal mesh.
            </summary>
            <param name="id">The RenderableCloud id.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.FindSlot(System.Int32,System.Int32)">
            <summary>
            Finds a new slot in the cloud vertex buffer. If an existing slot is not available, a new one is returned, pointing
            to the end of the buffer.
            
            Vertices are compacted when the vertex buffer fragmentation reaches a threshold.
            </summary>
            <param name="newId">The slot id that will be associated with the returned slot id.</param>
            <param name="vertexCount">The number of vertices to be added to the vertex buffer.</param>
            <returns>A valid RenderSlot instance.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.CompactVertices">
            <summary>
            Compacts all vertices in the vertex buffer currently being referenced by used render slots.
            
            All unused space is moved to the end of the vertex buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.GetSortedRenderSlots(System.Int32@)">
            <summary>
            Returns an array of 'used slots', sorted by their position in the vertex buffer.
            </summary>
            <param name="vertexCount">The number of vertices referenced by the used slots.</param>
            <returns>An array of RenderSlot instances.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.BufferManager.GetSortedVisibleRenderSlots(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,System.Int32@)">
            <summary>
            Returns a sorted list of render slots that are currently visible by the camera.
            The render slots are sorted by their start position in the vertex buffer.
            </summary>
            <param name="projTransform">The global projection transform.</param>
            <param name="faceCount">The number of faces references by the visible render slots.</param>
            <returns>An instance of List containing the RenderSlot instances.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer">
            <summary>
            Describes a cloud layer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.#ctor(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType,System.Single,System.Single)">
            <summary>
            Constructs a new instance of CloudLayer.
            </summary>
            <param name="type">One of the CloudType enum values.</param>
            <param name="coverage">A coverage amount, between 0 and 1.</param>
            <param name="altitude">The cloud layer base altitude.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.Equals(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer)">
            <summary>
            Returns whether this instance and the one passed as a parameter have the same value.
            </summary>
            <param name="other">The other instance.</param>
            <returns>True if they are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.Equals(System.Object)">
            <summary>
            Returns whether this instance and the one passed as a parameter have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.GetHashCode">
            <summary>
            Serves as a hash function for CloudLayer objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.op_Equality(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer)">
            <summary>
            Compares the left value for equality with the right value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.op_Inequality(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer)">
            <summary>
            Compares the left value for inequality with the right value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.CloudType">
            <summary>
            Gets the cloud type.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.Coverage">
            <summary>
            Gets the cloud coverage amount as a float between 0 and 1.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer.Altitude">
            <summary>
            Gets the cloud layer base altitude.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel">
            <summary>
            Defines all cloud layer altitude levels supported by the weather engine.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel.Low">
            <summary>
            A cloud layer at low altitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel.MediumLow">
            <summary>
            A cloud layer between the low and medium layers.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel.Medium">
            <summary>
            A cloud layer at medium altitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel.MediumHigh">
            <summary>
            A cloud layer between the medium and high layers.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel.High">
            <summary>
            A cloud layer at high altitude.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType">
            <summary>
            Defines all cloud types supported by the weather system.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.None">
            <summary>
            A clear sky.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.Stratus">
            <summary>
            A stratus cloud is a cloud belonging to a class characterized by horizontal layering with a uniform base, as opposed to
            convective clouds that are as tall or taller than wide (these are termed cumulus clouds). More specifically, the term 
            stratus is used to describe flat, featureless clouds of low altitude varying in color from dark gray to nearly white.
            A "cloudy day" usually features a sky filled with stratus clouds obscuring the disk of the sun. These clouds are 
            essentially fog that is above ground level and are formed either through the lifting of morning fog or when cold air 
            moves at low altitudes over a region. These clouds do not usually bring precipitation, although drizzle may occur.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.Altostratus">
            <summary>
            Altostratus is a cloud belonging to a class characterized by a generally uniform gray sheet or layer, lighter in
            color than nimbostratus and darker than cirrostratus. The sun can be seen shining through them, and they frequently
            cover the whole sky. They are similar to lower altitude stratus clouds.
            Altostratus is caused by a large air mass that is lifted then condensed, usually by an incoming frontal system and can
            be found over wide-spread areas. Their altitude is from 6,500-20,000 feet. They are made of ice crystals.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.Nimbostratus">
            <summary>
            A Nimbostratus is a cloud of the class characterized by a formless layer that is almost uniformly dark gray; it is a 
            rain cloud of the layer type, of low altitude, usually below 8,000 ft (2,400 m) and sometimes down to 350 ft (100 m).
            Nimbostratus block a great amount of sunlight as a result of its characteristic dense structure. Nimbostratus usually 
            has a thickness of 6,500-10,000 ft (2,000-3,000 meters), but can vary from 15,000 ft (4,500 m) to 3,500 ft (1,000 m)
            in thickness. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.AnvilHead">
            <summary>
            A cumulonimbus cloud with a well-defined anvil-top shape. See also CumulonimbusIncus.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.CumulonimbusIncus">
            <summary>
            A cumulonimbus incus is a cumulonimbus cloud which has reached the level of stratospheric stability and has formed the
            characteristic flat, anvil-top shape. It can cause a supercell and then a tornado.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.CumulonimbusCalvus">
            <summary>
            Cumulonimbus calvus is a moderately tall cumulonimbus cloud which is capable of precipitation, but has not yet reached
            the height where it forms into a cumulonimbus capillatus (firbous-top) or cumulonimbus incus (anvil-top). Cumulonimbus
            calvus develops from cumulus congestus, and its further development under auspicious conditions will result in 
            cumulonimbus capillatus. Cumulonimbus calvus is characterized by distinctive (between other types of cumulonimbus cloud)
            rounded shape and relatively sharp edges of its top area, unlike cumulonimbus incus or cumulonimbus capillatus, which have
            cirriform tops. Developing cumulonimbus calvus loses sharp outlines of the top as more water droplets transform into ice 
            crystals. Strong updrafts may form pileus or thin vertical stripes protruding upwards out of the cloud. When upper part of
            the cloud freezes to greater extent and clearly visible cirriforms appears, cumulonimbus calvus turns into another species
            of cumulonimbus.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.ToweringCumulus">
            <summary>
            Any of the vertical clouds. See CumulusCongestus and Cumulonimbus clouds.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.CumulusCongestus">
            <summary>
            Cumulus congestus clouds are characteristic of unstable areas of the atmosphere which are undergoing convection. They 
            are often characterized by sharp outlines and great vertical development. Because cumulus congestus is produced by strong 
            updrafts, it is typically taller than it is wide, and cloud tops can reach 5,000 metres (15,000 ft). Cumulus congestus 
            clouds are formed by the development of cumulus mediocris generally, though they can also be formed from altocumulus 
            castellanus or stratocumulus castellanus as well.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.CumulusMediocris">
            <summary>
            Cumulus mediocris is a cloud form of the cumulus family, slightly larger in vertical development than Cumulus humilis.
            It may or may not show the cauliflower form characteristic of cumulus clouds. This cloud type does not produce precipitation,
            but may further advance into clouds such as Cumulus congestus and Cumulonimbus, which do.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.CumulusHumilis">
            <summary>
            Cumulus humilis is what is commonly referred to as "fair weather cumulus". In hot countries and over mountainous terrain
            these clouds occur at up to 6000 meters altitude, though elsewhere they are typically found lower. They are formed by 
            rising warm air that has been heated by the ground, which in turn has been heated by the sun. They have a limited depth.
            While cumulus humilis may be accompanied by other cloud types, when they appear in a clear sky, they are an indicator of
            pleasant weather for the next several hours. Though at times, these clouds collapse into stratocumulus clouds, and cover
            much of the sky.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.StratoCumulus">
            <summary>
            Stratocumulus cloud belongs to a class characterized by large dark, rounded masses, usually in groups, lines, or waves,
            the individual elements being larger than those in altocumuli, and the whole being at a lower altitude, usually below 
            2,400 m (8,000 ft). Weak convective currents create shallow cloud layers because of drier, stable air above preventing 
            continued vertical development.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.AltoCumulus">
            <summary>
            Altocumulus is a cloud belonging to a class characterized by globular masses or rolls in layers or patches, the
            individual elements being larger and darker than those of cirrocumulus and smaller than those of stratocumulus. 
            Like other cumulus clouds, altocumulus signifies convection. It is usually white or gray, and often occurs in 
            sheets or patches with wavy, rounded masses or rolls. Altocumulus often are seen preceding a cold front, and their
            presence on a warm, humid, summer morning frequently signals the development of thunderstorms later in the day.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType.Unknown">
            <summary>
            Unknown cloud type, not supported by the weather system.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex">
            <summary>
            Defines the vertex type used to render cloud sprites.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.ALTITUDE_OFFSET">
            <summary>
            The altitude offset, which is a also used by the cloud shader.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.dirCenter">
            <summary>
            Contains the direction to the cloud center. [semantic: BLEND INT FACTOR]
            
            A: [x coordinate]
            R: [y coordinate]
            G: [z coordinate]
            B: reserved for future use.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.texCoordsAndTime">
            <summary>
            Contains the cloud texture coordinates and creation time in a compressed format. [semantic: COLOR0]
            
            A: U (3 bits), V (3 bits), ambient index (upper 2 bits)
            R: ambient index (lower 8 bits)
            G: time [MSB]
            B: time [LSB]
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.altitudeAndHeight">
            <summary>
            Contais the cloud base altitude and height, in a compressed format. They are used by the vertex shader
            to compute the ambient color for a given pixel. [semantic: COLOR1]
            
            A: altitude MSB.
            R: altitude LSB.
            G: height MSB. 
            B: height LSB.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F@,Microsoft.MapPoint.Geometry.VectorMath.Vector3F@,Microsoft.MapPoint.Geometry.VectorMath.Vector3F@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new CloudVertex object.
            </summary>
            <param name="position">The sprite's center coordinate, in world space.</param>
            <param name="localPos">The vertex coordinate in local (sprite) space.</param>
            <param name="dirCenter">The direction from the cloud center to the sprite's center, in world space.</param>
            <param name="tu">The U texture coordinate.</param>
            <param name="tv">The V texture coordinate.</param>
            <param name="ambientIndex">The ambient texture V coordinate.</param>
            <param name="creationTime">The time (in seconds) this vertex was created.</param>
            <param name="cloudBaseAltitude">The cloud base altitude, in world space.</param>
            <param name="cloudHeight">The cloud height, in meters.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.Position">
            <summary>
            Gets or sets the sprite's center position, in world space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.LocalPosition">
            <summary>
            Gets or sets the sprite's position, in local (sprite) space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.Tu">
            <summary>
            Gets or sets the U texture coordinate.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.Tv">
            <summary>
            Gets or sets the V texture coordinate.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.BaseAltitude">
            <summary>
            Gets or sets the cloud base altitude, in world coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.CloudHeight">
            <summary>
            Gets or sets the cloud height, in meters.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.AmbientIndex">
            <summary>
            Gets or sets the ambient texture V coordinate.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.CreationTime">
            <summary>
            Gets or sets the time (in elapsed seconds since the start of the application) this vertex was created.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.Format">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.Stride">
            <summary>
            Gets the vertex stride.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.X">
            <summary>
            Get's the sprite center position X coordinate, in world space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.Y">
            <summary>
            Get's the sprite center position Y coordinate, in world space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex.Z">
            <summary>
            Get's the sprite center position Z coordinate, in world space.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud">
            <summary>
            Encapsulates a group of cloud vertices and colors that can be rendered by the cloud renderer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.#ctor(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex[],Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudFace[],System.Drawing.Color[])">
            <summary>
            Constructs a new instance of RenderableCloud.
            </summary>
            <param name="vertices">The cloud vertices.</param>
            <param name="faces">The cloud faces.</param>
            <param name="ambientColors">The ambient color lookup array.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.ComputeBoundingBox">
            <summary>
            Computes the AABB for this renderable cloud.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.Id">
            <summary>
            Gets this object's unique identifier.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.Vertices">
            <summary>
            Gets the cloud vertices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.Faces">
            <summary>
            Gets the cloud faces that can be used for sorting 4 vertices (6 indices) at a time.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.AmbientColors">
            <summary>
            Gets the ambient color lookup array.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.BaseAltitude">
            <summary>
            Gets the cloud base altitude, in meters.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.Height">
            <summary>
            Gets the distance between the top and the bottom of the cloud, in meters.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloud.BoundingBox">
            <summary>
            Gets the axis-aligned bounding box for this cloud.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloudBuilder">
            <summary>
            Encapsulates the method that builds a RenderableCloud object from a CloudTileDescription object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloudBuilder.Build(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudTileDescription,Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Creates a RenderableCloud object that can be rendered by the cloud renderer.
            </summary>
            <param name="cloud">The cloud description.</param>
            <param name="worldPosition">The cloud position in the world.</param>
            <returns>A new instance of RenderableCloud.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloudBuilder.BuildFaces(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData[],Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Creates the face buffer which is used for depth sorting during rendering.
            </summary>
            <param name="sprites">The cloud sprites.</param>
            <param name="transform">The local-to-world transformation matrix.</param>
            <returns>An array of CloudFace objects.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloudBuilder.BuildVertices(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData[],Microsoft.MapPoint.Rendering3D.LatLonAlt,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Creates the vertex buffer from a list of cloud sprites.
            </summary>
            <param name="sprites">The cloud sprites.</param>
            <param name="worldPosition"></param>
            <param name="transform"></param>
            <returns>An array of vertices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloudBuilder.ComputeCloudHeightAndAltitude(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData[],Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudVertex[])">
            <summary>
            Computes the base and top altitude of the clouds represented by the given group of sprites.
            </summary>
            <param name="sprites">The cloud sprites.</param>
            <param name="vertices">The cloud vertices.</param>
            <returns>A dictionary containing the minimum and maximum altitudes per cloud group.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderableCloudBuilder.ComputeShadingGroupCenters(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData[])">
            <summary>
            Computes the vectors from each shading group center to each sprite center. All sprites are updated
            with the computed vectors.
            </summary>
            <param name="sprites">The list of sprites being processed.</param>
            <returns>An array with the group center direction for each sprite.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot">
            <summary>
            Encapsulates a memory slot in the vertex buffer managed by the BufferManager.
            
            Multiple instances of RenderSlot are used by the BufferManager to control the vertex buffer memory allocation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of RenderSlot.
            </summary>
            <param name="vertexStart">The position in the vertex buffer referenced by this slot.</param>
            <param name="vertexCount">The number of vertices allocated to this slot.</param>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot.Id">
            <summary>
            The unique id used to add or remove slots from the buffer manager.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot.VertexStart">
            <summary>
            The position in the vertex buffer referenced by this slot.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot.VertexCount">
            <summary>
            The number of vertices allocated to this slot.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot.BoundingBox">
            <summary>
            The bounding box associated with the vertices referenced by this render slot.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot.CompareTo(System.Object)">
            <summary>
            Implementation of IComparable's CompareTo() method.
            </summary>
            <param name="obj">The object to compare this instance to.</param>
            <returns>-1 if smaller; 0 if equal; 1 if greater.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.RenderSlot.IsVisible(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Gets whether the bounding box referenced by this render slot is visible when transformed by the given projection matrix.
            
            This method may return false positives, but it never returns false negatives.
            </summary>
            <param name="projTransform">The projection matrix that is used to transform the bounding box.</param>
            <returns>True if the bounding box is visible; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AmbientShadingInfo">
            <summary>
            Encapusulates an ambient color and a corresponding altitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AmbientShadingInfo.HeightPercentage">
            <summary>
            The height (as a number between 0 and 1) at which the cloud ambient color is applied.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.AmbientShadingInfo.Color">
            <summary>
            The cloud ambient color.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData">
            <summary>
            Encapsulates a single sprite that is part of a group of clouds.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData.Position">
            <summary>
            The sprite position, in local coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData.Size">
            <summary>
            The sprite's size.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData.Rotation">
            <summary>
            The rotation, in radians, applied to this sprite.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData.UV1">
            <summary>
            The top-left UV texture coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData.UV2">
            <summary>
            The bottom-right UV texture coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData.ShadingGroupId">
            <summary>
            The shading group ID this sprite is part of. Each shading group (usually a section of 1-30 sprites)
            is shaded as a single unit to simulate clumps on the cloud.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SpriteData.CloudGroupId">
            <summary>
            An id that indicates the order in which the sprites should form and dissipate. Sprites with the same id
            should dissipate simultaneously. 
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell">
            <summary>
            Represents a cloud layer at a given position.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell.#ctor(Microsoft.MapPoint.Rendering3D.LatLonAlt,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudType,System.Single)">
            <summary>
            Constructs a new instance of CloudCell.
            
            Each CloudCell is assigned an unique id upon instantiation.
            </summary>
            <param name="position">The cloud cell position.</param>
            <param name="type">The cloud type.</param>
            <param name="coverage">The cloud coverage amount, between 0 and 1.0 inclusive.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell.#ctor(Microsoft.MapPoint.Rendering3D.LatLonAlt,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer)">
            <summary>
            Constructs a new instance of CloudCell.
            
            Each CloudCell is assigned an unique id upon instantiation.
            </summary>
            <param name="position">The cloud cell position.</param>
            <param name="cloud">An instance of CloudLayer describing the cloud and the current position.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell.Id">
            <summary>
            Gets the unique ID associated with this instance.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell.Position">
            <summary>
            Gets the cell position.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell.CloudType">
            <summary>
            Gets the cloud type.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell.Coverage">
            <summary>
            Gets the cloud coverage amount.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid">
            <summary>
            Manages the grid of visible weather tiles around the camera.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.MIN_TRACKING_ALTITUDE">
            <summary>
            Above this altitude the cloud grid is not updated as the camera moves.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.#ctor(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer,System.Int32,System.Single)">
            <summary>
            Constructs a new instance of WeatherGrid.
            </summary>
            <param name="weather">The weather manager.</param>
            <param name="renderer">The cloud renderer.</param>
            <param name="gridLength">The tile grid length. The grid will have length x length tiles.</param>
            <param name="tileLength">The length of each square tile, in meters.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.Update(Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Updates the grid.
            </summary>
            <param name="cameraPos">The current camera position.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.UpdateCells(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Updates the grid cells based on the current camera position.
            </summary>
            <param name="cameraPosVector">The current camera ground position, in world coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.ReleaseGrid">
            <summary>
            Releases all cells.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.TileAt(System.Int32,System.Int32)">
            <summary>
            Returns the tile at the X, Y position.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The cell at X,Y.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.InitializeGrid">
            <summary>
            Initializes the grid.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.UpdateReferenceTile(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Finds the tile that is the closest to the current camera position and set it as the new reference tile.
            </summary>
            <param name="groundCameraPos">The camera position at the ground, in world coordinates.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.InsertRowNorth">
            <summary>
            Inserts a new row of tiles to the north of the grid and removes a row of tiles from the south.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.InsertRowSouth">
            <summary>
            Inserts a new row of tiles to the south of the grid and removes a row of tiles from the north.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.InsertColumnWest">
            <summary>
            Inserts a new column of tiles to the west of the grid and removes a column of tiles from the east.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.InsertColumnEast">
            <summary>
            Inserts a new column of tiles to the east of the grid and removes a column of tiles from the west.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.GetTilePosition(System.Int32,System.Int32)">
            <summary>
            Gets the geographical position for a grid tile.
            </summary>
            <param name="x">The X grid coordinate, from west to the east.</param>
            <param name="y">The Y grid coordinate, from north to the south.</param>
            <returns>A LatLonAlt value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.ComputeLatLong(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.Single,System.Double)">
            <summary>
            Computes a new LatLonAlt position from an existing position, 
            </summary>
            <param name="initialPos">The initial geographical position.</param>
            <param name="distance">The distance from the initial position.</param>
            <param name="bear">The angle, in radians, to the new position. Zero means North.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.RegisterWeatherCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell)">
            <summary>
            Registers a weather cell.
            </summary>
            <param name="cell">The new grid cell.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.UnregisterWeatherCell(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell)">
            <summary>
            Unregisters a weather cell.
            </summary>
            <param name="cell">The cell to be removed from the grid.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.FindCloudsToBeReplaced(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer[],System.Collections.Generic.List{Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudCell}@)">
            <summary>
            Finds the cells that should be removed from the renderer given a grid cell and a new set of clouds.
            </summary>
            <param name="cell">The current cell being replaced.</param>
            <param name="newClouds">The new cloud layers returned by the weather engine.</param>
            <param name="unmodifiedClouds">The list of clouds that will remain in the renderer.</param>
            <returns>The list of cloud cells to be removed from the renderer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.FindCloudsToBeAdded(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer[])">
            <summary>
            Finds the cloud layers that are not yet being rendered by the cloud renderer.
            </summary>
            <param name="cell">The current cell being replaced.</param>
            <param name="newClouds">The list of cloud layers returned by the weather engine..</param>
            <returns>The list of cloud layers that should be added to the renderer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.RemoveBarelyVisibleCloudLayers(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer[])">
            <summary>
            Removes cloud layers according to optimization parameters.
            </summary>
            <param name="newClouds">The new set of clouds layers for a particular tile.</param>
            <returns>The filtered set of clouds layers.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.UpdateSamplePoint(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer[])">
            <summary>
            Updates a weather sample point.
            
            This method is called by the Weather manager when new data for a registered sample point is available.
            </summary>
            <param name="point">The sample point to be updated.</param>
            <param name="newClouds">The new cloud layer data.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.Release">
            <summary>
            Unbinds this WeatherGrid instance from the weather manager.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherGrid.ReferenceTile">
            <summary>
            Gets the reference tile, i.e. the tile at (or close to) the center of the cloud grid. This tile is used to compute
            when new tiles should be added or removed from the edges.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SimpleTriangulator">
            <summary>
            Encapsulates a simple triangulator that computes the value of a point based on its 3 nearest points.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SimpleTriangulator.#ctor">
            <summary>
            Constructs a new instance of SimpleTriangulator.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SimpleTriangulator.UpdatePoints(System.Collections.Generic.List{Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint},Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel)">
            <summary>
            Updates the list of points used to perform the triangulation.
            
            Only weather points with the specified cloud layer level are considered during triangulation.
            </summary>
            <param name="points">The list of all weather points.</param>
            <param name="level">The cloud level being considered during triangulation.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SimpleTriangulator.Triangulate(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint)">
            <summary>
            Computes one or more CloudLayer instances for the given sample point based on its closest 3 data points.
            </summary>
            <param name="sample">The weather sample point.</param>
            <returns>An array of CloudLayer objects.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.SimpleTriangulator.FindClosestPoints(Microsoft.MapPoint.Rendering3D.LatLon,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint@,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint@,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Finds the 3 closest points to the given position.
            </summary>
            <param name="position">The position to find the closest points.</param>
            <param name="p0">The closest weather point.</param>
            <param name="p1">The second closest weather point.</param>
            <param name="p2">The third closest weather point.</param>
            <param name="dist0">The distance between p0 and position.</param>
            <param name="dist1">The distance between p1 and position.</param>
            <param name="dist2">The distance between p2 and position.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer">
            <summary>
            Encapsulates information about the weather, such as clouds, rain and wind information.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.#ctor(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel,System.DateTime)">
            <summary>
            Constructs a new instance of WeatherLayer.
            </summary>
            <param name="cloud">A valid instance of CloudLayer.</param>
            <param name="level">One one the CloudLayerLevel enum values.</param>
            <param name="timeStamp">The time stamp associated with this layer.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.#ctor(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayer,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudLayerLevel,System.DateTime,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single)">
            <summary>
            Constructs a new instance of WeatherLayer.
            </summary>
            <param name="cloud">A valid instance of CloudLayer.</param>
            <param name="level">One one the CloudLayerLevel enum values.</param>
            <param name="timeStamp">The time stamp associated with this layer.</param>
            <param name="wind">The wind direction and speed.</param>
            <param name="rain">The amount of rain.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.Equals(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer)">
            <summary>
            Returns whether this instance and the one passed as a parameter have the same value.
            </summary>
            <param name="other">The other instance.</param>
            <returns>True if they are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.Equals(System.Object)">
            <summary>
            Returns whether this instance and the one passed as a parameter have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.GetHashCode">
            <summary>
            Serves as a hash function for WeatherLayer objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.op_Equality(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer)">
            <summary>
            Compares the left value for equality with the right value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.op_Inequality(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer)">
            <summary>
            Compares the left value for inequality with the right value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.CloudDescription">
            <summary>
            Gets the cloud description for this weather layer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.CloudLayerLevel">
            <summary>
            Gets the cloud layer level.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.TimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.Wind">
            <summary>
            Gets the wind direction and speed.
            
            The speed is defined by the vector's magnitude.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer.Rain">
            <summary>
            Gets the amount of rain associated with this weather layer.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager">
            <summary>
            Manages the 3D weather effects.
            
            The 3D cloud rendering engine renders 3D clouds and other weather effects based on the weather points
            added through AddPoint().
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Constructs a new instance of WeatherManager.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.SetWeatherString(System.String)">
            <summary>
            Sets the string to display for weather information. 
            </summary>
            <param name="weatherString"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.AddPoint(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint)">
            <summary>
            Adds a new WeatherPoint to the weather system.
            
            The weather point will be removed from the weather system only if it is removed by RemovePoint().
            </summary>
            <param name="point">The new weather point describing the weather at the current location.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.AddPoint(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint,System.Boolean)">
            <summary>
            Adds a new WeatherPoint to the weather system.
            </summary>
            <param name="point">The new weather point describing the weather at the current location.</param>
            <param name="autoRemove">Whether this point should be automatically removed by the system if the point gets farther 
            (from the camera) than the distance determined by the TrackingRadius property.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.RemovePoint(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint)">
            <summary>
            Removes a WeatherPoint from the weather system.
            </summary>
            <param name="point">The weather point to be removed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.Clear">
            <summary>
            Removes all weather points from the weather system.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.SetCloudRenderer(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.CloudRenderer)">
            <summary>
            Sets the cloud renderer associated with this instance of weather manager.
            </summary>
            <param name="renderer">A valid instance of CloudRenderer.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.RegisterSamplePoint(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint)">
            <summary>
            Registers a weather sample point. The UpdateSamplePoint event is raised when the point must be updated.
            </summary>
            <param name="point">The new weather sample point.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.UnregisterSamplePoint(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint)">
            <summary>
            Unregisters a weather sample point.
            </summary>
            <param name="point">The weather sample point.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.Reset">
            <summary>
            Resets the internal state of the weather manager.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.Update(Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Updates the internal state.
            </summary>
            <param name="cameraPos">The current camera position.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.UpdateReferencePoint(Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Updates the reference point used to remove weather points that are beyond the maximum tracking distance.
            </summary>
            <param name="cameraPos">The current camera position.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.CloudLayerCullingThreshold">
            <summary>
            Gets or sets the cloud layer culling threshold value.
            
            The weather renderer will remove any cloud layers above a cloud layer
            with a density amount greater than the amount specified by this property.
            
            Lower values may improve performance, since less clouds will be rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.MaxVisibleCloudLayers">
            <summary>
            Gets or sets the maximum number of visible (rendered) cloud layers.
            
            When cloud layers are discarded by the renderer (to meet the maximum number of layers specified by this method),
            lower cloud layers have priority over higher layers.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.ViewAlphaEnabled">
             <summary>
             Gets or sets whether the camera view should affect the transparency of clouds. When this property is true (and the
             camera is above the cloud layer), the clouds are fully transparent when the camera is pointing straight down. Transparency is
             reduced as the camera points towards the horizon.
            
             The default value is true.
             </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.AltitudeAlphaEnabled">
            <summary>
            Gets or sets whether the camera altitude should affect the transparency of clouds. When this property is true, the clouds
            get increasingly more transparent as the camera moves up, away from the clouds. The altitude at which clouds start fading
            out is adjusted dynamically according to the current clouds in view.
            
            When this property is false, clouds won't gradually fade out as the camera moves up. They will suddenly disappear when the
            camera is at or above 30000 meters. For performance reasons, this value cannot be changed.
            
            The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.GlobalAlpha">
            <summary>
            Gets or sets an alpha value that is multiplied to all cloud vertices in view. If set to 0.0, the clouds will be invisible; when
            set to 1.0, the clouds opacity is unchanged.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.TrackingRadius">
            <summary>
            Gets or sets the camera tracking radius. The default value is 250000.
            
            Weather points beyond the tracking radius may be removed by the system if they were created with autoRemove = true.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherManager.UpdateSamplePoint">
            <summary>
            This event is raised when new updates are available from a registered sample point.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPointCompare">
            <summary>
            Enum used to indicate the relative equality between two weather points.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPointCompare.Equal">
            <summary>
            This state indicates that two weather points were identical.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPointCompare.NotEqual">
            <summary>
            Indicates that two weather points are not the same.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPointCompare.FuzzyEqual">
            <summary>
            Indicates that two weatherpoints exist in the same location and cloud layer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPointCompare.Newer">
            <summary>
            Indicates that a weather point that is FuzzyEqual to another is also newer
            than the other point.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPointCompare.Older">
            <summary>
            Indicates that a weather point that is FuzzyEqual to another is also older
            than the other point.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint">
            <summary>
            Represents the weather at a given point location.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.#ctor(Microsoft.MapPoint.Rendering3D.LatLon,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherLayer)">
            <summary>
            Constructs a new instance of WeatherPoint.
            </summary>
            <param name="position">The location</param>
            <param name="layer">A valid instance of WeatherLayer.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.Equals(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint)">
            <summary>
            Returns whether this instance and the one passed as a parameter have the same value.
            </summary>
            <param name="other">The other instance.</param>
            <returns>True if they are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.Compare(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint)">
            <summary>
            Compares to weather points to determine the level of equality between them.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.Equals(System.Object)">
            <summary>
            Returns whether this instance and the one passed as a parameter have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.GetHashCode">
            <summary>
            Serves as a hash function for WeatherPoint objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.op_Equality(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint)">
            <summary>
            Compares the left value for equality with the right value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.op_Inequality(Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint,Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint)">
            <summary>
            Compares the left value for inequality with the right value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.Position">
            <summary>
            Gets this weather point's position.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherPoint.Layer">
            <summary>
            Gets the weather layer for this point.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell">
            <summary>
            Encapsulates a weather cell that is managed by an instance of WeatherGrid.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint">
            <summary>
            Represents the weather at a given point.
            
            Implementations of this abstract class may be managed by an instance of WeatherManager when registered with
            the RegisterSamplePoint() method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint.#ctor(Microsoft.MapPoint.Rendering3D.LatLon)">
            <summary>
            Constructs a new instance of WeatherSamplePoint.
            </summary>
            <param name="position">The sample position.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint.Position">
            <summary>
            Gets the sample position.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.WeatherSamplePoint.CloudLayers">
            <summary>
            Gets the cloud layers at the sample location.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell.#ctor(Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Constructs a new instance of GridCell.
            </summary>
            <param name="position">The cell's position.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell.PositionVector">
            <summary>
            Gets the cell's position in world coordinates (assuming altitude = 0).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell.CloudCells">
            <summary>
            Gets or sets the cloud cells managed by this grid cell.
            
            The cloud cells are used by the cloud rendering engine to create and render clouds.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Clouds.GridCell.CloudLayers">
            <summary>
            Gets an array of CloudLayer objects describing the CloudCells managed by this grid cell.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentFXSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentFXSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentFXSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation">
            <summary>
            Container class for constellation data.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation.#ctor(System.Int32,System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation.Name">
            <summary>
            The name of this constellation.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation.LineSegment.StartRightAscension">
            <summary>
            Gets the right ascension in radians (basically longitude on the celestial sphere).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation.LineSegment.StartDeclination">
            <summary>
            Gets the declination in radians (basically latitude on the celestial sphere).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation.LineSegment.EndRightAscension">
            <summary>
            Gets the right ascension in radians (basically longitude on the celestial sphere).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation.LineSegment.EndDeclination">
            <summary>
            Gets the declination in radians (basically latitude on the celestial sphere).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Constellation.LineSegment.PrimaryStyle">
            <summary>
            Whether this is a primary line, or a secondary line.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters">
            <summary>
            Describes an elliptical orbit.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters.SemiMajorAxis">
            <summary>
            Half of the longest diameter of the ellipse.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters.Eccentricity">
            <summary>
            The arcsine of the eccentricity is that angle at which a circle can be tilted to
            appear, in orthonormalize view, as an ellipse of the specified eccentricity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters.Inclination">
            <summary>
            The angle in degrees between the orbital plane and the ecliptic plane.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters.AscendingNode">
            <summary>
            The longitude in degrees of the point where the body crosses the ecliptic plane from south
            to north. The reference longitude is the the zero-point of right ascension, which is
            where the ecliptic and the celestial equator cross (the Vernal Equinox in the northern
            hemisphere).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters.Periapsis">
            <summary>
            The longitude in degrees where the body approaches closest to the orbited body, measured
            relative to the ascending node.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters.MeanLongitude">
            <summary>
            The position of the body, given as the angle the body would have traveled about
            the center of the orbit's auxiliary circle. This value is either a snapshot, e.g.
            at the start of a specific epoch, or is a rate of change. The value grows linearly
            from 0 to 360 with time during one orbit and starts at 0 when the body is at
            periapsis.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Planet">
            <summary>
            Represents a planet, including the name and the orbital parameters.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Planet.#ctor(System.String,Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters,Microsoft.MapPoint.Rendering3D.Atmospherics.OrbitalParameters)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Planet.Equals(Microsoft.MapPoint.Rendering3D.Atmospherics.Planet)">
            <summary>
            Returns true iff the two planets have the same name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Planet.Name">
            <summary>
            The name of the planet.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Planet.PositionAtJ2000">
            <summary>
            The orbital parameters as of noon UTC on January 1, 2000.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Planet.RatePerCentury">
            <summary>
            The rate of change of the orbital parameters, per century. Changes
            in angles are in arc-seconds per century.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.CelestialCoordinate">
            <summary>
            Represents a position in the sky relative to the position of the sun at the vernal
            equinox (northern hemisphere).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.CelestialCoordinate.RightAscension">
            <summary>
            The longitude, in radians.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.CelestialCoordinate.Declination">
            <summary>
            The latitude, in radians.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonCoordinate">
            <summary>
            Represents a position in the sky relative to an observer on the Earth.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonCoordinate.Azimuth">
            <summary>
            The direction, in radians, relative to north.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonCoordinate.Elevation">
            <summary>
            The elevation in the sky, in radians, relative to the horizon.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem">
            <summary>
            Represents the orbits of the planets, including Pluto.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Mercury">
            <summary>
            Mercury
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Venus">
            <summary>
            Venus
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Earth">
            <summary>
            Earth
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Mars">
            <summary>
            Mars
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Jupiter">
            <summary>
            Jupiter
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Saturn">
            <summary>
            Saturn
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Uranus">
            <summary>
            Uranus
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Neptune">
            <summary>
            Neptune
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Pluto">
            <summary>
            Pluto
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Sun">
            <summary>
            The Sun
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.J2000">
            <summary>
            Noon TT (Terrestrial Time) on January 1, 2000. This is the starting reference time for 
            the current epoch. Julian date 2451545.0 TT (Terrestrial Time). 11:58:55.816 UTC (Coordinated
            Universal Time).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.JulianTime(System.DateTime)">
            <summary>
            The number of days since J2000.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.GetGeocentricCelestialPosition(Microsoft.MapPoint.Rendering3D.Atmospherics.Planet,System.DateTime)">
            <summary>
            Get the right ascension and declanation of a planet at a given time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.GetApparentPosition(Microsoft.MapPoint.Rendering3D.Atmospherics.Planet,System.DateTime,Microsoft.MapPoint.Rendering3D.LatLon)">
            <summary>
            Get the azimuth and elevation of a planet at a given time and observer location.
            </summary>
            <param name="p">The planet.</param>
            <param name="time">The time.</param>
            <param name="ll">The location of the observer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.GetApparentPosition(Microsoft.MapPoint.Rendering3D.Atmospherics.CelestialCoordinate,System.DateTime,Microsoft.MapPoint.Rendering3D.LatLon)">
            <summary>
            Get the azimuth and elevation where a point at a specific right ascension and declination
            would appear at a given time and place.
            </summary>
            <param name="c">The position on the celestial sphere.</param>
            <param name="time">The time.</param>
            <param name="ll">The location of the observer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.GetOrbit(Microsoft.MapPoint.Rendering3D.Atmospherics.Planet,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the current orbital parameters of a planet.
            </summary>
            <param name="planet">The planet.</param>
            <param name="cy">The number of centuries since J2000.</param>
            <param name="a">Semi-major axis</param>
            <param name="e">Eccentricity</param>
            <param name="i">Inclination</param>
            <param name="o">Longitude of ascending node</param>
            <param name="p">Angle of periapsis</param>
            <param name="l">Mean longitude</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.TrueAnomaly(System.Double,System.Double)">
            <summary>
            Calculate the angle between the direction of periapsis and the current position
            of the body.
            </summary>
            <param name="M">The relative angle between periapsis and mean longitude.</param>
            <param name="e">Eccentricity</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.MeanSiderealTime(System.Double,System.Double)">
            <summary>
            Calculate the rotation of the Earth, relative to an observer. This differs slightly from
            the apparent rotation of the celestial sphere due to the precession of the vernal equinox
            relative to the stars.
            </summary>
            <param name="d">Number of days since J2000 (use JulianTime method to calculate).</param>
            <param name="lon">Longitude of observer, in degrees.</param>
            <returns>Returns the rotation, in radians.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.CoordToHorizon(System.Double,System.Double,System.Double,Microsoft.MapPoint.Rendering3D.LatLon,System.Double@,System.Double@)">
            <summary>
            Calculate the position in the sky of a point on the celestial sphere.
            </summary>
            <param name="d">Number of days since J2000 (use JulianTime method to calculate).</param>
            <param name="ra">Right ascension of the point.</param>
            <param name="dec">Declination of the point.</param>
            <param name="ll">Location of the observer.</param>
            <param name="alt">Elevation above the horizon, in radians.</param>
            <param name="az">Direction relative to north, in radians.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.ToDegrees(System.Double)">
            <summary>
            Convert radians to degrees.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.ToRadians(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.SolarSystem.Planets">
            <summary>
            Collection of all the bodies defined.
            </summary>
        </member>
        <member name="T:Star">
            <summary>
            Container class for star data.
            </summary>
        </member>
        <member name="F:Star.StarColors">
            <summary>
            BMV Index lookup table for star colors.
            </summary>
        </member>
        <member name="F:Star.BmvIndexCount">
            <summary>
            Number of entries in the BMV table that BmvIndex could be pointing to.
            </summary>
        </member>
        <member name="F:Star.bmvIndex">
            <summary>
            Index into the StarColors table.
            </summary>
        </member>
        <member name="M:Star.#ctor(System.Double,System.Double,System.Single,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Star"/> class.
            </summary>
            <param name="rightAscension">Right ascension in radians.</param>
            <param name="declination">Declination in radians.</param>
            <param name="apparentMagnitude">Apparent magnitude.</param>
            <param name="bmvIndex">Color lookup index.</param>
        </member>
        <member name="P:Star.RightAscension">
            <summary>
            Gets the right ascension in radians (basically longitude on the celestial sphere).
            </summary>
        </member>
        <member name="P:Star.Declination">
            <summary>
            Gets the declination in radians (basically latitude on the celesital sphere).
            </summary>
        </member>
        <member name="P:Star.ApparentMagnitude">
            <summary>
            Gets the apparent magnitude.
            Sirius = -1.47 (this value is actually rounded to -1), Faintest stars in urban = 3, Faintest stars = 6.5 
            </summary>
        </member>
        <member name="P:Star.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.RawInputControl">
            <summary>
            WinForms Control with added support for raw input API.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.RawInputControl.OnHandleCreated(System.EventArgs)">
            <summary>
            Take a snapshot of the window handle once it's been created so that we
            can access the value from the render thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.RawInputControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Adds processing for raw input.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.RawInputControl.OnMouseRawRelative(Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs)">
            <summary>
            Fires when the mouse moves, and provides raw relative mouse motion 
            regardless of whether the mouse cursor is constrained.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Control.RawInputControl.InputMessageInvalid">
            <summary>
            Raised when an invalid raw input is detected.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs">
            <summary>
            Raw mouse event args containing X and Y relative motion even if mouse cursor
            is clipped to edge of display bounds.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create RawMouseEvent args.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs.X">
            <summary>
            Relative horizontal movement of mouse, unconstrained by display bounds.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs.Y">
            <summary>
            Relative vertical movement of mouse, unconstrained by display bounds.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldEffectsManager">
            <summary>
            Provides an interface to set/change parameters or completely replace the effects used by the graphics engine to
            render the terrain and world objects (buildings). 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldEffectsManager.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Creates a new instance of WorldEffectManager.
            </summary>
            <param name="host">A valid instance of Host.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldEffectsManager.Update(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the terrain and world object effects.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldEffectsManager.OnEffectChanged(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect)">
            <summary>
            This event is raised when any of the files containing the effects is modified.
            </summary>
            <param name="sender">The effect which had its underlying file updated.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldEffectsManager.TerrainEffect">
            <summary>
            Gets or sets the effect being used to render the terrain.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldEffectsManager.WorldObjectEffect">
            <summary>
            Gets or sets the effect being used to render the world objects.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep">
            <summary>
            The render step that renders the sky using a physically-modeled atmospheric scattering algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Constructs a new instance of AtmosphereStep.
            </summary>
            <param name="host">A valid instance of Host.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep.GenerateSkyGeometry">
            <summary>
            Creates the shell around the globe used to render the sky.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Updates the atmosphere.
            </summary>
            <param name="state">The current scene state.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep.ReleaseRenderObjects">
            <summary>
            Called when the render thread is shutting down and all graphics resources must be released.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this step.
            </summary>
            <param name="disposing">Whether this step is being disposed.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep.Haze">
            <summary>
            Gets or sets the atmospheric haze. This value is a number between 1 and 1000.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.AtmosphereStep.Exposure">
            <summary>
            Gets or sets the lens exposure used to render the sky. The default value is 2.0.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager">
            <summary>
            Manages all objects associated with environmental effects such as the sky, clouds and the sun.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Constructs a new instance of EnvironmentManager.
            </summary>
            <param name="host">A valid instance of Host.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.EnableWeatherRendering">
            <summary>
            Enables all 3D weather steps.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.UpdateHorizonAndSunColor(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticCameraSnapshot)">
            <summary>
            Updates the sun color (the global directional light color) and the horizon color (fog color) given the current camera position.
            </summary>
            <param name="camera">The current camera position.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.ColorFromVector(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Computes a Color value given a vector representing a color value.
            </summary>
            <param name="vector">The vector containing the floating-point color components.</param>
            <returns>An instance of Color.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.DisableWeatherRendering">
            <summary>
            Disables all 3D weather steps.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.ToggleSkyStep">
            <summary>
            Toggles the current sky step.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.HardwareCapabilitiesChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the step used to render the sky when hardware capabilities changes.
            </summary>
            <param name="sender">The object sender.</param>
            <param name="e">The eventargs.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.ShadowsEnabled">
            <summary>
            Gets or sets whether shadows should be rendered.  If <see cref="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsShadowRenderingSupported"/> is false,
            shadows will not be rendered, but this property will still reflect the desired setting.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.AtmosphereDisplay">
            <summary>
            Gets/Sets the type of atmosphere to display.  If the type is currently unsupported, one that is displayable
            will be used instead, but this property will still reflect the desired setting.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.CelestialDisplay">
            <summary>
            Gets/Sets the type of celestial display to use, such as for the stars and sun.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.CloudGridLength">
            <summary>
            Gets or sets the number of tiles the cloud renderer can use. The grid managed by the renderer will 
            have CloudGridLength * CloudGridLength tiles.
            
            If the CloudStep is already active, this property change will affect the actual grid size only when
            the CloudStep is restarted.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.LightingStep">
            <summary>
            Gets the Lighting Step that manages the lights used by the graphics engine.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.SkyStep">
            <summary>
            Gets the step that renders the sky.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.CloudStep">
            <summary>
            Gets the step that renders the 3D clouds.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.Weather">
            <summary>
            Gets the weather manager.
            
            The weather manager manages weather points, which is used by the weather rendering engine to render 3D clouds.
            To weather rendering engine is enabled by the flag WeatherEnabled.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsUserSunPosition">
            <summary>
            Gets whether the value of SunPosition is user defined or calculated.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.SunPosition">
            <summary>
            Gets or sets the sun position, which is the primary directional 
            light source for all objects in the scene.  If you set the sun 
            position to null, the sun position will be queried from the current 
            time.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.HorizonColor">
            <summary>
            Gets the average horizon color for the current camera viewpoint.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.LocalWeatherEnabled">
            <summary>
            Gets or sets whether 3D weather should be rendered.  If <see cref="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsLocalWeatherRenderingSupported"/> is false,
            weather will not be rendered, but this property will still reflect the desired setting.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsLocalWeatherRendering">
            <summary>
            Returns whether we are actually rendering weather.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsAtmosphericScatteringSupported">
            <summary>
            Gets whether the atmospheric scattering effect is supported by the current machine.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsLocalWeatherRenderingSupported">
            <summary>
            Gets whether the 3D weather feature is supported by the current machine.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsShadowRenderingSupported">
            <summary>
            Gets whether the shadows feature is supported by the current machine.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.AtmosphereStyle">
            <summary>
            Determines what type of atmosphere should be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.AtmosphereStyle.None">
            <summary>
            No atmosphere is displayed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.AtmosphereStyle.Regular">
            <summary>
            A basic atmosphere is displayed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.AtmosphereStyle.Scattering">
            <summary>
            A full light-scattering atmosphere is displayed.  <see cref="P:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.IsAtmosphericScatteringSupported"/>
            must be true, or regular atmosphere will be displayed instead.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.CelestialStyle">
            <summary>
            Determines what type of celestial objects should be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.CelestialStyle.None">
            <summary>
            No celestial objects are displayed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.CelestialStyle.Regular">
            <summary>
            A more natural display is used.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.EnvironmentManager.CelestialStyle.Stylized">
            <summary>
            A sytlized view is used.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor">
            <summary>
            Encapsulates the average horizon color.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.RayleighColor">
            <summary>
            The 'Rayleigh scattering' component of the horizon color. The color may be above (1, 1, 1).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.MieColor">
            <summary>
            The 'Mie scattering' component of the horizon color. The color may be above (1, 1, 1).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.GetColor(System.Single)">
            <summary>
            Gets the average horizon color given an exposure factor. The final color may be above (1, 1, 1).
            </summary>
            <param name="exposure">The exposure factor.</param>
            <returns>The average horizon color.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.GetHorizonColor(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticCameraSnapshot,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Gets the horizon color for a given camera viewpoint.
            </summary>
            <param name="camera">The camera snapshot.</param>
            <param name="sun">The current sun position.</param>
            <returns>The horizon color.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.GetSunColor(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticCameraSnapshot,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single)">
            <summary>
            Gets the global directional light color given the camera and sun positions.
            </summary>
            <param name="camera">The current camera position.</param>
            <param name="sun">The current sun position.</param>
            <param name="exposure">The camera exposure used to compute the final color.</param>
            <returns>The light color.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.NormalizedHeight(System.Single)">
            <summary>
            Computes the normalized height for a given absolute value (0 = earth's surface; 1 = top of the atmosphere)
            </summary>
            <param name="height">The absolute height value.</param>
            <returns>The normalized height.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.Scale(System.Single)">
            <summary>
            The scale function that approximates the out-scattering integral. 
            
            Note: This function must match the function used by the SkyEffect shaders.
            </summary>
            <param name="cosAngle">The angle between the ray and straight up.</param>
            <returns>The approximated out-scattering value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.ComputeOpticalDepth(System.Single,System.Single,System.Single,Microsoft.MapPoint.Geometry.VectorMath.Vector3F@,Microsoft.MapPoint.Geometry.VectorMath.Vector3F@)">
            <summary>
            Computes the Rayleigh and Mie out-scattering values for two rays that share a common starting point.
            </summary>
            <param name="height">the origin's normalized height.</param>
            <param name="cosAngle1">The cosine of the angle between the first ray being scattered and the local straight up vector.</param>
            <param name="cosAngle2">The cosine of the angle between the second ray being scattered and the local straight up vector.</param>
            <param name="scatter1">The scatter value for the first ray.</param>
            <param name="scatter2">The scatter value for the second ray.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.ComputeOpticalDepth(System.Single,System.Single)">
            <summary>
            Computes the Rayleigh and Mie out-scattering values for a ray.
            </summary>
            <param name="height">The origin's normalized height.</param>
            <param name="cosAngle">The cosine of the angle between the ray being scattered and the local straight up vector.</param>
            <returns>The scatter value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.HorizonColor.InScattering(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Computes the Rayleigh and Mie out-scattering values for a ray.
            
            See the documentation for SkyEffect.fx for more info.
            </summary>
            <param name="origin">The ray's origin (if inside the atmosphere, the camera position).</param>
            <param name="target">A point at the top of the atmosphere.</param>
            <returns>a HorizonColor struct.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield">
            <summary>
            Represents the starfield that is rendered around the globe.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Constructs a new instance of StarfieldManager.
            </summary>
            <param name="host">A valid instance of Host.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.CalculateHourAngle(System.DateTime)">
            <summary>
            Calculates a counter-clockwise angle of rotation for the celestial sphere based on the current date.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.CreateBallAndSun">
            <summary>
            Builds the starfield.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.Update(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Updates the current starfield state and render the stars to the screen.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.Alpha">
            <summary>
            Gets or sets the alpha value (a number between 0 and 1) used to render the starfield.
            
            The default value is 1.0.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.TexturedStars">
            <summary>
            Encapsulates rendering stars as billboard textures.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.StylisticStars">
            <summary>
            Encapsulates rendering stars as stylistic stars.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.PointStars">
            <summary>
            Encapsulates rendering stars as points.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.Starfield.LineConstellations">
            <summary>
            Encapsulates rendering constellations as line segments.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActionExecutor">
            <summary>
            Encapsulates a single action and its fixed parameters.  Actions are 
            run as the result of an event in the bindings system.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutor.#ctor(Microsoft.MapPoint.Binding.BindingSet,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionExecutor"/> class.
            </summary>
            <param name="bindingSet"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutor.#ctor(Microsoft.MapPoint.Binding.BindingSet,System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionExecutor"/> class.
            </summary>
            <param name="bindingSet"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutor.Execute(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutor.Invalidate">
            <summary>
            Forces this executor to rebind its action.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutor.NeedBind">
            <summary>
            Binds the action strings to actual actions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutor.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionExecutor.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionExecutor.Arguments">
            <summary>
            Gets the arguments that should be used to execute this action.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActionManager">
            <summary>
            Encapsulates a manager for mapping names to actions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionManager.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionManager"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionManager.RegisterAction(System.String,System.String,Microsoft.MapPoint.Binding.Action)">
            <summary>
            Registers a possible action by name.  Registering an action will 
            make it available to be called.
            </summary>
            <param name="assemblyFullName">Full assembly name.</param>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionManager.UnregisterAction(System.String,System.String)">
            <summary>
            Unregisters an action by name.  This may make some bindings no longer work.
            </summary>
            <param name="assemblyFullName">Full assembly name.</param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionManager.TryGetAction(System.String,System.String,Microsoft.MapPoint.Binding.Action@)">
            <summary>
            Tries to get an action by name, returning false if it was not registered.
            </summary>
            <param name="assemblyFullName">Full assembly name.</param>
            <param name="name"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionManager.GetAction(System.String,System.String)">
            <summary>
            Gets an action by name, throwing an exception of it was not registered.
            </summary>
            <param name="assemblyFullName">Full assembly name.</param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActionManager.ActionKey">
            <summary>
            Encapsulates the full reference to an action.  This is similar to a full class name in that it can take the form:
              Action,AssemblyName,PublicKeyToken=
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionManager.ActionKey.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionManager.ActionKey"/> class.
            </summary>
            <param name="actionName">Name of the action.  Ex. "MouseMove"</param>
            <param name="assemblyName">Name of the assembly.  Ex. "Microsoft.MapPoint.Rendering3D"</param>
            <param name="publicKeyToken">Optional public key token.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionManager.ActionKey.Equals(Microsoft.MapPoint.Binding.ActionManager.ActionKey)">
            <summary>
            Test equality of two keys.  If either or both keys have no 
            PublicKeyToken, but otherwise match, they will be equivalent.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActionExecutors">
            <summary>
            Encapsulates a list of actions and the code necessary to execute them.
            Mostly immutable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutors.#ctor(System.Collections.Generic.IList{Microsoft.MapPoint.Binding.ActionExecutor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionExecutors"/> class.
            </summary>
            <param name="actions">List of action executors.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutors.Execute(System.Boolean,Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Executes the actions.
            </summary>
            <param name="executeActionsForward"></param>
            <param name="eventData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutors.Invalidate">
            <summary>
            Forces all of the actions to be rebuilt.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionExecutors.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActionSystem">
            <summary>
            Encapsulates the classes required for dealing with events and actions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionSystem.IncomingEventLock">
            <summary>
            Gets an object to lock on for incoming events.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionSystem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionSystem.Flush">
            <summary>
            If a system loses focus and will no longer be receiving its events,
            then any active events should be terminated by calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionSystem.TraceEventData(System.String,Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Call to trace EventData usage.
            </summary>
            <param name="message"></param>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionSystem.TraceCursorChange(System.String,Microsoft.MapPoint.Binding.BindingCursorSet)">
            <summary>
            Call to trace cursor state changes.
            </summary>
            <param name="message"></param>
            <param name="cursor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionSystem.TraceEventRegistration(System.String)">
            <summary>
            Call to trace with information relating to an event being registered or unregistered.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionSystem.TraceActionRegistration(System.String)">
            <summary>
            Call to trace with information relating to an action being registered or unregistered.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionSystem.TraceStateChange(System.String)">
            <summary>
            Call to trace any action operations.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.TraceState">
            <summary>
            Gets and sets the amount of tracing that the action system will perform.
            This is not called, but should not be removed because of its debugging value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.Enabled">
            <summary>
            Gets or sets whether the binding system processes anything.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.ActionManager">
            <summary>
            Gets the manager that is used for registering and handling Actions.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.ActiveBindings">
            <summary>
            Gets the manager of currently active bindings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.ActiveEvents">
            <summary>
            Gets the manager of the currently active binding stack.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.Bindings">
            <summary>
            Gets the current bindings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.BindingCursorManager">
            <summary>
            Gets the manager that is used to handle BindingCursors.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.EventSourceManager">
            <summary>
            Gets the manager that is used for registering and handling EventSources
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.EventStack">
            <summary>
            Gets the stack that marshals events from the UI thread to the render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionSystem.SystemEventSource">
            <summary>
            Gets the system event source.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActionSystem.TraceStates">
            <summary>
            Flags that define what operations should provide trace output.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionSystem.TraceStates.None">
            <summary>
            No tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionSystem.TraceStates.NonAxisEvents">
            <summary>
            Include non-axis event tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionSystem.TraceStates.AxisEvents">
            <summary>
            Include axis event tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionSystem.TraceStates.CursorChanges">
            <summary>
            Include cursor change tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionSystem.TraceStates.EventRegistration">
            <summary>
            Include event registration and unregistration information.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionSystem.TraceStates.ActionRegistration">
            <summary>
            Include action registration and unregistration information.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActionValue">
            <summary>
            Encapsulates a value that is designed to be set/updated by actions and 
            then emptied per frame.  Actions should call Update with "cause" as the
            parameter, then per frame they should call GetValue with the frame's 
            tick count.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.ActionValue.MaximumMilliseconds">
            <summary>
            The maximum number of milliseconds that a single value update can be executed for.
            This is to minimize the distances traveled when the UI thread gets hung.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionValue"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActionValue"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.Update(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            This should be called for each action.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.UpdateValue(System.Int64,System.Double)">
            <summary>
            Updates the value by a specified fixed quantity.  
            When GetValue is called, this entire amount will be included.
            </summary>
            <param name="tickCount"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.UpdateSpeed(System.Int64,System.Double)">
            <summary>
            Updates the current value based on the current speed and then 
            applies the specified delta to speed (could be negative).
            The speed stacks, so multiple things feeding values in will compound the speed.
            </summary>
            <param name="tickCount"></param>
            <param name="speedDelta"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.SetSpeed(System.Int64,System.Double)">
            <summary>
            Updates the current value based on the current speed and then
            sets the speed to the specified value.  Since the speed is
            set specifically, multiple sources calling this will overwrite 
            previous values, so be careful how you use it.
            </summary>
            <param name="tickCount"></param>
            <param name="speed"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.GetValue(System.Int64)">
            <summary>
            This gets the value for the next frame.  This should only be 
            called once per frame.
            </summary>
            <returns>Time delta in seconds.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActionValue.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActionValue.PreviousTickCount">
            <summary>
            Gets the number of ticks since the last update or get.  If neither 
            have been called yet, this value will be 0 and must be handled 
            specially.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActiveBindings">
            <summary>
            Encapsulates a dynamically changing set of bindings.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.IFocus">
            <summary>
            Interface that a class can implement if it wants to request bindings 
            focus using BindingsManager.RequestFocus.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.IFocus.LoseFocus">
            <summary>
            Called when another class wants focus.
            </summary>
            <returns>If the implementing class is willing to reliquish focus,
            it should return true.  If it cannot, it should return false.
            </returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.RebuildBaseCursorSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.AddBindingSet(Microsoft.MapPoint.Binding.BindingSet)">
            <summary>
            Merges a binding set into the core (non focused) set of bindings.
            </summary>
            <param name="bindingSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.RemoveBindingSet(Microsoft.MapPoint.Binding.BindingSet)">
            <summary>
            Removes the specified binding set from the core (non focused) set of bindings.
            </summary>
            <param name="bindingSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.RemoveSource(Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Removes any bindings belonging to a specified bindings source from the core (non focused) set of bindings.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.ClearCore">
            <summary>
            Removes all bindings from the core (non focused) set of bindings.
            Note that a partially trusted plug-in may not do this as it will make the map control unusable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.RequestFocus(Microsoft.MapPoint.Binding.IFocus,System.Boolean)">
            <summary>
            Requests that the specified object get focus.  The currently 
            focused object may deny the request.  If the request is granted, 
            then calls can be made to AddFocusBindingSet.
            </summary>
            <param name="focus"></param>
            <param name="exclusive">If true, then while focused, only the focus
            binding sets will be used.  If false, then focus binding sets will 
            get first crack followed by the preexisting binding sets.</param>
            <returns>True if focus is granted, false if it is not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.ReleaseFocus(Microsoft.MapPoint.Binding.IFocus)">
            <summary>
            Relinquishes focus, returning to the core set of bindings.  
            This will not call IFocus.LoseFocus.
            </summary>
            <param name="focus"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.AddFocusBindingSet(Microsoft.MapPoint.Binding.IFocus,Microsoft.MapPoint.Binding.BindingSet)">
            <summary>
            Merges the specified binding set with the focused (non core) binding set.
            </summary>
            <param name="focus"></param>
            <param name="bindingSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.ClearFocusBindingSet(Microsoft.MapPoint.Binding.IFocus)">
            <summary>
            Removes all bindings from the focused (non core) binding set.
            </summary>
            <param name="focus"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.ReplaceEventSource(Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            Replaces any event source that match the specified one with it.
            </summary>
            <param name="eventSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.InvalidateActions">
            <summary>
            Forces all actions to be recalculated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.TryFindBinding(Microsoft.MapPoint.Binding.EventKeySortedList,Microsoft.MapPoint.Binding.PotentialBind@,Microsoft.MapPoint.Binding.PotentialBind@)">
            <summary>
            Finds a binding that is caused by the list of keys or returns null.
            </summary>
            <param name="key">List of keys to use.  This array will be sorted.</param>
            <param name="focusedBind"></param>
            <param name="coreBind"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.PushCursors(Microsoft.MapPoint.Binding.BindingCursorSet)">
            <summary>
            Pushes a cursor set onto the stack of active cursor sets.  
            </summary>
            <param name="cursorSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.PopCursors(Microsoft.MapPoint.Binding.BindingCursorSet)">
            <summary>
            
            </summary>
            <param name="cursorSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.IsEventUsed(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.BuildBindList">
            <summary>
            
            </summary>
            <remarks>I was going to do this as an IEnumerable, but it had cross-appdomain serialization issues.</remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindings.LoseFocus">
            <summary>
            Implements <see cref="M:Microsoft.MapPoint.Binding.IFocus.LoseFocus"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveBindings.CursorSet">
            <summary>
            Gets the active cursors set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveBindings.Notification">
            <summary>
            Gets the current notification string.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveBindings.CoreCount">
            <summary>
            Gets the number of bindings in the core binding set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveBindings.FocusedCount">
            <summary>
            Gets the number of bindings in the focused binding set.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActiveBindingSet">
            <summary>
            A set of binding that is actively being manipulated and executed from.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.Merge(Microsoft.MapPoint.Binding.BindingSet)">
            <summary>
            Merge the specified binding set into this active list.  This will 
            add the specific bindings, execute any actions associated with the
            set, and update the cursor if appropriate.
            </summary>
            <param name="bindingSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.Clear">
            <summary>
            Removes all entries and executes their actions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.Remove(Microsoft.MapPoint.Binding.BindingSet)">
            <summary>
            
            </summary>
            <param name="bindingSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.RemoveSource(System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.ReplaceEventSource(Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            
            </summary>
            <param name="eventSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.InvalidateActions">
            <summary>
            Invalidates the actions of all of the bindings in this set.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.TryFindBinding(Microsoft.MapPoint.Binding.EventKeySortedList,Microsoft.MapPoint.Binding.PotentialBind@)">
            <summary>
            Finds a binding that is caused by the list of keys or returns null.
            </summary>
            <param name="key">List of keys to use.  This array will be sorted.</param>
            <param name="potentialBind"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveBindingSet.IsEventUsed(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Gets whether or not the specified key is used at all in this set.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveBindingSet.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveBindingSet.Notification">
            <summary>
            Gets the active notification string.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveBindingSet.Bindings">
            <summary>
            Gets the dictionary of active bindings.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActiveEvents">
            <summary>
            Tracks all active events and is used for activating and deactivating them.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ActiveEvents"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.AddKey(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Adds an <see cref="T:Microsoft.MapPoint.Binding.EventKey"/> to the list of active keys and updates the hash code.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.RemoveKey(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Removes an <see cref="T:Microsoft.MapPoint.Binding.EventKey"/> from the list of active keys and updates the hash code.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.DoNoActiveEvents">
            <summary>
            Call to raise the NoActiveEvents event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.DeactivateNonModifiers(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Deactivate any non-modifier events that contain the specified modifier event key.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.Execute(Microsoft.MapPoint.Binding.ActiveBindings,Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Executes a specific event within the specified binding set.        
            </summary>
            <param name="activeBindings"></param>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.Activate(Microsoft.MapPoint.Binding.ActiveBindings,Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Adds a new key to the active events, activating and deactivating 
            the appropriate actions.
            </summary>
            <param name="activeBindings"></param>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.Deactivate(Microsoft.MapPoint.Binding.ActiveBindings,Microsoft.MapPoint.Binding.EventData,System.Boolean)">
            <summary>
            Removes the specified event.
            </summary>
            <param name="currentBindingSet"></param>
            <param name="eventData"></param>
            <param name="executeDeactivate">True if besides just detaching the event, it should be executed if appropriate.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.Matches(Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Tests whether the specified bindings matches the currently active events.
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.DeactivateAllEvents">
            <summary>
            Deactivates and clears any events.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ActiveEvents.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.MapPoint.Binding.ActiveEvents.NoActiveEvents">
            <summary>
            Event that is raised when we return to a state where there are no longer any active events.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ActiveEvents.Count">
            <summary>
            Gets the number of active events.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ActiveEvents.NoActiveEventsHandler">
            <summary>
            Handler for NoActiveEvents.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.Action">
            <summary>
            An action.
            </summary>
            <param name="eventData"></param>
            <returns>True if the action handled the event, and no further processing should be done.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.Bind">
            <summary>
            Encapsulates a binding from a set of events to a list of actions.
            This class is immutable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.#ctor(Microsoft.MapPoint.Binding.BindingSet,Microsoft.MapPoint.Binding.Bind,Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Initializes a new instance of the <see cref="N:Microsoft.MapPoint.Binding"/> class.
            </summary>
            <param name="bindingSet"></param>
            <param name="current"></param>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.#ctor(Microsoft.MapPoint.Binding.BindingSet,System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="N:Microsoft.MapPoint.Binding"/> class using an <see cref="T:System.Xml.XmlReader"/>.
            </summary>		
            <param name="bindingSet"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.Execute(System.Boolean,Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Execute all of the actions referenced by this bind.
            </summary>
            <param name="executeActionsForward"></param>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.InvalidateActions">
            <summary>
            Invalidates all of the actions in this binding, forcing them to 
            be reconnected.  
            This is called when an existing action is removed since this 
            binding may use it.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.Matches(System.Collections.Generic.IEnumerable{Microsoft.MapPoint.Binding.EventKey})">
            <summary>
            Gets whether the sorted list of keys matches the binding's events.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.CompareTo(Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Implements generic IComparable.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bind.System#IComparable#CompareTo(System.Object)">
            <summary>
            Impelements IComparable.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.Bind.Owner">
            <summary>
            Gets the owning binding set of this bind.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.Bind.Factor">
            <summary>
            Gets the factor value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.Bind.Key">
            <summary>
            Gets the event key for this bind, or null.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.Bind.Spatial">
            <summary>
            If true, then this binding will be tested against other bindings 
            that are marked spatial, and the closest will win.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.Bind.AppendActions">
            <summary>
            If true, then the non-spatial actions from this binding will be 
            appended to any existing non-spatial actions.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.Bindings">
            <summary>
            Encapsulates a bindings document consisting of multiple bindings namespaces.
            This class is mutable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.Bindings"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.#ctor(Microsoft.MapPoint.Binding.ActionSystem,System.Type,System.String,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.Bindings"/> class.
            </summary>
            <param name="actionSystem"></param>
            <param name="type"></param>
            <param name="resourceName"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.#ctor(Microsoft.MapPoint.Binding.ActionSystem,System.String,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.Bindings"/> class.
            </summary>
            <param name="actionSystem"></param>
            <param name="xmlString"></param>
            <param name="source">The source for bindings.  Usually a plug-in.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.Clear">
            <summary>
            Removes all binding sets from this binding.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.Merge(Microsoft.MapPoint.Binding.Bindings)">
            <summary>
            Merges in another bindings with this one.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.Merge(Microsoft.MapPoint.Binding.ActionSystem,System.Xml.XmlReader,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.Bindings"/> object from an <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="actionSystem"></param>
            <param name="reader"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.ReplaceEventSource(Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            Replaces an existing event source with the provided one.
            </summary>
            <param name="eventSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.Bindings.GetBindingSet(Microsoft.MapPoint.Binding.BindingsSource,System.String)">
            <summary>
            Retrieves the first binding set that matches the specified name.
            </summary>
            <param name="source">Can be null.</param>
            <param name="name">Case insensitive name to look for.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.Bindings.BindingSets">
            <summary>
            Gets the binding sets contained herein.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindingSet">
            <summary>
            Encapsulates a set of <see cref="N:Microsoft.MapPoint.Binding"/> objects.
            This class is immutable except that events and actions can become 
            valid or invalid as event sources and actions are added and removed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingSet.#ctor(Microsoft.MapPoint.Binding.ActionSystem,System.Xml.XmlReader,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.MapPoint.Binding.BindingSet"/> class from a BindingSet XML tag.
            </summary>
            <param name="actionSystem"></param>
            <param name="reader"></param>
            <param name="source">Object that will be passed around as the 
            source of this BindingSet.  Usually this is a plug-in.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingSet.MergeInto(System.Collections.Generic.Dictionary{Microsoft.MapPoint.Binding.EventKeySortedList,Microsoft.MapPoint.Binding.PotentialBind})">
            <summary>
            Merges this set into an external dictionary.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingSet.ReplaceEventSource(Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            Replaces any event sources whose name matches the name of the provided event source.
            </summary>
            <param name="eventSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingSet.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSet.Name">
            <summary>
            Gets the name of this bindings set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSet.Notification">
            <summary>
            Gets the notification string that should be displayed when this binding set becomes active.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSet.ActionSystem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSet.Source">
            <summary>
            Gets the source of this binding set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSet.CursorSet">
            <summary>
            Gets the cursors defined for this set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSet.Actions">
            <summary>
            Gets the actions that this BindingSet should execute when it becomes active.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSet.AutoUse">
            <summary>
            Gets whether to use this binding set as soon as it is loaded.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindingSetReference">
            <summary>
            Reference to a binding set so that it can be attached to the real binding set later.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingSetReference.#ctor(Microsoft.MapPoint.Binding.ActionSystem,Microsoft.MapPoint.Binding.BindingsSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.BindingSetReference"/> class.
            </summary>
            <param name="actionSystem"></param>
            <param name="source"></param>
            <param name="bindingSetName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingSetReference.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingSetReference.BindingSet">
            <summary>
            Gets the binding set, trying to look it up if it has not yet been bound.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindReference">
            <summary>
            Reference to a list of bindings that were tested when an event executed.
            These binds will be released in the reverse order from which they were added.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.BindReference"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindReference.Add(Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Adds a binding to the list.
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindReference.Remove(Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Removes the specified binding from the list of bindings.
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindReference.GetLast">
            <summary>
            Gets the last binding added.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindReference.IsEmpty">
            <summary>
            Tests whether the list is empty or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindReference.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindReference.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindingCursor">
            <summary>
            Encapsulates a cursor.  Derived classes can extend this class.
            This class pretty much just gets around the fact that the Cursor class 
            is sealed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor.#ctor(System.String,System.Windows.Forms.Cursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.BindingCursor"/> class.
            </summary>
            <param name="name"></param>
            <param name="windowsCursor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor.Dispose(System.Boolean)">
            <summary>
            Disposes the cursor.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingCursor.Name">
            <summary>
            Gets the name of this cursor.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingCursor.WindowsCursor">
            <summary>
            Gets the windows cursor.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindingCursorManager">
            <summary>
            Manages <see cref="T:Microsoft.MapPoint.Binding.BindingCursor"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursorManager.RegisterCursor(Microsoft.MapPoint.Binding.BindingCursor)">
            <summary>
            Registers a cursor so that it can be retrieved by name.
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursorManager.GetCursor(System.String)">
            <summary>
            Gets a registered cursor.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursorManager.ReleaseCursors">
            <summary>
            Clears the list of cursors. 
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindingCursorSet">
            <summary>
            Encapsulates a set of cursors that is the active set.
            Immutable
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.BindingCursorSet.Empty">
            <summary>
            Empty cursor set.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursorSet.#ctor(Microsoft.MapPoint.Binding.BindingCursorSet,Microsoft.MapPoint.Binding.BindingCursorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.BindingCursorSet"/> class.
            </summary>
            <param name="current"></param>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursorSet.#ctor(Microsoft.MapPoint.Binding.BindingCursorSet,System.Collections.Generic.List{Microsoft.MapPoint.Binding.BindingCursorSet})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.BindingCursorSet"/> class.
            </summary>
            <param name="current"></param>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursorSet.#ctor(Microsoft.MapPoint.Binding.BindingCursorManager,System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.BindingCursorSet"/> 
            class from the attributes of the current node in the specified 
            reader.  Expected attributes are "Cursor", "CursorAnchored", and 
            "CursorInvalid".
            </summary>
            <param name="manager"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursorSet.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>,
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingCursorSet.Main">
            <summary>
            Gets the cursor that is used over valid objects when not anchored.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingCursorSet.Anchored">
            <summary>
            Gets the cursor that is used when anchored.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingCursorSet.Invalid">
            <summary>
            Gets the cursor that is used over invalid space (generally the sky).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingCursorSet.IsEmpty">
            <summary>
            Gets whether or not this set is empty.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.AxisEventData">
            <summary>
            Encapsulates event data for an axis of data.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventData">
            <summary>
            Base class for the data created by an event.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventData.bindReference">
            <summary>
            Reference to the bind that this event actually used.  The 
            importance of this is that we may not initially know exactly
            which bind we will use, but need to create the deactivate event
            data.  In this case both event data's point to the reference so
            that the latter gets updated when the former does.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.#ctor(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Initialized a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventData"/> class.
            </summary>
            <param name="eventKey">Key of the event with which this data is 
            associated.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.Contains(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.Execute(System.Nullable{Microsoft.MapPoint.Geometry.VectorMath.Ray3D})">
            <summary>
            Executes the actions on this event.
            </summary>
            <param name="ray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.GetDisableEventData">
            <summary>
            Constructs an EventData that disables this EventData.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.SetTime(System.Int64)">
            <summary>
            Sets the tick count for this event.
            </summary>
            <param name="newTick"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.SetArguments(System.Collections.Generic.IList{System.Object})">
            <summary>
            Sets the arguments associated with this event.  This may change as we try different events.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.ConnectBinding(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Connects our binding to another event data's bindings.  This is generally used if we are a deactivate event data.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.AddUsedBinding(Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Adds a binding that was actually used in the process of raising 
            this event.
            </summary>
            <param name="bind"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.RemoveUsedBinding(Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Removes the specified binding from the list of bindings that was 
            used in the process of raising this event.
            </summary>
            <param name="bind"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.SetPotentialBinding(Microsoft.MapPoint.Binding.ActiveBindings,Microsoft.MapPoint.Binding.EventKeySortedList)">
            <summary>
            Sets the binding for this event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventData.GetValue(Microsoft.MapPoint.Binding.EventData,Microsoft.MapPoint.Binding.EventData.ValueType@)">
            <summary>
            Gets the value out of an event and the type of that value.
            </summary>
            <param name="eventData"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.EventKey">
            <summary>
            Gets the key that defines the event that caused this data.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.TickCount">
            <summary>
            Gets the .NET Framework tick count (100 nanoseconds) at which the event occurred.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.PointerPosition">
            <summary>
            Gets the absolute location of the pointer at the time of the event.
            </summary>
            <remarks>
            FUTURE: This is a cheesy solution to the problem of pressing a key 
            and wanting the mouse location at that point.  The slickest 
            solution I could think of was to allow each EventSource to 
            contribute to the EventData (kind of like SceneState), but this 
            was the quick and dirty fix.  If we ever get to the point where 
            you could have two pointers it will have to be revisited.
            </remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.Tag">
            <summary>
            A tag that can be anything.
            </summary>
            <remarks>
            FUTURE: I put this in because I needed a way for spatial bindings 
            to pass back the thing which they collided with.  If there is a 
            better way to deal with this (and with PointerPosition...see 
            above), then woo hoo.</remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.Arguments">
            <summary>
            Gets the arguments attached to this event.  May be null.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.Binding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.FocusedBind">
            <summary>
            Gets the list of bindings that will get first crack at processing an incoming event.
            If this is null, CoreBind will get tested.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.CoreBind">
            <summary>
            Gets the list of bindings that will get second crack at processing an incoming event if FocusedBind fails.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventData.Activate">
            <summary>
            Returns whether or not this event was activated.
            This is a shortcut that checks whether this data implements 
            IEventActivatable and checks the activate state.  It is included 
            because this is a very common operation.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventData.ValueType">
            <summary>
            Enumerates the most well known value types that are passed through an EventData.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventData.ValueType.Activatable">
            <summary>
            Event represents an activation or deactivation.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventData.ValueType.Axis">
            <summary>
            Event represents the change in an axis value.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.IEventDelta1">
            <summary>
            Interface that classes derived from <see cref="T:Microsoft.MapPoint.Binding.EventData"/> may 
            implement to indicate that they provide one delta value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.IEventDelta1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.AxisEventData.#ctor(Microsoft.MapPoint.Binding.EventKey,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.AxisEventData"/> class.
            </summary>
            <param name="eventKey"></param>
            <param name="delta"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.AxisEventData.Value">
            <summary>
            Gets the value of the axis.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ButtonEventData">
            <summary>
            Encapsulates event data for a button activation and deactivation.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.IEventActivatable">
            <summary>
            Interface that classes derived from <see cref="T:Microsoft.MapPoint.Binding.EventData"/> may 
            implement to indicate that they have an activate and deactivate
            phase.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.IEventActivatable.State">
            <summary>
            Gets the state of the event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ButtonEventData.#ctor(Microsoft.MapPoint.Binding.EventKey,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ButtonEventData"/> class.
            </summary>
            <param name="eventKey"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ButtonEventData.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ButtonEventData.State">
            <summary>
            Gets the activation state.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventActivateState">
            <summary>
            Enumerates the possible states of the <see cref="T:Microsoft.MapPoint.Binding.IEventActivatable"/> interface.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventActivateState.Activate">
            <summary>
            Event is an activate event, for example a key press (not release).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventActivateState.Deactivate">
            <summary>
            Event is a deactivate event, for example a key release (not press).
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.IEventDelta2">
            <summary>
            Interface that classes derived from <see cref="T:Microsoft.MapPoint.Binding.EventData"/> may 
            implement to indicate that they provide two delta values.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.IEventDelta2.ValueX">
            <summary>
            Gets the X value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.IEventDelta2.ValueY">
            <summary>
            Gets the Y value.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventDragState">
            <summary>
            Enumerates the possible states of the <see cref="T:Microsoft.MapPoint.Binding.IEventDrag"/>  interface.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventDragState.BeginDrag">
            <summary>
            Indicates that the event is initiating a drag operation.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventDragState.Dragging">
            <summary>
            Indicates that the event is part of the drag movement.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventDragState.EndDrag">
            <summary>
            Indicates that the event is ending a drag operation.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.IEventDrag">
            <summary>
            Interface that classes derived from <see cref="T:Microsoft.MapPoint.Binding.EventData"/> may 
            implement to indicate that they are a drag event and provide the
            state of the drag.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.IEventDrag.State">
            <summary>
            Gets the drag state.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.ValueButtonEventData">
            <summary>
            Encapsulates event data for a button activation and deactivation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ValueButtonEventData.#ctor(Microsoft.MapPoint.Binding.EventKey,Microsoft.MapPoint.Binding.EventActivateState,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.ButtonEventData"/> class.
            </summary>
            <param name="eventKey"></param>
            <param name="state"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.ValueButtonEventData.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.ValueButtonEventData.Value">
            <summary>
            Gets the value of the button.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventKey">
            <summary>
            Encapsulates the identification of an event.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventKey.Source">
            <summary>
            The source of the event.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventKey.Id">
            <summary>
            The Id of the event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.#ctor(Microsoft.MapPoint.Binding.EventSource,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventData"/> struct.
            </summary>
            <param name="source"></param>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.CanModify(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Gets whether this event key can modify the specified one.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.GetHashCode">
            <summary>
            Override of <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.Equals(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Type specific equality tester.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.Equals(System.Object)">
            <summary>
            Override of <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.Equals(Microsoft.MapPoint.Binding.EventSource,System.Int32)">
            <summary>
            Tests equality against the individual pieces.
            </summary>
            <param name="source"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.op_Equality(Microsoft.MapPoint.Binding.EventKey,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.op_Inequality(Microsoft.MapPoint.Binding.EventKey,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.ToString">
            <summary>
            Override of <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.CompareTo(System.Object)">
            <summary>
            Implements <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKey.CompareTo(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Implements <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventKey.IsModifier">
            <summary>
            Gets whether or not this event is a modifier.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventKeySortedList">
            <summary>
            Encapsulates a sorted list of <see cref="T:Microsoft.MapPoint.Binding.EventKey"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.#ctor(System.Collections.Generic.IEnumerable{Microsoft.MapPoint.Binding.EventKey})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventKeySortedList"/> from an array of entries.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.Contains(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Returns true if this binding contains the specified event key.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.BinarySearch(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Searches through the list for a specified entry.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.BuildHashCode">
            <summary>
            Builds a hashcode of the entire list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.GetHashCode">
            <summary>
            Get the hashcode for the entire list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.Equals(System.Collections.Generic.IEnumerable{Microsoft.MapPoint.Binding.EventKey})">
            <summary>
            Gets whether the sorted list of keys matches the binding's events.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.Equals(Microsoft.MapPoint.Binding.EventKeySortedList)">
            <summary>
            Gets whether the sorted list of keys matches the binding's events.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedList.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventKeySortedList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventKeySortedList.Item(System.Int32)">
            <summary>
            Gets the entry in the list at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventKeySortedListBuilder">
            <summary>
            Encapsulates an editable sorted list of <see cref="T:Microsoft.MapPoint.Binding.EventKey"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventKeySortedList"/> with no entries.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.ToEventKeySortedList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Clear">
            <summary>
            Removes all entries from the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Add(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Adds an entry to the list if the entry is unique.
            </summary>
            <param name="eventKey"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.AddRange(System.Collections.Generic.IEnumerable{Microsoft.MapPoint.Binding.EventKey})">
            <summary>
            Adds a collection of event keys to this list, excluding any duplicated entries.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Remove(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Removes a key from the list.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.RemoveAt(System.Int32)">
            <summary>
            Removes an entry from the list.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Contains(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Returns true if this binding contains the specified event key.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.BinarySearch(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Searches through the list for a specified entry.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.GetHashCode">
            <summary>
            Get the hashcode for the entire list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Equals(System.Collections.Generic.IEnumerable{Microsoft.MapPoint.Binding.EventKey})">
            <summary>
            Gets whether the sorted list of keys matches the binding's events.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventKeySortedListBuilder.Item(System.Int32)">
            <summary>
            Gets the entry in the list at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventReference">
            <summary>
            Late bound reference to an event.  The names within this reference may
            not have been resolved to the values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventReference.#ctor(Microsoft.MapPoint.Binding.EventSourceManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventReference"/> class.
            </summary>
            <param name="eventSourceManager"></param>
            <param name="eventReferenceString"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventReference.#ctor(Microsoft.MapPoint.Binding.EventSourceManager,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventReference"/> class.
            </summary>
            <param name="eventSourceManager"></param>
            <param name="eventSourceName"></param>
            <param name="eventName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventReference.NeedKey">
            <summary>
            Tries to calculate the event key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventReference.Invalidate">
            <summary>
            Invalidates the key in this event reference, forcing it to attempt to regenerate it.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventReference.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventReference.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventReference.CompareTo(Microsoft.MapPoint.Binding.EventReference)">
            <summary>
            Implements <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventReference.EventSourceName">
            <summary>
            Gets the string representing the event source that caused the event.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventReference.EventName">
            <summary>
            Gets the string representation of the event.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventReference.EventKey">
            <summary>
            Gets the key representing this event.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventSource">
            <summary>
            Base abstract class for managers of events for a particular source.
            Examples of possible event sources are: keyboard, mouse, etc.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventSource"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.Registered">
            <summary>
            Called when this event source is activated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.Unregistering">
            <summary>
            Called when this event source is deactivated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.GetEventId(System.String)">
            <summary>
            Gets the id for the specified event, constructing a temporary holder for those that don't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.GetEventName(System.Int32)">
            <summary>
            Gets the name for the specified event.  An exception is thrown if 
            the event does not exist.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.Execute(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Executes the specified event data.
            </summary>
            <param name="eventData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.GetEventData(System.Int32,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            Derived classes must implement this method to reconstruct an <see cref="T:Microsoft.MapPoint.Binding.EventData"/> for the specified event.
            </summary>
            <param name="eventId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.IsModifier(System.Int32)">
            <summary>
            Derived classes must implement this method to return whether or 
            not the specified id is a modifier.  Modifiers will not be executed
            in parallel with other modifiers.
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.CanModify(System.Int32,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Derived classes must implement this method to return whether the 
            specified event id in this event source can modify the other key 
            (possibly in this event source, possibly another).
            </summary>
            <param name="eventId"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.Collide">
            <summary>
            Derived classes may override this method to perform some action on collision.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventId(System.String,System.Int32@)">
            <summary>
            Derived classes must implement this method to convert from an event name to its id.
            </summary>
            <param name="eventName"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventName(System.Int32,System.String@)">
            <summary>
            Derived classes must implement this method to convert from an event id to an event name.
            </summary>
            <param name="eventId"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.NextFrame(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot)">
            <summary>
            
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.CompareTo(System.Object)">
            <summary>
            Implements <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.CompareTo(Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            Implements <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventSource.ActionSystem">
            <summary>
            The action system currently in use
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventSource.Name">
            <summary>
            Derived classes must override this to specify the name used as the pair {Name}.{Event}
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventSource.InvalidEventNameException">
            <summary>
            Exception that is thrown when an invalid event name is requested.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSource.InvalidEventNameException.#ctor(System.String,Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventSource.InvalidEventNameException"/> class.
            </summary>
            <param name="name"></param>
            <param name="eventSource"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventSource.InvalidEventNameException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventSourceManager">
            <summary>
            Manager for mapping between string names and EventSource objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventSourceManager"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.GetEventKey(System.String)">
            <summary>
            Given an event string like "Key.M", build an EventKey out of it.
            </summary>
            <param name="eventReferenceString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.TryToResolveEventKey(Microsoft.MapPoint.Binding.EventKey,Microsoft.MapPoint.Binding.EventKey@)">
            <summary>
            Tries to convert the specified unresolved event key into a resolved one.
            </summary>
            <param name="currentKey"></param>
            <param name="newKey"></param>
            <returns>True if the event could now be resolved, false if it could not.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.RegisterEventSource(Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            Register a new event source.
            </summary>
            <param name="eventSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.UnregisterEventSource(Microsoft.MapPoint.Binding.EventSource)">
            <summary>
            Unregister an event source.
            </summary>
            <param name="eventSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.TryGetEventSource(System.String,Microsoft.MapPoint.Binding.EventSource@)">
            <summary>
            Try to get an event source by name.
            </summary>
            <param name="name"></param>
            <param name="eventSource"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.GetEventSource(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.OnExecute(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.Execute(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Executes an event based on the specified event data.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.NextFrame(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot)">
            <summary>
            Let each event source do something at the beginning of the frame.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventSourceManager.Collide">
            <summary>
            Let each event source know that a collision has happened.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Binding.EventSourceManager.Executing">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventSourceManager.ExecuteEventHandler">
            <summary>
            
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventStack">
            <summary>
            Tracks the stack of events that were raised this frame.  
            The stack should be emptied out with a call to ExecuteEvents() 
            each frame.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventStack.BufferSize">
            <summary>
            Gets the number of entries that can be added to the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.EventStack.executeNoActiveEvents">
            <summary>
            Flag that indicates that ActiveEvents.NoActiveEvents should be called after stack has been emptied.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventStack.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.EventStack"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventStack.AddEvent(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Adds an event to the stack.  
            This method is threadsafe.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventStack.ClearEvents">
            <summary>
            Clears out the event stack for this frame.
            Note that this may clear starting events, but ending events may come in later.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventStack.ExecuteEvents(System.Int64,System.Nullable{Microsoft.MapPoint.Geometry.VectorMath.Ray3D})">
            <summary>
            Executes all of the events that fall before the specified tick count.
            This method should only be called from one thread.
            </summary>
            <param name="tickCount"></param>
            <param name="ray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.EventStack.QueueNoActiveEvents">
            <summary>
            Notifies the stack that it should execute the NoActiveEvents event.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Binding.EventStack.OnBindingUnhandled">
            <summary>
            Fired when a binding is processed and left unhandled by all bindings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.EventStack.Count">
            <summary>
            Gets the number of entries in the currently active stack.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.EventStack.BindingUnhandled">
            <summary>
            Delegate used for OnBindingUnhandled event
            </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.FullEventKey">
            <summary>
            Encapsulates a full event key.  
            For example Key.ControlKey+Key.A is a full event key, made up of two event keys.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.#ctor(Microsoft.MapPoint.Binding.EventSourceManager,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.FullEventKey"/> class.
            </summary>
            <param name="eventSourceManager"></param>
            <param name="eventStrings"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.Contains(Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Gets whether or not this full key contains an individual key.
            </summary>
            <param name="eventKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.Rebuild">
            <summary>
            Rebuilds the key, attaching any new event sources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.Equals(Microsoft.MapPoint.Binding.FullEventKey)">
            <summary>
            Tests equality against another key.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.CompareTo(Microsoft.MapPoint.Binding.FullEventKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.FullEventKey.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.FullEventKey.Count">
            <summary>
            Gets the number of events keys that make up this full event key.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.FullEventKey.Resolved">
            <summary>
            Gets whether or not this key has been resolved.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.FullEventKey.Sorted">
            <summary>
            Gets the sorted list of event keys.
            </summary>
            <remarks>This is kind of crappy since the list is mutable.  
            However, we use it as the key for our dictionaries and need 
            it for that reason.</remarks>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.PointerEventSource">
            <summary>
            Base class for event sources that maintain a pointer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PointerEventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.PointerEventSource"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PointerEventSource.SetMode(Microsoft.MapPoint.Binding.PointerEventSource.PointerMode)">
            <summary>
            Derived classes may override this method to handle mode switches.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PointerEventSource.GetPointerDirection(Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Derived classes must override this method to return the location and direction in
            3-space of the pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.PointerEventSource.Mode">
            <summary>
            Gets or sets the mode for this event source.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.PointerEventSource.PointerMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.PointerEventSource.PointerMode.Constrained">
            <summary>
            Constrained mode means that the pointer can only move to the 
            limits of some extent.  This mode is not appropriate for 
            continuous motion, but is for targeting.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Binding.PointerEventSource.PointerMode.Unconstrained">
            <summary>
            Unconstrained mode means that the pointer can move 
            continuously without limit, but it does not maintain a specific
            position (rendering calls to GetPointerPosition meaningless).
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.PotentialBind">
            <summary>
            Encapsulates a set of spatial and/or non-spatial bindings that we will 
            use when searching for a binding to execute.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.#ctor(Microsoft.MapPoint.Binding.FullEventKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.PotentialBind"/> class.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.RebuildEvent">
            <summary>
            Tests any unbound events to see if they can be bound, and bind them if so.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.Add(Microsoft.MapPoint.Binding.Bind)">
            <summary>
            Adds an entry to this potential set of bindings.  Non spatial 
            entries will overwrite existing not spatial entries.
            </summary>
            <remarks>
            This is called when a BindingSet is built.  Each of the bindings 
            is added to the event that will cause it using PotentialBinds.
            </remarks>
            <param name="bind"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.MergeInto(Microsoft.MapPoint.Binding.PotentialBind)">
            <summary>
            Merges another potential bind into this one, replacing the 
            non-spatial bind, and appending the spatial binds.
            </summary>
            <remarks>
            This is called by ActiveBindingSet when it is creating a list of 
            all of the currently active bindings.
            </remarks>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.InvalidateActions">
            <summary>
            Force all actions that have been resolved to re-resolve.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.Activate(System.Nullable{Microsoft.MapPoint.Geometry.VectorMath.Ray3D},Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Calculates the used bind from the potential bind, hooks it to the event data dn executes it.
            </summary>
            <param name="ray"></param>
            <param name="eventData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.RemoveBindingSet(Microsoft.MapPoint.Binding.BindingSet)">
            <summary>
            Clears out any resolved bindings that rely on the specified binding set.
            </summary>
            <param name="bindingSet"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.RemoveSource(System.Object)">
            <summary>
            Clear out any resolved bindings that rely on the specified source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.PotentialBind.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.PotentialBind.Key">
            <summary>
            Gets the event key that is the cause of any bindings in here.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.PotentialBind.NonSpatialBind">
            <summary>
            Gets the top-most non-spatial bind that may get executed when the event fires.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.PotentialBind.NonSpatialBinds">
            <summary>
            Gets the list of non-spatial binds that may get executed when the event fires.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.PotentialBind.SpatialBind">
            <summary>
            Gets an enumeration of all of the spatial binding contained herein.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.PotentialBind.IsEmpty">
            <summary>
            Gets whether or not there are any bindings that can be used.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.SystemEventSource">
            <summary>
            Implementation of <see cref="T:Microsoft.MapPoint.Binding.EventSource"/> that is used for system bindings.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.SystemEventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.SystemEventSource"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.SystemEventSource.TryGetEventId(System.String,System.Int32@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventId(System.String,System.Int32@)"/>.
            </summary>
            <param name="eventName"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.SystemEventSource.GetEventData(System.Int32,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.SystemEventSource.TryGetEventName(System.Int32,System.String@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventName(System.Int32,System.String@)"/>.
            </summary>
            <param name="eventId"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.SystemEventSource.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.SystemEventSource.IsModifier(System.Int32)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.SystemEventSource.CanModify(System.Int32,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.SystemEventSource.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.UnresolvedEventSource">
            <summary>
            Encapsulates an event source that we don't currently understand.  It 
            may be implemented in a plug-in or not been registered yet.  It will 
            try to act like the event source until such time that we can hook up 
            the real one.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.UnresolvedEventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.UnresolvedEventSource"/> class.
            </summary>
            <param name="actionSystem"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.UnresolvedEventSource.GetEventData(System.Int32,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            Not implemented.
            </summary>
            <param name="eventId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.UnresolvedEventSource.TryGetEventId(System.String,System.Int32@)">
            <summary>
            Tries to get an event id from a name.  For the unresolved event source, this will always succeed.
            </summary>
            <param name="eventName"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.UnresolvedEventSource.TryGetEventName(System.Int32,System.String@)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.UnresolvedEventSource.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.UnresolvedEventSource.IsModifier(System.Int32)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.UnresolvedEventSource.CanModify(System.Int32,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.UnresolvedEventSource.Name">
            <summary>
            Gets the name of this event source.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.XmlUtility">
            <summary>
            Encapsulates some XML related helper functions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetException(System.String,System.Xml.XmlReader)">
            <summary>
            Gets an XmlException appropriate for the current position of the reader.
            </summary>
            <param name="text"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetException(System.String,System.Exception,System.Xml.XmlReader)">
            <summary>
            Gets an XmlException appropriate for the current position of the reader.
            </summary>
            <param name="text"></param>
            <param name="exception"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetUnsupportedTagException(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetRequiredTagException(System.String,System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetMissingAttributeException(System.String,System.String,System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="attribute"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetUnexpectedNodeTypeException(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetMissingEndNodeException(System.String,System.Xml.XmlReader)">
            <summary>
            Gets the appropriate exception for a missing end node.
            </summary>
            <param name="tag"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.ValidateEndNode(System.String,System.Xml.XmlReader)">
            <summary>
            Validates that the element that the reader is sitting on is an end node with the specified tag.
            </summary>
            <param name="tag"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.ValidateIsEmptyElement(System.Xml.XmlReader)">
            <summary>
            Validates that the element that the reader is sitting on is not empty.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.ValidateIsNotEmptyElement(System.Xml.XmlReader)">
            <summary>
            Validates that the element that the reader is sitting on is empty.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetAttributeAsDouble(System.Xml.XmlReader,System.String,System.Double)">
            <summary>
            Gets the specified attribute from an XML reader, setting it to the 
            default value if it cannot, and tries to transform it into a 
            double.
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetRequiredAttributeAsString(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the specified attribute from an XML reader, throwing an 
            exception if it cannot, and returns it as a string.
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetRequiredAttributeAsInt(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the specified attribute from an XML reader, throwing an 
            exception if it cannot, and tries to transform it into an int.
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.GetRequiredAttributeAsDouble(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the specified attribute from an XML reader, thrown an
            exception if it cannot, and tries to transform it into a double.
            </summary>
            <param name="reader"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.ValidateElement(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.XmlUtility.ReadAround(System.Xml.XmlReader)">
            <summary>
            Assumes that the current element is an unknown one and attempts to 
            read around it and all its children.  If successful, it will
            return with the reader pointed at the next element.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ForwardDirectCameraController">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController">
            <summary>
            A base implementation of a camera controller that handles the rotation 
            of the camera.  Derived classes handle the position of the camera.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.AccelerationPeriodDefault">
            <summary>
            Percentage of the travel at the beginning that should be involved in acceleration.
            This is the default for all transitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.DecelerationPeriodDefault">
            <summary>
            Percentage of the travel at the end that should be involved in deceleration.
            This is the default for all transitions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.accelerationPeriod">
            <summary>
            These are the values for the current in-progress transition only.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.source">
            <summary>
            The source viewpoint.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.destination">
            <summary>
            The destination viewpoint.  
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.distance">
            <summary>
            The straight line distance between
            the source and destination points.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.startingDistanceFromOrigin">
            <summary>
            The distance, in meters, from the origin to the starting camera
            location.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.endingDistanceFromOrigin">
            <summary>
            The distance, in meters, from the origin to the ending camera
            location.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.totalSurfaceDistance">
            <summary>
            The great circle distance in meters from the starting camera 
            location's ground shadow to the ending location's ground shadow.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.totalSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.currentPercentComplete">
            <summary>
            The current percentage of the way through the total camera
            movement (0 -> 1).
            Value is set each frame.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.currentDistanceFromOrigin">
            <summary>
            The current distance, in meters, from the origin to the camera.
            Value is set each frame.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.host">
            <summary>
            The main Host object.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.altitudeDeltaScale">
            <summary>
            Scale value on altitudeDelta.  Set to 0.0 for something close to Great Circle motion
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.lookTowardDestination">
            <summary>
            Determines the method of camera orientation. If false, linear interpolation between viewpoints
            is used; if true, the camera attempts to keep the destination in view as it moves.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.CalculatePosition(System.Double,System.Double)">
            <summary>
            Derived classes should override this method to calculate the 
            the position of the camera at a specified percentage of the
            journey.
            </summary>
            <param name="percentComplete">Value from 0 to 1 indicating the 
            percentage of the way through the flight.</param>
            <param name="distanceFromOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.CalculateCameraRotation(System.Double@,System.Double,System.Double,System.Double@,System.Double)">
            <summary>
            Calculate rotation angle for camera pitch or yaw.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.GetViewpoint(System.Double,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,System.Double,System.Boolean)">
            <summary>
            Gets the viewpoint at a specific percent complete.
            </summary>
            <param name="percentComplete"></param>
            <param name="viewpoint"></param>
            <param name="timeSinceLastFrame"></param>
            <param name="checkTransparency"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.DetectCollision(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,System.Boolean,System.Double)">
            <summary>
            Detects if a collision occurs
            </summary>
            <param name="viewpoint"></param>
            <param name="adjustMinimumElevation"></param>
            <param name="percentComplete">Percentage of the tour that has been completed from 0.0 to 1.0</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MoveCamera(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Called with each new frame.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.InternalMoveTo">
            <summary>
            Derived classes should override this method to perform tasks when a new destination is specified.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MoveTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Cameras.CameraController{Microsoft.MapPoint.Rendering3D.Cameras.PredictiveCamera},Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Sets up this camera to move to a destination.
            </summary>
            <param name="viewpoint"></param>
            <param name="next"></param>
            <param name="parameters">Optional parameters for fine-tuning the camera motion. May be null.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.ComputeTotalTransitionTime(System.Double,System.Double)">
            <summary>
            Returns an initial estimate of the time it will take to do the transition.
            This value will be ignored if a user specifies transition time in <see cref="T:Microsoft.MapPoint.Rendering3D.Control.CameraParameters"/>.
            </summary>
            <param name="totalDistance"></param>
            <param name="cameraSpeed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MoveTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Cameras.CameraController{Microsoft.MapPoint.Rendering3D.Cameras.PredictiveCamera},System.Double)">
            <summary>
            Sets up this camera to move to a destination.
            </summary>
            <param name="viewpoint"></param>
            <param name="next"></param>
            <param name="moveTime"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MoveTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Cameras.CameraController{Microsoft.MapPoint.Rendering3D.Cameras.PredictiveCamera})">
            <summary>
            Overload of MoveTo which sets default for CameraParameters parameter.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.KeyDown(System.Object,System.EventArgs)">
            <summary>
            Handle KeyDown events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.KeyUp(System.Object,System.EventArgs)">
            <summary>
            Handle KeyUp events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MouseDown(System.Object,System.EventArgs)">
            <summary>
            Handle MouseDown events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MouseUp(System.Object,System.EventArgs)">
            <summary>
            Handle MouseUp events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MouseMove(System.Object,System.EventArgs)">
            <summary>
            Handle MouseMove events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MouseWheel(System.Object,System.EventArgs)">
            <summary>
            Handle MouseWheel events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MouseClick(System.Object,System.EventArgs)">
            <summary>
            Handle MouseClick events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.MouseDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Handle MouseDoubleClick events.  Returns true if handled, false otherwise
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.SetArrived(Microsoft.MapPoint.Rendering3D.Control.OnFlyToEndStatus)">
            <summary>
            Set HasArrived to true and fire an OnFlyToEnd event if HasArrived changes. 
            </summary>
            <param name="status"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.AltitudeDeltaScale">
            <summary>
            Scale value on altitudeDelta.  Set to 0.0 for something close to Great Circle motion
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.DefaultAccelerationPeriod">
            <summary>
            Gets/Sets the acceleration period as a percentage of the total distance.
            This is the default value for all transitions, to override the value
            for the current transition only use the CameraParameters stucture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.DefaultDecelerationPeriod">
            <summary>
            Gets/Sets the deceleration period as a percentage of the total distance.
            This is the default value for all transitions, to override the value
            for the current transition only use the CameraParameters stucture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.TransparentViewRay">
            <summary>
            Flag indicating that the models between the camera and the viewpoint
            should be partially transparent.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.TransparentViewOrigin">
            <summary>
            Flag indicating that the models containing the camera should 
            be partially transparent.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.Source">
            <summary>
            Gets the source viewpoint.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.Destination">
            <summary>
            Gets the destination viewpoint.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.PercentComplete">
            <summary>
            Gets the current percent complete.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.StartingDistanceFromOrigin">
            <summary>
            Gets the distance, in meters, from the origin to the starting 
            camera location.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.EndingDistanceFromOrigin">
            <summary>
            Gets the distance, in meters, from the origin to the ending camera
            location.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.TotalSurfaceDistance">
            <summary>
            Gets the great circle distance in meters from the starting camera
            location's ground shadow to the ending location's ground shadow.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.AnimatedCameraController.TotalSeconds">
            <summary>
            Gets the total number of seconds of travel time.
            This value is an estimate as acceleration and deceleration will alter it slightly.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ForwardDirectCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ForwardDirectCameraController.CalculatePosition(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="percentComplete"></param>
            <param name="distanceFromOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ForwardDirectCameraController.InternalMoveTo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.SplineAnimatedCameraController">
            <summary>
            Encapsulates a camera controller that uses splines to compute
            a path between the start and end viewpoints.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.SplineAnimatedCameraController.positionPlaneNormal">
            <summary>
            Normal of the plane containing the starting and ending camera
            location vectors. Value is set once per trip.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.SplineAnimatedCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.SplineAnimatedCameraController"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.SplineAnimatedCameraController.CalculatePosition(System.Double,System.Double)">
            <summary>
            Gets the position at a specified percentage of the way through the
            animation.
            </summary>
            <param name="percentComplete"></param>
            <param name="distanceFromOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.SplineAnimatedCameraController.InternalMoveTo">
            <summary>
            Sets up this camera to move to a destination.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition">
            <summary>
            Encapsulates the position of the sun.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.DEFAULT_SUN_DIRECTION">
            <summary>
            The default local sun direction.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.FromUTCDate(System.DateTime)">
            <summary>
            Constructs a new instance of SunPosition from an UTC date.
            The position of the sun will be fixed at the date and time specified.
            </summary>
            <param name="dateTime">An instance of DateTime.</param>
            <returns>A new instance of SunPosition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.FromUTCDate(System.DateTime,System.Single)">
            <summary>
            Constructs a new instance of SunPosition from a start UTC date and a speed multiplier.
            A speed multiplier of 1.0 means that time will advance in real-time. Bigger values increase
            the speed at which time advances.
            </summary>
            <param name="dateTime">The starting date and time.</param>
            <param name="speedMultiplier">The speed multiplier.</param>
            <returns>A new instance of SunPosition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.FromRealtime">
            <summary>
            Constructs a new instance of SunPosition representing the real-time position of the sun according to the system clock.
            </summary>
            <returns>A new instance of SunPosition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.FromCallback(Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.GetDateTimeHandler)">
            <summary>
            Constructs a new instance of SunPosition, pulling the location from a date/time callback.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.FromLocalDirection(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Constructs a new instance of SunPosition given a local direction (at the camera's position) vector.
            </summary>
            <param name="direction">The local direction of the light.</param>
            <returns>A new instance of SunPosition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.FromLocalDirection(Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Constructs a new instance of SunPosition given a local direction (at the camera's position).
            </summary>
            <param name="direction">The local direction of the light.</param>
            <returns>A new instance of SunPosition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.FromZenithAzimuth(System.Single,System.Single)">
            <summary>
            Constructs a new instance of SunPosition given local zenith and azimuth angles.
            </summary>
            <param name="zenith">The angle from zenith.</param>
            <param name="azimuth">The azimuth angle.</param>
            <returns>A new instance of SunPosition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.ComputeSunPosition(System.Double,System.Double,System.DateTime)">
            <summary>
            Computes the sun position given a date and time.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="date">The date and time used to calculate the sun's position.</param>
            <returns>The sun direction (in world coordinates) as a normalized vector.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.ComputeSunPosition(System.Double,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Computes the sun position given its orientation in local coordinates.
            </summary>
            <param name="latitude">The camera's latitude.</param>
            <param name="longitude">The camera's longitude.</param>
            <param name="localOrientation">The sun's local orientation.</param>
            <returns>The sun direction (in world coordinates) as a normalized vector.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.ComputeSunPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the sun position given its relative position at the current location.
            </summary>
            <param name="latitude">The camera's latitude.</param>
            <param name="longitude">The camera's longitude.</param>
            <param name="deltaZenith">The zenith, in radians, from the horizon.</param>
            <param name="deltaAzimuth">The solar azimuth, in radians, clockwise from North.</param>
            <returns>The sun direction (in world coordinates) as a normalized vector.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.GetVector(System.Double,System.Double,System.Single,System.Boolean@)">
            <summary>
            Gets the normalized sun direction in global coordinates.
            </summary>
            <param name="latitude">The current camera latitude.</param>
            <param name="longitude">The current camera longitude.</param>
            <param name="secondsDelta">The number of seconds since last time this method was called.</param>
            <param name="needUpdate">Whether the frame needs to be forced to update to keep sun animation smooth.</param>
            <returns>A normalized Vector3D instance.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.Mode">
            <summary>
            Gets the mode that is being used to get the sun position.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.SunPositionMode">
            <summary>
            Enumeration of modes for calculating the sun position.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.SunPositionMode.Realtime">
            <summary>
            Calculated from the DateTime.UtcNow.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.SunPositionMode.Date">
            <summary>
            Calculated from a user specified date/time.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.SunPositionMode.DateAutoUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.SunPositionMode.LocalDirection">
            <summary>
            Calcualted from a local direction vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.SunPositionMode.ZenithAzimuth">
            <summary>
            Calculated from a zenith and azimuth value.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.SunPositionMode.Callback">
            <summary>
            Calculated from a callback to other code.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.SunPosition.GetDateTimeHandler">
            <summary>
            Delegate for using callback mode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.RenderThread">
            <summary>
            Runs and manages the main render thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Ctor.
            </summary>
            <param name="host"></param>
            <param name="progress"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.Start">
            <summary>
            Starts the render thread running.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.Stop">
            <summary>
            Shuts down the render thread.  This may be called before calling GlobeControl.Dispose, but it is not neccessary to
            and is otherwise not recommended.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.Run">
            <summary>
            Threaded version of renderer for this control.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.InitializeRender">
            <summary>
            Initializes manual rendering.  This should not be called if Start is used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.UninitializeRender">
            <summary>
            Unititalizes manual rendering.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.RenderNextFrame">
            <summary>
            Renders the next frame.  This cannot be used with Start and must be used after InitializeRender.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.InternalRender">
            <summary>
            Called when the main timer loop wants the control to render.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.InitiateControlReload">
            <summary>
            Causes the control to be reloaded at the next opportunity.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderThread.OnReadyToRender">
            <summary>
            This is fired when everything is ready to begin the first frame, for example the graphics engine is ready,
            but rendering has not yet actually begun.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderThread.RenderThreadId">
            <summary>
            Gets the managed id of the render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderThread.ExecutionState">
            <summary>
            Gets the current execution state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderThread.GotHardwareDevice">
            <summary>
            Indicates whether DX was able to obtain a hardware device
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.InputManager">
            <summary>
            Handles direct input from mouse, keyboard, etc, and distributes those
            events to objects that require them.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.InputManager.OnKeyDown(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Key down event handler.
            </summary>
            <param name="code"></param>
            <param name="control"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.InputManager.OnMouseRawRelative(Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs)">
            <summary>
            This method handles unconstrained mouse movement. The previous method of doing this
            was to continually reposition the mouse cursor to the center of the screen and keep track
            of deviations from the center. In IE8 on Vista, and possibly other hosts, we are not 
            permitted to reposition the mouse cursor, so we implemented RawInputControl.cs to access 
            the raw mouse movements regardless of whether the mouse cursor is bounded. Those end
            up here.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.InputManager.MouseUnconstrained(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: MouseCapture
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.InputManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.InputManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.InputManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.InputManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.SettingsProviderFromFile">
            <summary>
            SettingsProvider that reads from a specific named file instead of an automatically
            generated filename
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SettingsProviderFromFile.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Override
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SettingsProviderFromFile.GetSettingsFilename">
            <summary>
            Gets the filename to read settings from
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SettingsProviderFromFile.GetSettingsTypeName">
            <summary>
            Gets the type name used in the settings file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SettingsProviderFromFile.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the 
            specified application instance and settings property group.
            </summary>
            <param name="context">A System.Configuration.SettingsContext 
            describing the current application use.</param>
            <param name="collection">A 
            System.Configuration.SettingsPropertyCollection containing the 
            settings property group whose values are to be retrieved.</param>
            <returns>A System.Configuration.SettingsPropertyValueCollection 
            containing the values for the specified settings property 
            group.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SettingsProviderFromFile.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings.
            </summary>
            <param name="context">A System.Configuration.SettingsContext 
            describing the current application usage.</param>
            <param name="collection">A 
            System.Configuration.SettingsPropertyValueCollection representing
            the group of property settings to set.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FaceCamera">
            <summary>
            Specifies how a billboard should face the camera
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FaceCamera.None">
            <summary>
            Don't face camera
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FaceCamera.Horizontal">
            <summary>
            Face camera by swivelling horizontally
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FaceCamera.Direct">
            <summary>
            Face camera directly
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject">
            <summary>
            Base graphics object for displaying billboard textures.
            The texture will be fit into a 1x1m square in the world while retaining aspect ratio.
            To make it larger use the Scale property.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject">
            <summary>
            Represents a graphics object that is rendered in world space.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject">
            <summary>
            A GraphicsObject encapsulates objects that can be added to render queues [i.e. objects that can be rendered in 2D or 3D space].
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh)">
            <summary>
            Constructs a new instance of GraphicsObject.
            
            <remarks>
            A mesh can be shared by multiple GraphicsObjects. For this reason, the mesh is not automatically disposed by a GraphicsObject
            unless specified by one of its specializations.
            </remarks>
            </summary>
            <param name="mesh">The mesh associated with this graphics object.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState)">
            <summary>
            Constructs a new instance of GraphicsObject.
            
            <remarks>
            A mesh can be shared by multiple GraphicsObjects. For this reason, the mesh is not automatically disposed by a GraphicsObject
            unless specified by one of its specializations.
            </remarks>
            </summary>
            <param name="mesh">The mesh associated with this graphics object.</param>
            <param name="state">A valid instance of GraphicsState.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.UpdateInternalRenderObject(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            This method is called by the render engine in full-trust mode.
            All operations that require access to the graphics device are performed by this method.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.CreateInternalRenderObjectIfNecessary(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Creates the internal render object that is handled by the graphics engine.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.Clone">
            <summary>
            Returns a copy of the current graphics object.
            
            The returned object references a new set of indices and vertices. If the object uses dynamic buffers, no graphics data is copied
            to the new object. It is up to the application to repopulate the buffers.
            
            The object references new copies of materials. If the material references one or more textures, the materials will still
            point to the same copy of the textures.
            
            This method must be implemented by a derived class.
            </summary>
            <returns>A new instance of GraphicsObject.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.GetInternalRenderObject(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates and returns the graphics object internal representation.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The internal render object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.UpdateData(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the data contained by the object. All operations that require access to the graphics device may be 
            performed by this method.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.Dispose(System.Boolean)">
            <summary>
            Derived classes must implement this method to release their resources.
            </summary>
            <param name="disposing">Whether this method is being called from a Dispose() method.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.Dispose">
            <summary>
            Releases all resources used by this GraphicsObject.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.DeviceReset">
            <summary>
            This event is fired when the graphics device is reset. The most common reason that causes this event is a window resize.
            
            Static buffers are automatically recreated and repopulated before this event is raised. Dynamic buffers are automatically
            recreated and cleared, but it's up to the plug-in developer to repopulate them.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.RenderError">
            <summary>
            This event is fired when an error occurs while the graphics object is being processed by the graphics engine.
            
            Any errors caused by resources associated with this object (such as textures, effects) are also reported by this
            event.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.RenderFirst">
            <summary>
            Sets a flag indicating that this graphics object should render before any other objects.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.RenderLast">
            <summary>
            Sets a flag indicating that this graphics object should render after other objects.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.Name">
            <summary>
            Gets or sets the name of this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.Mesh">
            <summary>
            Gets or sets the Mesh associated with this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.State">
            <summary>
            Gets the current graphics object state. A GraphicsState is a collection of render states and materials.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.InternalRenderObject">
            <summary>
            Gets or sets the internal render object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.Animation">
            <summary>
            Flag indicating whether this object is an animation object indicating that it needs 
            to be updated every frame.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject.RenderErrorHandler">
            <summary>
            Delegate that handles RenderError events.
            </summary>
            <param name="sender">The graphics object that raised the error.</param>
            <param name="exception">The exception that caused the render error.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh)">
            <summary>
            Constructs a new instance of WorldGraphicsObject.
            </summary>
            <param name="mesh">A valid instance of Mesh.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState)">
            <summary>
            Constructs a new instance of WorldGraphicsObject.
            </summary>
            <param name="mesh">A valid instance of Mesh.</param>
            <param name="state">A valid instance of GraphicsState.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.UpdateTransform">
            <summary>
            Updates the LocalToGlobal and GlobalToLocal transforms.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.UpdateInternalRenderObject(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            This method is called by the render engine in full-trust mode.
            All operations that require access to the graphics device are performed by this method.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.Intersects(Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode)">
             <summary>
             Returns whether a sphere intersects with this object.
            
             The sphere is assumed to be in local coordinates. If necessary, use the GlobalToLocal matrix to convert it from global
             to local coordinates.
             This method should be called only if the object was created with the enableCollision flag set.
             </summary>
             <param name="sphere">The sphere (in local coordinates) to test for intersection.</param>
             <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox or IntersectBoundingSphere</param>
             <returns>Whether the sphere intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.Intersects(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode)">
            <summary>
            Returns whether an axis-aligned box intersects with this object.
            
            The box is assumed to be in local coordinates. If necessary, use the GlobalToLocal matrix to convert it from global
            to local coordinates.
            This method should be called only if the object was created with the enableCollision flag set.
            </summary>
            <param name="aabb">The axis-aligned box (in local coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox or IntersectBoundingSphere.</param>
            <returns>Whether the box intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tests whether a ray intersects with this object. If successful, hitPoint will contain the intersection point in global space.
            
            This method is supported only if the object was created with the enableCollision flag set.
            When mode is IntersectMesh, only static buffers are supported.
            </summary>
            <param name="ray">The ray (in global coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox, IntersectBoundingSphere or IntersectMesh.</param>
            <param name="hitPoint">Contains the hit point coordinate in global space if the ray intersects the object.</param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.Intersects(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tests whether the swept sphere intersects with this object. If successful, hitPoint will contain the intersection point in local coordinates.
            
            The swept sphere is assumed to be in local coordinates. If necessary, use the GlobalToLocal matrix to convert it from global
            to local coordinates.
            
            This method is supported only if the object was created with the enableCollision flag set.
            When mode is IntersectMesh, this method is supported only if the object was created with static vertex and index buffers.
            </summary>
            <param name="sweptSphere">The swept sphere (in local coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox, IntersectBoundingSphere or IntersectMesh.</param>
            <param name="hitPoint">Contains the hit point coordinate (in local coordinates) if the swept sphere intersects the object.</param>
            <returns>Whether the swept sphere intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.IntersectsMesh(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Double@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Plane3D@,System.Int32@)">
            <summary>
            Intersects the mesh with a swept sphere, providing all data needed for swept sphere intersection.
            </summary>
            <param name="sweptSphere">The swept sphere to intersect, in global coordinates.</param>
            <param name="intersectionPoint">The point at which the object is intersected.</param>
            <param name="percentage">The percentage along the sweep that the interseciton occurred.</param>
            <param name="sweepPosition">The position of the sphere that intersects the mesh, in global coordinates.</param>
            <param name="intersectionPlane">The intersection plane.</param>
            <param name="intersectingFaceIndex">The index of the face that intersects the object.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.IntersectsMesh(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Plane3D@,System.Int32@)">
            <summary>
            Intersects the mesh with a ray, providing all data needed for intersection.
            </summary>
            <param name="ray">The ray (in global coordinates) to test for intersection.</param>
            <param name="hitPoint">Contains the hit point coordinate (in local space) if the ray intersects the object.</param>
            <param name="intersectionPlane">The plane at intersection.</param>
            <param name="faceIndex"></param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.IntersectsSweptSphereAndMesh(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Intersects the mesh with a swept sphere, providing all data needed for swept sphere intersection.
            </summary>
            <param name="sweptSphere">The swept sphere to intersect.</param>
            <param name="intersection">The point at which the object is intersected.</param>
            <returns>True if the sphere has properly intersected with the model.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.Scale">
            <summary>
            The 3D scaling applied to the vertices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.Position">
            <summary>
            The object's position in world coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.RollPitchYaw">
            <summary>
            The Roll, Pitch and Yaw.
            
            If the orientation needs to be expressed differently (such as a quaternion), convert it to a 4x4 matrix and use
            the PostTransform property.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.PostTransform">
            <summary>
            An extra transformation matrix that can be used to transform the object's vertices.
            
            The PostTransform matrix is applied after the all other matrices but before the translation matrix.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.PreTransform">
            <summary>
            An extra transformation matrix that can be used to transform the object's vertices.
            
            The PreTransform matrix is the first matrix applied to the vertices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.LocalToGlobal">
            <summary>
            The transformation that converts the object from local to global space.
            
            This transformation is the multiplication of the PreTransform, Scale, Orientation, PostTransform
            and Position matrices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.GlobalToLocal">
            <summary>
            The inverse transformation matrix that can be used to convert coordinates from global to local space.
            
            This matrix can be described as Matrix.Inverse(PreTransform * Scale * Orientation * PostTransform * Position)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.ProjectionEnabled">
            <summary>
            Gets or sets whether the projection (camera + perspective) transformations are applied to the object.
            
            The default value is true. This property should be set to false only when objects have pre-transformed coordinates
            or they are rendered in a different coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.SupportsMeshIntersection">
            <summary>
            If false, mesh intersection calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.SupportsAABB">
            <summary>
            If false, AABB calls and bounding box/sphere intersection calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldGraphicsObject.AABB">
            <summary>
            The object's axis-aligned bounding box, in local coordinates.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.UpdateBillboardTransform(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Updates the transformation used to make the sprite face the camera.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.Clone">
            <summary>
            Clone is not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.Dispose(System.Boolean)">
            <summary>
            Clean up resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.FaceCamera">
            <summary>
            Set to true to make the billboard always face the camera. The default is false
            and Orientation is used to face the billboard.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.ZBufferEnabled">
            <summary>
            Gets or sets whether the sprite should render with z-buffering enabled. The default value is false.
            
            If this property is set to false, the sprite will always draw on top of the 3D geometry (since the z-buffer is disabled).
            It's up to the application developer to correctly sort the sprites, so they render in the correct order when they overlap.
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.Scale">
            <summary>
            The scaling applied to the billboard width and height.
            By default the texture is fit into a 1x1 meter square while retaining aspect ratio. A 200x100 pixel texture will be 1m by 0.5m.
            Applying unequal values for X and Y will distort the image.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.Position">
            <summary>
            The object's position in world coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.RollPitchYaw">
            <summary>
            The orientation of this billboard in local space. Default is upright facing north.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.AlphaEnabled">
             <summary>
             Gets or sets whether alpha blending is enabled while rendering the sprite. The default value is false.
            
             Set this property to true to enable transparency. Alpha values can be defined by the texture, by the sprite's color, or both.
             </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.Center">
            <summary>
            Gets or sets the texture's center. The  center is defined in pixel coordinates, where (0, 0) is the center of the
            source texture. The default value is (0, 0).
            
            If SourceRect is used, the sprite's center is defined as the center of the portion of the texture defined by the
            SourceRect coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.Color">
            <summary>
            Gets or sets a color that modulates the texture. The default value is Color.White, which in practice does not affect the 
            source texture.
            
            This property can be used to modulate the texture's alpha, color, or both.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.SourceRect">
            <summary>
            Gets or sets the rectangle that indicates the portion of the source texture to use when rendering the sprite.
            
            If the rectangle's width and height are zero, the entire source texture is used. The default value is (0, 0, 0, 0).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.Texture">
            <summary>
            The texture rendered by this billboard.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.ScaleRatio">
            <summary>
            The ratio the texture is multiplied by to scale it down to our 1M square
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseBillboardGraphicsObject.NeedUpdate">
            <summary>
            Set to true to recreate the geometry on next render.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BillboardGraphicsObject">
            <summary>
            Displays a texture as a billboard in the world.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BillboardGraphicsObject.#ctor">
            <summary>
            Creates a new billboard graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BillboardGraphicsObject.AlphaEnabled">
             <summary>
             Gets or sets whether alpha blending is enabled while rendering the sprite. The default value is false.
            
             Set this property to true to enable transparency. Alpha values can be defined by the texture, by the sprite's color, or both.
             </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BillboardGraphicsObject.Center">
            <summary>
            Gets or sets the texture's center. The  center is defined in pixel coordinates, where (0, 0) is the center of the
            source texture. The default value is (0, 0).
            
            If SourceRect is used, the sprite's center is defined as the center of the portion of the texture defined by the
            SourceRect coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BillboardGraphicsObject.Color">
            <summary>
            Gets or sets a color that modulates the texture. The default value is Color.White, which in practice does not affect the 
            source texture.
            
            This property can be used to modulate the texture's alpha, color, or both.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BillboardGraphicsObject.SourceRect">
            <summary>
            Gets or sets the rectangle that indicates the portion of the source texture to use when rendering the sprite.
            
            If the rectangle's width and height are zero, the entire source texture is used. The default value is (0, 0, 0, 0).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BillboardGraphicsObject.Texture">
            <summary>
            The texture rendered by this billboard.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect">
            <summary>
            Defines a base class that encapsulates the basic functionality of an Effect. An effect is a collection of vertex shaders,
            pixel shaders, techniques (usually defined in an .fx file) and an optional implementation of FixedFunctionFallback that
            defines how this effect should render using the fixed-function pipeline when none of the techniques are supported by the
            graphics hardware.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.#ctor">
            <summary>
            Constructs a new instance of BaseEffect.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.#ctor(Microsoft.MapPoint.Graphics3D.Effect)">
            <summary>
            Constructs a new instance of BaseEffect from an internal effect.
            </summary>
            <param name="internalEffect">A valid internal effect.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.LoadEffect(Microsoft.MapPoint.Graphics3D.Graphics3DDevice,System.String,System.IO.Stream)">
            <summary>
            Attempts to load an effect from a stream.
            </summary>
            <param name="device">The graphics device.</param>
            <param name="name">The effect name. Each effect name must be unique.</param>
            <param name="input">The stream containing the effect.</param>
            <returns>True if the effect was successfully loaded; False otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.HandleFromParameterName(System.String)">
            <summary>
            Returns the effect handle associated with a parameter string.
            
            This method returns null if the parameter is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <returns>An instance of EffectHandle.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,System.Boolean)">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,System.Int32)">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,System.Single)">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,System.Int32[])">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,System.Single[])">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,Microsoft.MapPoint.Graphics3D.Geometry.Matrix4x4S)">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,Microsoft.MapPoint.Graphics3D.Geometry.Vector4S)">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,System.Drawing.Color)">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalSetParameter(System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture)">
            <summary>
            Sets an effect parameter.
            
            This method returns false if the parameter does not exist or it is not used by the current technique.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>True if the parameter was successfully set; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.SetTechnique(System.String)">
            <summary>
            Sets the current effect technique.
            
            This method returns false if the technique name is invalid or if it is not supported by the graphics hardware.
            </summary>
            <param name="technique">The technique name.</param>
            <returns>True if the technique was successfully set, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.Update(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the effect when overriden in a subclass.
            
            This method is called every frame before any geometry associated with this effect is rendered.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.UpdatePendingParameters(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Update parameters that require access to the graphics device.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.ApplyMaterial(Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial)">
            <summary>
            Sets all effect parameters that are specified by a given material instance.
            </summary>
            <param name="material">A material.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.ReleaseParameters">
            <summary>
            Releases all internal parameter handles.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.Dispose">
            <summary>
            Releases all resources associated with this effect.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.Dispose(System.Boolean)">
            <summary>
            Releases all resources associated with this effect.
            </summary>
            <param name="disposing">Whether this method is being called by the Dispose() method.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.InternalEffect">
            <summary>
            Gets the internal effect.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.Loaded">
            <summary>
            Gets whether the effect is loaded and a valid technique is currently selected.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.ForceFixedFunctionMode">
            <summary>
            Gets or sets whether this effect should render using the fixed-function pipeline, even if the effect is loaded and 
            a valid technique is currently selected.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.FixedFunctionMode">
            <summary>
            Gets whether this effect is running in fixed-function mode.
            
            An effect runs in fixed-function mode if the current effect technique is not supported by the graphics hardware or
            if ForceFixedFunctionMode is true and an implementation of FixedFunctionFallback is provided.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.ForceFixedFunctionState">
            <summary>
            Gets or sets whether the fixed-function states associated with a FixedFunctionFallback instance should be set
            before rendering, even if the fixed-function mode is not set. When this flag is set, all parameters are assigned to
            the underlying shader and also sent to the FixedFunctionCallback implementation, if available.
            
            This is useful when the current technique implements a vertex shader but not a pixel shader. The fixed-function states
            set the fixed-function color blending stages.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.CurrentTechnique">
            <summary>
            Returns the current technique.
            
            To set the current technique, use SetTechnique().
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.FixedFunctionFallback">
            <summary>
            Gets or sets the fixed-function fallback instance. The default value is null.
            
            The effect parameters will be translated by this FixedFunctionFallback instance when the selected effect technique
            is not supported by the graphics hardware. If the hardware does not support any of the effect techniques and no
            FixedFunctionFallback instance is provided, the associated geometry is not rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.FixedFunctionState">
            <summary>
            Gets the fixed-function render state. This method returns null if a FixedFunctionFallback implementation is not set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect.FixedFunctionMaterial">
            <summary>
            Gets the fixed-function material. This method returns null if a FixedFunctionFallback implementation is not set.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect">
             <summary>
             Encapsulates a generic effect (a collection of related vertex and pixel shaders) that can be assigned to any
             graphics object.
             
             <remarks>
             Effects can (and should) be shared by multiple graphics objects whenever applicable. While it is possible to set
             effect parameters directly (by calling one of the SetParameter() overloads), the application should only do so
             when the parameter is common to all objects that reference the effect. All other parameters should be defined in an
             EffectMaterial instance. At rendering time, the graphics engine will assign the material parameters to the effect.
            
             Full trust code can load effects from files or embedded resources. Partial trust (in addition to full trust) code can 
             load one of the built-in effects defined by the engine, such as "WorldBasicEffect", which is the effect assigned to
             all graphics objects by default. For a list of available built-in effects, check the documentation for FromBuiltInEffect().
             
             Effects are loaded asynchronously by the graphics engine. Use the 'Loaded' property one frame after the effect was assigned
             to one or more graphics objects to check if the effect was successfully loaded. When an effect is successfully loaded, the 
             first valid technique is selected by default. To select a different technique, use the SetTechnique() method.
             
             The graphics engine automatically assigns a list or parameters to each Effect instance:
                - worldViewProjection: the World * View * Projection matrix, assigned per graphics object, per frame.
                - worldTransform: the World matrix, assigned per graphics object, per frame.
                - worldAmbientLight: the world's ambient light, assigned whenever it is changed.
                - worldDiffuseLight: the sun light color (i.e. directional light diffuse color), assigned whenever it is changed.
                - worldLightDirection: the sun light direction (a normalized vector), assigned whenever it is changed.
             
             Since effects can be shared by multiple graphics objects and no reference counting is performed, it is up to the
             application to release (calling the Dispose method) an effect when no longer in use.
             </remarks>
             </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.FromResource(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an effect from an embedded resource.
            
            The caller must have full trust code access to execute this method.
            </summary>
            <param name="assembly">The assembly containing the resource.</param>
            <param name="resource">The resource name.</param>
            <returns>An instance of Effect or null if the input data is invalid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.FromResource(System.Reflection.Assembly,System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback)">
            <summary>
            Loads an effect from an embedded resource.
            
            The caller must have full trust code access to execute this method.
            </summary>
            <param name="assembly">The assembly containing the resource.</param>
            <param name="resource">The resource name.</param>
            <param name="ffFallback">A FixedFunctionFallback object that handles fixed-function render state updates
            when the techniques provided by the effect are not supported by the current graphics hardware.</param>
            <returns>An instance of Effect or null if the input data is invalid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.FromFile(System.String)">
            <summary>
            Loads an effect from a file.
            
            The caller must have full trust code access to execute this method.
            </summary>
            <param name="path">The file path.</param>
            <returns>An instance of Effect.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.FromFile(System.String,System.Boolean)">
            <summary>
            Loads an effect from a file.
            
            If <paramref name="reloadEffectWhenFileChanges ="/>is set to true, the effect is automatically reloaded when the file
            specified by <paramref name="path"/> is changed. The effect is only reloaded if the updated file is still a valid effect file
            and the current technique is still present in the update file. The internal effect states are not preserved during the update. 
            Subscribe to the OnEffectChanged event to receive a notification when the effect is updated.
            
            The caller must have full trust code access to execute this method.
            </summary>
            <param name="path">The file path.</param>
            <param name="reloadEffectWhenFileChanges">Whether the effect should be automatically reloaded when the corresponding file is changed.</param>
            <returns>An instance of Effect.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.FromFile(System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback)">
            <summary>
            Loads an effect from a file.
            
            The caller must have full trust code access to execute this method.
            </summary>
            <param name="path">The file path.</param>
            <param name="ffFallback">An FixedFunctionFallback object that handles fixed-function render state updates
            when the techniques provided by the effect are not supported by the current graphics hardware.</param>
            <returns>An instance of Effect.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.FromBuiltInEffect(System.String)">
            <summary>
            Loads a built-in effect. If the built-in effect implements IFixedFunctionFallback, it is automatically assigned
            to the returned effect instance.
            
            The following built-in effects are available:
               - WorldBasicEffect (the default effect for every graphics object)
            </summary>
            <param name="effectName">One of the built-in effect names.</param>
            <returns>An instance of Effect if the effect name is valid; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.FromFixedFunctionFallback(Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback)">
            <summary>
            Creates an empty effect that forwards all its parameters to the FixedFunctionFallback implementation.
            </summary>
            <param name="fallback">A FixedFunctionFallback instance.</param>
            <returns>An instance of Effect.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.#ctor(Microsoft.MapPoint.Graphics3D.Effect)">
            <summary>
            Constructs a new instance of Effect from an internal effect.
            </summary>
            <param name="internalEffect">A valid internal effect.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.#ctor">
            <summary>
            Constructs a new instance of Effect.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,System.Boolean)">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,System.Int32)">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,System.Single)">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,System.Int32[])">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,System.Single[])">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,System.Drawing.Color)">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,Microsoft.MapPoint.Graphics3D.Geometry.Vector4S)">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,Microsoft.MapPoint.Graphics3D.Geometry.Matrix4x4S)">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetParameter(System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture)">
            <summary>
            Sets an effect parameter.
            </summary>
            <param name="parameter">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetTechnique(System.String)">
            <summary>
            Sets the current effect technique.
            
            The technique is set asynchronously. To query whether the technique was validated and properly set, 
            check the CurrentTechnique property one or more frames after the SetTechnique() call was made.
            If the technique was set successfully, the current technique will match the technique name passed to this
            method.
            </summary>
            <param name="technique">The technique name.</param>
            <returns>True if the technique name is valid, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetTechnique(System.String,System.Boolean)">
            <summary>
            Sets the current effect technique.
            
            The technique is set asynchronously. To query whether the technique was validated and properly set, 
            check the CurrentTechnique property one or more frames after the SetTechnique() call was made.
            If the technique was set successfully, the current technique will match the technique name passed to this
            method and HybridMode will be set to true.
            </summary>
            <param name="technique">The technique name.</param>
            <param name="hybridMode">Whether this technique does not have a pixel shader and the fixed-function multi-texturing
            should be used.</param>
            <returns>True if the technique name is valid, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetFirstValidTechnique(System.String[])">
            <summary>
            Sets the first technique in the list that is supported by the graphics hardware.
            
            The technique is set asynchronously. To query whether one of the techniques are validated and set, check
            the CurrentTechnique property one of more frames after the SetTechnique() call was made.
            
            If none of the techniques was valid, CurrentTechnique will return either null (if no technique was previously set)
            or the last technique that was successfully set.
            </summary>
            <param name="techniques">A list of technique names.</param>
            <returns>True if all technique names are valid, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.SetFirstValidTechnique(System.Collections.Generic.KeyValuePair{System.String,System.Boolean}[])">
            <summary>
            Sets the first technique in the list that is supported by the graphics hardware.
            
            The technique is set asynchronously. To query whether one of the techniques are validated and set, check
            the CurrentTechnique property one of more frames after the SetTechnique() call was made.
            
            If none of the techniques was valid, CurrentTechnique will return either null (if no technique was previously set)
            or the last technique that was successfully set.
            </summary>
            <param name="techniques">A list of pairs containing technique names and whether they work in hybrid mode (
            vertex shaders process vertices and the fixed-function multitexturing pipeline performs color blending.</param>
            <returns>True if all technique names are valid, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.Update(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the effect internal state.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.EffectFileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            This method is called when the effect file is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">A valid instance of FileSystemEventArgs.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.UpdateParameters">
            <summary>
            Updates all effect parameters.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.Dispose(System.Boolean)">
            <summary>
            Releases all resources associated with this effect.
            </summary>
            <param name="disposing">Whether this method is being called by the Dispose() method.</param>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.OnEffectChanged">
            <summary>
            Raised when an effect is updated.
            An effect is updated only when it is created with FromFile() and the reload flag is set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.Name">
            <summary>
            Gets the name of the effect;
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.CurrentTechnique">
            <summary>
            Returns the current technique.
            
            To set the current technique, use SetTechnique().
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Effect.OnEffectChangedHandler">
            <summary>
            Delegate that handles a OnEffectChanged event.
            </summary>
            <param name="sender">The effect raising the event.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial">
            <summary>
            Encapsulates a material that describes how the geometry associated with it should be rendered.
            A material is defined by a collection of parameters (textures, matrices, vectors, colors, etc) and a reference to an effect.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial.#ctor(System.String)">
            <summary>
            Constructs a new instance of EffectMaterial
            </summary>
            <param name="name">The material name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial.Clone">
            <summary>
            Returns a new copy of the material.
            
            The new material will point to the same instance of the Effect referenced by this instance of material.
            </summary>
            <returns>A new instance of EffectMaterial.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial.UpdateEffect(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Applies all material parameters to the effect and updates its internal state.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial.Name">
            <summary>
            Gets or sets the material name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial.Effect">
            <summary>
            Gets or sets the effect that should render this material. The default value is WorldBasicEffect.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial.Technique">
            <summary>
            Gets or sets the effect technique that should render this material.
            The default value is null.
            
            When this value is null, the effect technique is not updated by the engine when this material
            is used. This is fine when multiple materials sharing the same effect use the same technique, but it
            may lead to unpredictable behavior when one or more (but not all) materials set this property
            (since the order in which materials are used by the engine is undefined).
            
            If the effect does not support the current technique, the behavior is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial.Parameters">
            <summary>
            Gets the collection of material parameters.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection">
            <summary>
            A collection of EffectMaterials.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.Add(Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial)">
            <summary>
            Adds a new material.
            </summary>
            <param name="newMaterial">The new material.</param>
            <returns>The new material id.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.Update(System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial)">
            <summary>
            Updates a material.
            
            When an EffectMaterial reference is added to a MaterialCollection, any modification to its properties are automatically
            handled by the graphics engine. This method should be used only to replace a material.
            </summary>
            <param name="materialId">the material id.</param>
            <param name="updatedMaterial">The new material for the slot.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.Remove(System.Int32)">
            <summary>
            Removes a material.
            
            When a material is removed, all materials with an ID greater than the removed material's ID have
            their IDs decremented by one.
            </summary>
            <param name="materialId">The material ID.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.Clear">
            <summary>
            Removes all materials from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.Clone">
            <summary>
            Returns a new copy of the material collection. 
            The clones material collection contains clones of the materials.
            </summary>
            <returns>A new instance of MaterialCollection.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.GetRenderEffectList(Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState)">
            <summary>
            Returns the RenderEffect list that is used for rendering.
            </summary>
            <param name="state">The render state associated with the object that contains this collection of materials.</param>
            <returns>A RenderEffect list.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.Count">
            <summary>
            The number of materials in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterialCollection.Item(System.Int32)">
            <summary>
            Returns a material associated with the material id.
            </summary>
            <param name="id">The material id.</param>
            <returns>A material.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback">
            <summary>
            Defines a set or overridable methods that translate effect parameters into fixed-function states.
            
            By default, all methods are no-ops.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,System.Single,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,System.Boolean,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,System.Int32[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,System.Single[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,System.Drawing.Color,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,Microsoft.MapPoint.Graphics3D.Geometry.Matrix4x4S,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,Microsoft.MapPoint.Graphics3D.Geometry.Vector4S,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.ProcessParameter(System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture,Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Translates an effect parameter to the corresponding fixed-function operations.
            </summary>
            <param name="parameterName">The effect parameter name.</param>
            <param name="parameterValue">The effect parameter value.</param>
            <param name="state">The fixed function state.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
            <returns>Returns whether the parameter was handled by the method.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionFallback.UpdateState(Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Sets constant fixed-function states.
            
            This method is called every frame, but the render states and materials are preserved accross frames. Avoid per-frame
            operations that could be performed only when the input data change.
            </summary>
            <param name="state">The fixed function state associated with this object.</param>
            <param name="material">The material (including its texture list) that is used by the fixed-function lighting engine.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState">
            <summary>
            Encapsulates all render states that set the behavior of the rendering pipeline when the fixed-function pipeline is used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState.#ctor">
            <summary>
            Constructs a new instance of FixedFunctionState.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState.UpdateInternalState(Microsoft.MapPoint.Graphics3D.State.RenderStateObject)">
            <summary>
            Updates the internal render state object.
            </summary>
            <param name="internalRenderState">The internal render state object.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState.Lighting">
            <summary>
            The render states that control lighting.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState.Stages">
            <summary>
            Encapsulates the render states for all texture blending units.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState.TextureFactor">
            <summary>
            The render state that controls the texture factor constant.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IMaterialParameter">
            <summary>
            Defines the interface of an immutable material parameter.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IMaterialParameter.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IMaterialParameter.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IMaterialParameter.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter">
            <summary>
            Defines the namespace for all material parameter types.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Bool">
            <summary>
            Encapsulates a material parameter that holds a boolean.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Bool.#ctor(System.Boolean)">
            <summary>
            Constructs a new instance of Bool.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Bool.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Bool.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Bool.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Float">
            <summary>
            Encapsulates a material parameter that holds a 32-bit float.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Float.#ctor(System.Single)">
            <summary>
            Constructs a new instance of Float.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Float.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Float.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Float.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.FloatArray">
            <summary>
            Encapsulates a material parameter that holds an array of 32-bit floats.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.FloatArray.#ctor(System.Single[])">
            <summary>
            Constructs a new instance of FloatArray.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.FloatArray.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.FloatArray.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.FloatArray.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Int">
            <summary>
            Encapsulates a material parameter that holds a 32-bit integer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Int.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of Int.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Int.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Int.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Int.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.IntArray">
            <summary>
            Encapsulates a material parameter that holds an array of 32-bit integers.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.IntArray.#ctor(System.Int32[])">
            <summary>
            Constructs a new instance of IntArray.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.IntArray.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.IntArray.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.IntArray.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Matrix">
            <summary>
            Encapsulates a material parameter that holds a float Matrix.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Matrix.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Constructs a new instance of Matrix.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Matrix.#ctor(Microsoft.MapPoint.Graphics3D.Geometry.Matrix4x4S)">
            <summary>
            Constructs a new instance of Matrix.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Matrix.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Matrix.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Matrix.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Vector">
            <summary>
            Encapsulates a material parameter that holds a 4D single-precision vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Vector.#ctor(Microsoft.MapPoint.Graphics3D.Geometry.Vector4S)">
            <summary>
            Constructs a new instance of Vector.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Vector.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Vector.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Vector.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Color">
            <summary>
            Encapsulates a material parameter that holds a color (ARGB).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Color.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of Color.
            </summary>
            <param name="val">The parameter value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Color.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Color.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Color.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Texture">
            <summary>
            Encapsulates a material parameter that holds a texture.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Texture.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture)">
            <summary>
            Constructs a new instance of Texture.
            </summary>
            <param name="val">The material parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Texture.SetEffectParameter(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect,System.String)">
            <summary>
            Sets an effect parameter with the value held by this material parameter.
            </summary>
            <param name="effect">The effect to have a parameter set.</param>
            <param name="paramName">The effect parameter name.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Texture.GetValue">
            <summary>
            Gets the parameter value.
            
            The method caller can cast the value to the type returned by GetParameterType().
            </summary>
            <returns>An instance of object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameter.Texture.GetParameterType">
            <summary>
            Gets the data type managed by this parameter.
            </summary>
            <returns>An instance of Type.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameters">
            <summary>
            Encapsulates a collection of material parameters that can be accessed by name.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameters.SetValue(System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IMaterialParameter)">
            <summary>
            Sets the value of a material parameter.
            </summary>
            <param name="name">The parameter's name.</param>
            <param name="value">The paramenter's value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameters.GetValue(System.String)">
            <summary>
            Gets the value of a material parameter.
            </summary>
            <param name="name">The parameter's name.</param>
            <returns>A concrete implementation of IMaterialParameter. An ArgumentException is raised if the parameter name is invalid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameters.ContainsParameter(System.String)">
            <summary>
            Returns whether the material contains the specified parameter.
            </summary>
            <param name="name">The parameter name.</param>
            <returns>True if the parameter exists; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameters.Clone">
            <summary>
            Returns a new copy of this material parameter list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialParameters.UpdateEffect(Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseEffect)">
            <summary>
            Updates an effect with the material parameters from this collection.
            </summary>
            <param name="effect">A valid instance of BaseEffect.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderEffect">
            <summary>
            The internal implementation of IRenderEffect, which establishes how the render engine gets an effect in a state
            that is ready to be used for rendering (i.e. all its parameters are set). It also defines the fixed-function materials
            and render states when the shaders defined by the effect are not supported by the graphics hardware.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderEffect.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.EffectMaterial,Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState)">
            <summary>
            Constructs a new instance of RenderEffect.
            </summary>
            <param name="material"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderEffect.TryGetInternalRenderEffect(Microsoft.MapPoint.Graphics3D.Graphics3DDevice,Microsoft.MapPoint.Graphics3D.Effect@)">
            <summary>
            Gets the internal Effect ready to be used for rendering.
            </summary>
            <param name="device">The graphics device.</param>
            <param name="effect">If successful, this reference will point to a valid instance of Effect</param>
            <returns>The current render effect mode.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderEffect.GetFixedFunctionMaterial(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Returns the fixed-function material associated with this effect.
            This method throws an InvalidOperationException exception if fixed-function rendering is not supported by this effect.
            
            This method assumes that TryGetInternalRenderEffect() has been previously called -- i.e. the internal effect state
            is up-to-date.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The fixed-function material associated with this effect.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderEffect.GetTextureList(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Returns the textures referenced by this effect.
            This method throws an InvalidOperationException exception if fixed-function rendering is not supported by this effect.
            
            This method assumes that TryGetInternalRenderEffect() has been previously called -- i.e. the internal effect state
            is up-to-date.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>A list of textures referenced by this effect.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderEffect.GetFixedFunctionRenderState(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Returns the render state containing all states that need to be set when fixed-function rendering is used.
            This method throws an InvalidOperationException exception if fixed-function rendering is not supported by this effect.
            
            This method assumes that TryGetInternalRenderEffect() has been previously called -- i.e. the internal effect state
            is up-to-date.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>An instance of RenderStateObject.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldBasicEffect">
            <summary>
            NOT YET IMPLEMENTED!
            
            This class will provide a common interface to the default shader used by the engine to render objects in 3D space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WorldBasicEffect.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GlobeControlAccessibleObject">
            <summary>
            Accessibility object used to provide access to rendered objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControlAccessibleObject.#ctor(Microsoft.MapPoint.Rendering3D.GlobeControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.GlobeControlAccessibleObject"/> class.
            </summary>
            <param name="globeControl"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControlAccessibleObject.GetChildCount">
            <summary>
            Gets the number of UIManager RenderHitPair objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControlAccessibleObject.GetChild(System.Int32)">
            <summary>
            Gets the Accessibility object of the RenderHitPair identified by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControlAccessibleObject.Role">
            <summary>
            Gets the role.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions">
            <summary>
            Defines the supported texture creation options.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions.None">
            <summary>
            Do not perform any extra pre-processing during texture loading.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions.EncodeToDXT1">
            <summary>
            Convert the texture to the DXT1 format. If the input texture is already in any DXT format, this flag
            is ignored.
            
            The EncodetoDXT1 and AutoGenerateMipMaps are mutually exclusive. It is an error to specify both flags
            simultaneously. Note that while mipmaps cannot be automatically generated from DXT1 textures, loading mipmapped
            DXT1 textures is a supported scenario.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions.AutoGenerateMipMaps">
            <summary>
            Automatically generate mipmaps for the input texture. If the input texture is already mipmapped, this flag
            is ignored.
            
            The EncodetoDXT1 and AutoGenerateMipMaps are mutually exclusive. It is an error to specify both flags
            simultaneously. Note that while mipmaps cannot be automatically generated from DXT1 textures, loading mipmapped
            DXT1 textures is a supported scenario.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseMeshGraphicsObject">
            <summary>
            A graphics object that renders in world space and exposes all render states, materials and transformations.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseMeshGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh)">
            <summary>
            Constructs a new instance of BaseMeshGraphicsObject.
            </summary>
            <param name="mesh">A valid Mesh instance.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseMeshGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState)">
            <summary>
            Constructs a new instance of BaseMeshGraphicsObject.
            </summary>
            <param name="mesh">A valid instance of Mesh.</param>
            <param name="state">A valid instance of GraphicsState.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseMeshGraphicsObject.Materials">
            <summary>
            Returns the list of materials associated with this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseMeshGraphicsObject.EffectMaterials">
            <summary>
            Returns the list of materials associated with this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseMeshGraphicsObject.RenderState">
            <summary>
            The render state associated with this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BaseMeshGraphicsObject.State">
            <summary>
            Gets the graphics states of this object.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsBufferUsage">
            <summary>
            Encapsulates the Graphics buffer usage options.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsBufferUsage.Static">
            <summary>
            The graphics buffer should be optimized for static access.
            
            Use a static buffer when the data is rarely changed. The buffer will be placed in video-optimized memory for faster rendering,
            usually in VRAM. A static buffer update is more expensive than a dynamic buffer update.
            The data will be cached in system memory. The buffer can be accessed by the application and is automatically recreated when
            the device is reset.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsBufferUsage.Dynamic">
            <summary>
            The graphics buffer should be optimized for dynamic access.
            
            Use a dynamic buffer when the data is updated often (one of more updates per frame). The buffer will be usually placed in 
            AGP memory for fast updates. A dynamic buffer is not cached in system memory and is write-only. 
            Since the data is stored in video memory, it cannot be accessed by the application. When a device reset even is raised,
            the buffer is automatically recreated but it is up to the application to repopulate it.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState">
            <summary>
            Encapsulates all states (a collection of materials and render states) of a graphics object.
            
            A graphics state instance can be shared by multiple graphics objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.#ctor">
            <summary>
            Constructs a new instance of GraphicsState.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.Clone">
            <summary>
            Returns a copy of the current graphics state.
            
            The object references new copies of materials. If the material references one or more textures, the materials will still
            point to the same copies of the textures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.GetDepthOnlyEffect">
            <summary>
            Returns the RenderEffect that is used for rendering depth.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.Materials">
            <summary>
            Returns the list of materials associated with this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.RenderState">
            <summary>
            Gets or sets the render state collection associated with this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.EffectMaterials">
            <summary>
            Gets the list of materials associated with this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.DepthOnlyEffect">
            <summary>
            Effect for rendering depth
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState.DefaultMaterial">
            <summary>
            Gets the default material that should be used when no materials are set.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh">
            <summary>
            Represents a mesh (a collection of vertices and indices).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tests whether a ray intersects with this object. If successful, hitPoint will contain the intersection point in local coordinates.
            
            The ray is assumed to be in local coordinates. If necessary, use the GlobalToLocal matrix to convert it from global
            to local coordinates.
            
            This method is supported only if the object was created with the enableCollision flag set.
            When mode is IntersectMesh, only static buffers are supported.
            
            This method must be implemented by a derived class.
            </summary>
            <param name="ray">The ray (in local coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox, IntersectBoundingSphere or IntersectMesh.</param>
            <param name="hitPoint">Contains the hit point coordinate (in local space) if the ray intersects the object.</param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.IntersectsMesh(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Double@,System.Int32@)">
            <summary>
            Intersects the mesh with a swept sphere, providing all data needed for swept sphere intersection.
            
            This method must be implemented by a derived class.
            </summary>
            <param name="sweptSphere">The swept sphere to intersect.</param>
            <param name="intersectionPoint">The point at which the object is intersected.</param>
            <param name="percentToIntersection"></param>
            <param name="intersectingFaceIndex">The index of the face that interscts the object.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.IntersectsMesh(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Int32@)">
            <summary>
            Intersects the mesh with a ray, providing all data needed for swept sphere intersection.
            
            This method must be implemented by a derived class.
            </summary>
            <param name="ray">The ray (in local coordinates) to test for intersection.</param>
            <param name="hitPoint">Contains the hit point coordinate (in local space) if the ray intersects the object.</param>
            <param name="normal">The plane at intersection.</param>
            <param name="intersectingFaceIndex"></param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.Update(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the graphics index and vertex buffers.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The number of indices in the index buffer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.GetVertices">
            <summary>
            Gets the vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.GetIndexType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.GetIndices">
            <summary>
            Get the indices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.Clone">
            <summary>
            Returns a new copy of this mesh.
            
            This method must be implemented by a derived class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.Dispose">
            <summary>
            Releases resources held by this object.
            
            This method must be implemented by a derived class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.CreateGraphicsObject">
            <summary>
            Creates a MeshGraphicsObject that contains this mesh.  
            The MeshGraphicsObject will have the same generic parameters as the mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.CreateGraphicsObject(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState)">
            <summary>
            Derived classes must override this method to create a MeshGraphicsObject that contains this mesh.  
            The MeshGraphicsObject will have the same generic parameters as the mesh.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this object.
            
            This method must be implemented by a derived class.
            </summary>
            <param name="disposing">Whether this object is being disposed.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.BoundingSphere">
            <summary>
            The object's aproximated bounding sphere, in local coordinates.
            
            The sphere's center is not necessarily (0,0,0).
            To convert the sphere to global coordinates, multiply its coordinates by the LocalToGlobal matrix.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.AABB">
            <summary>
            The object's axis-aligned bounding box, in local coordinates.
            
            To convert the box to global coordinates, multiply its coordinates by the LocalToGlobal matrix.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.SupportsMeshIntersection">
            <summary>
            If false, mesh intersection calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.SupportsAABB">
            <summary>
            If false, AABB calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.VertexFormatDescription">
            <summary>
            Gets the mesh vertex format.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.Subsets">
            <summary>
            Gets the mesh subsets.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.VertexCount">
            <summary>
            Gets the number of vertices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.InternalVertexBuffer">
            <summary>
            Gets the internal vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh.InternalIndexBuffer">
            <summary>
            Gets the internal index buffer.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2">
            <summary>
            Implements a mesh (a collection of vertices and indices).
            </summary>
            <typeparam name="VertexFormat">The vertex format.</typeparam>
            <typeparam name="IndexFormat">The index format, either ushort or uint.</typeparam>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsBufferUsage,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsBufferUsage,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a new MeshData instance.
            </summary>
            <param name="vertexBufferUsage">The vertex buffer usage.</param>
            <param name="indexBufferUsage">The index buffer usage. Only full-trust code can use dynamic index buffers.</param>
            <param name="vertexCount">The initial capacity of the vertex buffer.</param>
            <param name="indexCount">The initial capacity of the index buffer.</param>
            <param name="enableAABB">If using dynamic buffer usage for the vertex buffer, calls to AABB will fail unless this
            is true.  There is a memory and performance cost to setting this to true.  If using static vertex buffers, this
            parameter is ignored.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.#ctor">
            <summary>
            Constructs a new MeshData instance with static buffers and support for collision detection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.#ctor(`0[],`1[],Microsoft.MapPoint.Graphics3D.Types.MeshSubset[])">
            <summary>
            Initializes a new instance of the MeshData class from pre-defined data.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <param name="subsets"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer{`0},Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer{`1})">
            <summary>
            Constructs a new MeshData instance that references the vertex and index buffers provided to the constructor.
            </summary>
            <param name="vBuffer">The vertex buffer.</param>
            <param name="iBuffer">The index buffer.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.InvalidateBoundingBox">
            <summary>
            Invalidate the currently computed bounding box
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.ComputeSubsetBounds">
            <summary>
            Computes a bounding box for each subset of the mesh.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.GetVertices">
            <summary>
            Gets the vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.GetIndexType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.GetIndices">
            <summary>
            Get the indices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.Update(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the graphics index and vertex buffers.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The number of indices in the index buffer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tests whether a ray intersects with this object. If successful, hitPoint will contain the intersection point in local coordinates.
            
            The ray is assumed to be in local coordinates. If necessary, use the GlobalToLocal matrix to convert it from global
            to local coordinates.
            
            This method is supported only if the object was created with the enableCollision flag set.
            When mode is IntersectMesh, only static buffers are supported.
            </summary>
            <param name="ray">The ray (in local coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox, IntersectBoundingSphere or IntersectMesh.</param>
            <param name="hitPoint">Contains the hit point coordinate (in local space) if the ray intersects the object.</param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.IntersectsMesh(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Double@,System.Int32@)">
            <summary>
            Intersects the mesh with a swept sphere, providing all data needed for swept sphere intersection.
            </summary>
            <param name="sweptSphere">The swept sphere to intersect.</param>
            <param name="intersectionPoint">The point at which the object is intersected.</param>
            <param name="percentToIntersection"></param>
            <param name="intersectingFaceIndex">The index of the face that interscts the object.</param>
            <returns>The intersection result.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.IntersectsMesh(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Int32@)">
            <summary>
            Intersects the mesh with a ray, providing all data needed for swept sphere intersection.
            </summary>
            <param name="ray">The ray (in local coordinates) to test for intersection.</param>
            <param name="hitPoint">Contains the hit point coordinate (in local space) if the ray intersects the object.</param>
            <param name="normal">The plane at intersection.</param>
            <param name="intersectingFaceIndex"></param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.CreateGraphicsObject(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState)">
            <summary>
            Creates a MeshGraphicsObject that contains this mesh.  
            The MeshGraphicsObject will have the same generic parameters as the mesh.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.Clone">
            <summary>
            Returns a new copy of this mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.Vertices">
            <summary>
            Gets the vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.Indices">
            <summary>
            Gets the index buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.VertexFormatDescription">
            <summary>
            Gets the mesh vertex format.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.AABB">
            <summary>
            The object's axis-aligned bounding box, in local coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.BoundingSphere">
            <summary>
            Returns the object's aproximated bounding sphere, in local coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.InternalIndexBuffer">
            <summary>
            Gets the internal index buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.InternalVertexBuffer">
            <summary>
            Gets the internal vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.Subsets">
            <summary>
            Gets the mesh subsets.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.VertexCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.SupportsMeshIntersection">
            <summary>
            If false, mesh intersection calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData`2.SupportsAABB">
            <summary>
            If false, AABB calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2">
             <summary>
             A graphics object that exposes render states, materials, transformations, and direct access to the vertex and index buffers.
             </summary>
             <remarks>
             A MeshGraphicsObject provides methods to handle mesh vertices, materials, textures and transformations.
             
             The MeshGraphicsObject supports only indexed primitives.
            
             To use indexed primitives, the following has to be done:
              - Add any number of materials using the Materials.Add() method.
              - Use any of the SetVertexData methods to add/modify vertices.
              - Use any of the SetIndexData methods to add/modify indices.
             
             Each group of indices is associated with a primitive type and a material id. The MeshGraphicsObject internally handles
             multiple 'mesh subsets'. A subset represents a contiguous group of indices that are associated to the same primitive type
             and material id. One D3D DrawIndexedPrimitive() call is issued for each subset.
             
             The MeshGraphicsObject supports multiple properties to handle transformations: Position, Orientation, Scale and Transform.
             
             To use textures, the following has to be done:
              - Create a material and add one of more Texture instances to the material's texture collection. Add the material
                to this object's material collection (Materials property). Multiple materials can be added to the collection.
              - Associate any number of primitives to a material, as explained above.
              - The same texture can be added to multiple materials.
             
             During rendering, the graphics engine will go through the material's textures and set each texture blending stage with the
             corresponding texture. The texture referenced by the first entry in the material's texture ID collection is set to the first
             stage; the second texture referenced by the texture ID collection is set to the second stage and so on. Use the corresponding
             render states to enable/disable texture stages and to define how texture blending should be performed.
             
             Note that textures are not automatically disposed when a MeshGraphicsObject instance is disposed, since multiple materials and
             graphic objects may reference the same texture. To ensure textures are disposed properly, call the Dispose() method for each
             texture instance.
             
             Basic collision detection routines are available. When a mesh is created with the 'collision detection' flag set (see
             the MeshGraphicsObject constructor for more info), the Intersects methods can be used, in addition to the AABB and BoundingSphere
             properties. Note that all coordinates are in local space. Use the GlobalToLocal and LocalToGlobal matrices to transform the
             coordinates from/to global space.
             There are other restrictions that apply to a few collision detection methods. Please see their documentation for more info.
             </remarks>
             <typeparam name="VertexFormat">The vertex format.</typeparam>
             <typeparam name="IndexFormat">The index format, either uint or ushort.</typeparam>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData{`0,`1})">
            <summary>
            Constructs a new instance of MeshGraphicsObject.
            
            The mesh passed to the constructor is not automatically disposed when this graphics object is disposed, since 
            multiple objects may be sharing the same copy or the mesh (no reference counting is used).
            </summary>
            <param name="mesh">A valid Mesh instance.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshData{`0,`1},Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsState)">
             <summary>
             Constructs a new instance of MeshGraphicsObject.
            
             The mesh passed to the constructor is not automatically disposed when this graphics object is disposed, since 
             multiple objects may be sharing the same copy or the mesh (no reference counting is used).
             </summary>
             <param name="mesh"></param>
             <param name="state"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.#ctor">
            <summary>
            Constructs a new MeshGraphicsObject instance with static buffers and no support for collision detection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsBufferUsage,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsBufferUsage,System.Int32,System.Int32,System.Boolean)">
             <summary>
             Constructs a new MeshGraphicsObject instance.
             
             Set enableCollision to true to enable the usage of Intersects() methods, BoundingSphere and AABB properties.
             The cost of enabling this flag is negligible when using static buffers. When using dynamic buffers, changes to the buffers
             have to be tracked internally, increasing the cost (CPU and memory comsumption) per update. Use the provided Intersection()
             methods cautiously. A dedicated collision detection mechanism should be implemented if non-trivial hit detection is desired.
            
             The mesh created by this graphics object is automatically disposed when this object is disposed.
             </summary>
             <param name="vertexBufferUsage">The vertex buffer usage.</param>
             <param name="indexBufferUsage">The index buffer usage. Only full-trust code can use dynamic index buffers.</param>
             <param name="vertexCount">The initial capacity of the vertex buffer.</param>
             <param name="indexCount">The initial capacity of the index buffer.</param>
             <param name="enableAABB">If using dynamic buffer usage for the vertex buffer, calls to AABB will fail unless this
             is true.  There is a memory and performance cost to setting this to true.  If using static vertex buffers, this
             parameter is ignored.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.UpdateInternalRenderObject(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            This method is called by the render engine in full-trust mode.
            All operations that require access to the graphics device are performed by this method.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.Clone">
            <summary>
            Returns a copy of the current graphics object.
            
            The return object references a new set of indices and vertices. If the object uses dynamic buffers, no data is copied
            to the new object. It is up to the application developer to repopulate the buffers.
            
            The object references new copies of materials. If the material references one or more textures, the materials will still
            point to the same copy of the texture.
            </summary>
            <returns>A new instance of MeshGraphicsObject.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this GraphicsObject.
            </summary>
            <param name="disposing">Whether this object is being disposed.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.MeshData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.Vertices">
            <summary>
            Gets the vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshGraphicsObject`2.Indices">
            <summary>
            Gets the index buffer.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation">
            <summary>
            Encapsulates all information related to an index buffer subset.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of MeshSubsetInformation.
            </summary>
            <param name="primType">The subset primitive type.</param>
            <param name="indexStart">The first entry in the index buffer that is referenced by the subset.</param>
            <param name="indexCount">The number of indices in this subset.</param>
            <param name="materialId">The material associated with this subset</param>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation.PrimitiveType">
            <summary>
            The Primitive Type.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation.IndexStart">
            <summary>
            The first entry in the index buffer that represents this subset.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation.IndexCount">
            <summary>
            The number of indices in this subset.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation.MaterialId">
            <summary>
            The material associated with this subset.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation.PrimitiveCount">
            <summary>
            The number of primitives in this subset.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1">
            <summary>
            Allows for the construction of a mesh graphics object from the modeling API.
            </summary>
            <typeparam name="VertexFormat">The desired vertex format.</typeparam>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.MaxBoneCount">
            <summary>
            The number of bones supported per vertex.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.materials">
            <summary>
            All modeling materials for the mesh.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.#ctor(Microsoft.MapPoint.Modeling.GroupNode,System.Collections.Generic.Dictionary{System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture},System.Boolean)">
            <summary>
            Class constructor.
            </summary>
            <param name="modelRoot">The model scene graph root.</param>
            <param name="textures">The textures for the model.</param>
            <param name="isConcave">Set to true if the model is concave. If it is known to be concave, loading is much faster.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.#ctor(Microsoft.MapPoint.Modeling.GroupNode,System.Collections.Generic.Dictionary{System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture},Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject{`0}.ConvertToNativeMaterial,System.Boolean)">
            <summary>
            Class constructor.
            </summary>
            <param name="modelRoot">The model scene graph root.</param>
            <param name="textures">The textures for the model.</param>
            <param name="materialConverter">The method used to convert materials to Graphics Proxy materials.</param>
            <param name="isConcave">Set to true if the model is concave. If it is known to be concave, loading is much faster.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.Clear">
            <summary>
            Clears the mesh.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.SetVertices(Microsoft.MapPoint.Modeling.FlexibleVertex[])">
            <summary>
            Sets mesh vertices.
            </summary>
            <param name="vertexList">A list of vertices to set.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.AddPrimitive(System.Int32[],Microsoft.MapPoint.Modeling.MaterialDescription)">
            <summary>
            Adds a primitive to the mesh.
            </summary>
            <param name="indexList">A list of indices.</param>
            <param name="material">The material to assign to the primitive.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.DefaultMaterialConverter(Microsoft.MapPoint.Modeling.MaterialDescription,System.Collections.Generic.Dictionary{System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture})">
            <summary>
            The default converter from a modeling material to a graphics proxy material. If a custom converter is not specified
            then this converter is used.
            </summary>
            <param name="toConvertFrom">The material to convert from.</param>
            <param name="textures">All mesh textures.</param>
            <returns>The graphics proxy material that corresponds to the input.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.ColorFromMaterialParameter(System.String)">
            <summary>
            Retrieves a color from a material parameter.
            </summary>
            <param name="colorString">A string representing the color.</param>
            <returns>A normalized vector representation of the string.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.UpdateMaterials(Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject{`0}.ConvertToNativeMaterial,System.Collections.Generic.Dictionary{System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture})">
            <summary>
            Updates all mesh materials.
            </summary>
            <param name="materialConverter">The custom material conversion function.</param>
            <param name="textures">All model textures.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.GetMaterialId(Microsoft.MapPoint.Modeling.MaterialDescription)">
            <summary>
            Returns a material id for a specific material.
            </summary>
            <param name="matDesc">The material for which we need the id.</param>
            <returns>The id of that material.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ModelingMeshGraphicsObject`1.ConvertToNativeMaterial">
            <summary>
            A delegate used to convert the modeling material format to a Graphics Proxy material.
            </summary>
            <param name="toConvertFrom">The material to convert from.</param>
            <param name="textures">Loaded textures referenced by name.</param>
            <returns>The Graphics Proxy material generated.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject">
            <summary>
            Represents a graphics object that is rendered in screen space.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.lastCoordTransform">
            <summary>
            The last normalization transform used.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.lastProjTransform">
            <summary>
            The last projection transform used for this object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Mesh)">
            <summary>
            Constructs a new instance of ScreenGraphicsObject.
            </summary>
            <param name="mesh">A valid instance of Mesh.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.Intersects(System.Drawing.Point,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode)">
            <summary>
            Returns whether the point is inside the object's bounds.
            </summary>
            <param name="screenPoint">The point (in screen pixel coordinates) to test for intersection.</param>
            <param name="mode">One of the IntersectionMode enum values.</param>
            <returns>Whether the point is inside the object bounds.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.Intersects(System.Drawing.PointF,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode)">
            <summary>
            Returns whether a point is inside the object's bounds.
            </summary>
            <param name="point">The point (in normalized device coordinates) to test for intersection.</param>
            <param name="mode">One of the IntersectionMode enum values.</param>
            <returns>Whether the point is inside the object bounds.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Plane3D@)">
            <summary>
            Tests whether a camera ray intersects with this object. If successful, hitPoint will contain the intersection point in global space.
            
            This method is supported only if the object was created with the enableCollision flag set.
            When mode is IntersectMesh, only static buffers are supported.
            
            If the ray does not represent the camera ray, the behavior is undefined.
            </summary>
            <param name="ray">The ray (in global coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox, IntersectBoundingSphere or IntersectMesh.</param>
            <param name="hitPoint">Contains the hit point coordinate in global space if the ray intersects the object.</param>
            <param name="plane">Contains the intersection plane in global space if the ray intersect the object.</param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.UpdateTransform(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the object matrix transformation.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.UpdateInternalRenderObject(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            This method is called by the render engine in full-trust mode.
            All operations that require access to the graphics device are performed by this method.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.UpdateRenderObjects(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the render state of the object. All operations that require access to the graphics device may be 
            performed by this method.
            
            This method must be implemented by a derived class.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.Dispose(System.Boolean)">
            <summary>
            Releases resources held by ScreenGraphicsObject
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.UsePixelCoordinates">
            <summary>
            Whether the coordinates should be treated as pixel coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.PreTransform">
            <summary>
            An extra transformation matrix that can be used to transform the object's vertices.
            
            The PreTransform matrix is the first matrix applied to the vertices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.PostTransform">
            <summary>
            An extra transformation matrix that can be used to transform the object's vertices.
            
            The PostTransform matrix is applied after the all other matrices but before the translation matrix.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.Scale">
            <summary>
            The 2D scaling applied to the vertices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.Rotation">
            <summary>
            The object's rotation in radians.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.Position">
            <summary>
            The object's position in screen coordinates. the Z coordinate is the Z-buffer value, between 0.0 and 1.0.
            The Z value is not affected by any transformations.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.LocalToGlobal">
            <summary>
            The transformation that converts the object from local to global space.
            
            This transformation is the multiplication of the PreTransform, Scale, Orientation, PostTransform
            and Position matrices.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.GlobalToLocal">
            <summary>
            The inverse transformation matrix that can be used to convert coordinates from global to local space.
            
            This matrix can be described as Matrix.Inverse(PreTransform * Scale * Orientation * PostTransform * Position)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.SupportsMeshIntersection">
            <summary>
            If false, mesh intersection calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.SupportsAABB">
            <summary>
            If false, AABB calls and bounding box/sphere intersection calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ScreenGraphicsObject.AABB">
            <summary>
            The object's axis-aligned bounding rectangle, in local coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SilverlightGraphicsObject">
            <summary>
            Silverlight render object
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SilverlightGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl)">
            <summary>
            Constructor
            </summary>
            <param name="silverlightControl">The silverlight control to wrap</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SilverlightGraphicsObject.Dispose(System.Boolean)">
            <summary>
            Clean up resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SilverlightGraphicsObject.ScaleRatio">
            <summary>
            The scale ratio applied to the silverlight control to scale it down to fit in
            our 1 meter square
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SilverlightGraphicsObject.SilverlightControl">
            <summary>
            The silverlight control being displayed
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState">
            <summary>
            Encapsulates all lighting render states.
            
            When lighting is enabled, the color of each object vertex is based on a combination of the current material color,
            the diffuse and specular colors at the vertex (if specified), and the color and intensity of light produced by 
            light sources in the scene or the scene's ambient light level.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GlobalRenderState">
            <summary>
            Represents a render state (or a collection of render states) that is independent of any information 3D objects might provide.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GlobalRenderState.UpdateInternalRenderState(Microsoft.MapPoint.Graphics3D.State.RenderStateObject)">
            <summary>
            Updates the internal graphics device RenderStateObject instance.
            </summary>
            <param name="state">The internal render state object.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GlobalRenderState.Changed">
            <summary>
            Whether any state was updated since the last time this property was accessed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.#ctor">
            <summary>
            Constructs a new LightingState object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of LightingState.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.UpdateInternalRenderState(Microsoft.MapPoint.Graphics3D.State.RenderStateObject)">
            <summary>
            Updates the internal graphics device RenderStateObject instance.
            </summary>
            <param name="state">The internal render state object.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.DirectionalLightEnabled">
            <summary>
            Gets or sets a flag indicating whether this lighting 
            state object supports directional lighting.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.CastShadows">
            <summary>
            Gets or sets whether the geometry should cast shadows onto itself and the environment.
            
            Shadows are cast only if the DirectionalLightEnabled is also set to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.DoubleSidedRendering">
            <summary>
            Gets or sets whether both sides of a face are rendered as if they were the front side,
            i.e the normals are reversed when rendering the back side.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.Enabled">
            <summary>
            Gets or sets whether lighting is enabled. The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.Specular">
            <summary>
            The render states that control specular highlights calculations.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.ColorSource">
            <summary>
            The render states that control the color source used for lighting calculations.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.AmbientLight">
            <summary>
            Gets or sets the global ambient light color. The default value is Color.White.
            
            Ambient lighting provides constant lighting for a scene. It lights all object vertices the same because is is not
            dependent on any other lighting factors such as vertex normals, light direction, light position, range or
            attenuation. No light objects need to be enabled (using the GraphicsEngineProxy methods) if only ambient lighting
            is desired.
            
            In addition to this global ambient light property, each Light object can also specify its ambient lighting component.
            The ambient lighting for a scene is the sum of the ambient light defined by each Light object plus the global
            ambient light defined by this property.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightingState.LightState">
            <summary>
            Gets or sets the current state of the lights supported by the graphics engine.
            Use LightState[0] through LightState[GraphicsEngineProxy.MAX_LIGHT_COUNT] to set the state of each light.
            By default, all lights are disabled.
            
            The state simply defines whether a light is enabled when lighting the object associated with this render state.
            To create, remove and manipulate lights, use the methods provided by the GraphicsEngineProxy object.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightStateCollection">
            <summary>
            Encapsulates the state of the lights supported by the graphics engine.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightStateCollection.#ctor">
            <summary>
            Constructs a new LightStateCollection instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightStateCollection.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of LightStateCollection.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightStateCollection.UpdateInternalRenderState(Microsoft.MapPoint.Graphics3D.State.RenderStateObject)">
            <summary>
            Updates the internal graphics device RenderStateObject instance.
            </summary>
            <param name="state">The internal render state object.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LightStateCollection.Item(System.Int32)">
            <summary>
            Gets or sets whether a light is enabled. By default, all lights are disabled.
            </summary>
            <param name="id">The light id, which is an integer between 0 and GraphicsEngineProxy.MAX_LIGHT_COUNT.</param>
            <returns>Whether the light is enabled.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VerticalTextAlignment">
            <summary>
            The vertical alignment of text rendered by a TextGraphicsObject.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VerticalTextAlignment.Center">
            <summary>
            The text is vertically centered at the given coordinate.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VerticalTextAlignment.Top">
            <summary>
            The text is rendered above the given coordinate.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VerticalTextAlignment.Bottom">
            <summary>
            The text is rendered below the given coordinate.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager">
            <summary>
            Manages bitmap rendering on top of video frames.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.#ctor">
            <summary>
            Constructs a new instance of BitmapOverlayManager.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.Reset">
            <summary>
            Resets the internal state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.SetBitmap(System.Drawing.Bitmap,Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties)">
            <summary>
            Sets the bitmap to be rendered during the next frames.
            
            A bitmap is rendered to the video as soon as this method is called.
            The number of frames the bitmap is rendered is defined by the BitmapDisplayTime, FadeInTime, and FadeOutTime properties.
            </summary>
            <param name="newBitmap">The bitmap to be overlaid on top of video frames.</param>
            <param name="properties">The bitmap rendering properties.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.CloneBitmap(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Clones a bitmap.
            </summary>
            <param name="source">The bitmap to be cloned.</param>
            <param name="newPixelFormat">Specifies the new pixel format for the cloned bitmap.</param>
            <returns>The cloned bitmap.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.ComputeBitmapOutputSize(System.Drawing.Size)">
            <summary>
            Computes the parallelogram that defines the area in the output video frame where the bitmap
            will be rendered.
            </summary>
            <param name="frameSize">The output [video] frame size.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.Render(System.Drawing.Bitmap)">
            <summary>
            Renders the bitmap set by SetBitmap() to the video frame.
            </summary>
            <param name="frame">The current video frame.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.HasBitmap">
            <summary>
            Returns true if a bitmap is set to be rendered on the current frame.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.FramesPerSecond">
            <summary>
            Gets or sets the video framerate.
            This property must be set before Render() is called.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapOverlayManager.Properties">
            <summary>
            Gets the current bitmap rendering properties.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties">
            <summary>
            Encapsulates all properties that describe how a bitmap should be rendered on a video frame.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance of BitmapProperties.
            </summary>
            <param name="fadeInTime">The amount of time (in seconds) it takes to transition the bitmap from fully transparent to fully opaque.</param>
            <param name="fadeOutTime">The amount of time (in seconds) it takes to transition the bitmap from fully opaque to fully transparent.</param>
            <param name="displayTime">The amount of time (in seconds) the bitmap is rendered when it is fully opaque.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties.FadeInTime">
            <summary>
            Gets or sets the amount of time (in seconds) it takes to transition the bitmap from fully transparent to fully opaque.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties.FadeOutTime">
            <summary>
            Gets or sets the amount of time (in seconds) it takes to transition the bitmap from fully opaque to fully transparent.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties.DisplayTime">
            <summary>
            Gets or sets the amount of time (in seconds) the bitmap is rendered when it is fully opaque.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.CopyToScreenStep">
            <summary>
            Copies the contents from the video offscreen buffer to the backbuffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.CopyToScreenStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn)">
            <summary>
            Creates a new instance of CopyToScreenStep
            </summary>
            <param name="host"></param>
            <param name="plugin"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.CopyToScreenStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Copies the offscreen video frame to the backbuffer.
            </summary>
            <param name="state">The scene state.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieViewSnapshotStep">
            <summary>
            Adds a ViewSnapshot state to the scene state while a video is recorded.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieViewSnapshotStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams)">
            <summary>
            Creates a new instance of MovieViewSnapshotStep
            </summary>
            <param name="host"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieViewSnapshotStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Adds a new ViewSnapshot to the scene state, taking into account the offscreen buffer size.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep">
            <summary>
            Manages the offscreen rendering used to record videos at arbitrary resolutions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn)">
            <summary>
            Creates a new instance of VideoRenderTargetStep.
            </summary>
            <param name="host">The host.</param>
            <param name="parameters">The movie recorder parameters.</param>
            <param name="plugin">The MovieRecorderPlugin instance.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.OnInitialize(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Initializes the VideoRenderTargetStep step.
            </summary>
            <param name="progress">The load completion progress.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.Device_Graphics3DDeviceReset(System.Object,System.EventArgs)">
            <summary>
            Handles a 'graphics device reset' event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.Device_Graphics3DDeviceLost(System.Object,System.EventArgs)">
            <summary>
            Handles a 'graphics device lost' event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.InvalidateBuffers">
            <summary>
            Releases all references to the buffers that reside in the default pool (VRAM).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.InitializeOffscreenBuffers">
            <summary>
            Initializes the offscreen buffers (color and depth buffers) used to render the video frames.
            </summary>
            <returns>Whether the initialization was successful.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Renders everything to the offscreen video target surface that will be consumed by the Encoder step.
            </summary>
            <param name="sceneState">The current scene state.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.Dispose(System.Boolean)">
            <summary>
            Releases all resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.VideoRenderTargetStep.RenderTargetSurface">
            <summary>
            Gets the current render target surface.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.CustomFormClosed">
            <summary>
            Use a custom delegate when the form is closed which allows marshalling of all the parameters
            across app domains
            </summary>
            <param name="form"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm">
            <summary>
            Form to ask the user for web permissions for a set of uris
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.OnClosed(System.EventArgs)">
            <summary>
            Override OnClosed and call the custom form closed event handler. OnFormClosedEventArgs does not
            serialize across app domains.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.GetCommonNameFromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Gets the common name from a certificate.
            </summary>
            <param name="certificate"></param>
            <returns>Common name if found, otherwise null</returns>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.CustomFormClosed">
            <summary>
            Custom event fired when the form is closed. OnFormClosedEventArgs does not serialize across
            app domains and thus can't be fired.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.AllowedUris">
            <summary>
            Upon close, the list of Uris out of the original that were allowed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Security.AskWebPermissionForm.DeniedUris">
            <summary>
            Open close, the list of Uris out of the original that were denied
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.CertificatePropertiesForm">
            <summary>
            Display the details of an authenticode signature
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Security.CertificatePropertiesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.CertificatePropertiesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.CertificatePropertiesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.SecurityManager">
            <summary>
            Handle security requests and permissions for Host.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.WebRequestAllowed(System.Uri)">
            <summary>
            Tells the calling assembly whether they are allowed to make the given request.
            A negative result may mean the user has not granted permissions yet or it has been explicitly denied.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.RequestWebPermission(System.Uri[],Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestComplete)">
            <summary>
            Requests permission from the user for the given uris for the calling assembly.
            The delegate is called back once for each passed in uri
            </summary>
            <param name="uris">Uris to request permission for</param>
            <param name="requestComplete">delegate to call back when permission has been granted or denied for a uri</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.ShowNextPermissionRequest">
            <summary>
            Call this to show the next permission request for the user if one is not already displaying.
            This ensures the user only ever has one permission prompt up at once
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.PermissionRequestClosed">
            <summary>
            Called by a permission request when the form has been closed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.ValidateUriForPlugins(System.Uri)">
            <summary>
            Throws an argument exception if the given uri can not be used by plugins
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.IsValidUriForPlugins(System.Uri)">
            <summary>
            Returns true if the given uri can possibly be accessed by plugins
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.IsValidUriForPlugins(System.Uri,System.String@)">
            <summary>
            Returns true if the given uri can possibly be accessed by plugins
            </summary>
            <param name="uri"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.WebRequestAllowed(System.Reflection.Assembly,System.Uri)">
            <summary>
            Checks whether the specified assembly has been granted permission to access the given Uri
            </summary>
            <param name="assembly"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.RequestWebPermission(System.Reflection.Assembly,System.Uri[],Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestComplete)">
            <summary>
            Requests web permissions for the given uris from the user asynchronously.
            </summary>
            <param name="assembly"></param>
            <param name="requestComplete"></param>
            <param name="uris"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.DemandStrongNameOnStack(System.Reflection.Assembly)">
            <summary>
            Makes a security demand for the strong name of the specified assembly.
            This helps protect against luring attacks.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.SignerPermissions">
            <summary>
            The permission set associated with a given authenticode signer.
            All non signed assemblies get lumped into the same category
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.SignerPermissions.WebRequestAllowed(System.Uri)">
            <summary>
            Checks if the given uri has been allowed
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.SignerPermissions.MayAskForPermissionForWebRequest(System.Uri)">
            <summary>
            Checks if the given uri has been explicitly denied by the user already.
            If so we don't want to ask the user for the same permission again.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.SignerPermissions.AllowAccessToWebRequest(System.Uri)">
            <summary>
            Adds access to the given uri
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.SignerPermissions.DenyAccessToWebRequest(System.Uri)">
            <summary>
            Denies access to the given uri
            </summary>
            <param name="uri"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.SignerPermissions.Certificate">
            <summary>
            The certificate associated with this signer
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.PermissionRequest.Complete">
            <summary>
            Call Complete() when the request is complete and the form has been closed
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.SecurityManager.WebPermissionRequest">
            <summary>
            A request for web permissions
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestComplete">
            <summary>
            Fired when a web permission request for a uri has been completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestCompleteEventArgs">
            <summary>
            Event arguments when a web permission request for a uri has been completed
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestCompleteEventArgs.#ctor(System.Uri,System.Boolean)">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestCompleteEventArgs"/> class.
            </summary>
            <param name="uri"></param>
            <param name="success"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestCompleteEventArgs.Success">
            <summary>
            Whether this uri was granted permissions or not
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Security.WebPermissionRequestCompleteEventArgs.Uri">
            <summary>
            The uri that was granted or denied permissions
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.IDataProgress">
            <summary>
            Allows an object to provide data loading progress, to be used in determining
            how complete data loading is for a scene.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.IDataProgress.Progress">
            <summary>
            Gets data download progress from 0.0 to 1.0.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Utility.Globals">
            <summary>
            Global information about the application.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Utility.Globals.ApplicationName">
            <summary>
            Gets the application name that is used for various directories and whatnot.
            FUTURE: Set this value rather than hardcoding it.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Utility.Globals.Company">
            <summary>
            Gets the company name that is used for various directories and whatnot.
            FUTURE: Set this value rather than hardcoding it.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Utility.Globals.RegistryKeyName">
            <summary>
            VE3D Installing folder registry keyname
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Utility.Globals.HighestPopulatedAltitude">
            <summary>
            The highest altitude in meters that there might be terrain or objects in. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Utility.Globals.installPath">
            <summary>
            Install path from the registry.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Utility.Globals.InstallPath">
            <summary>
            Gets the install path.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Utility.Globals.InstallDataPath">
            <summary>
            Gets the path for installed data such as .X files.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Utility.Globals.SettingsPath">
            <summary>
            Gets the path in which the user.config file is stored.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Utility.Globals.DataPath">
            <summary>
            Gets the path in which data like the persistent cache is stored.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Utility.Globals.IENativeFunctions">
            <summary>
            Exposes functions of IE, mostly relating to Protected Mode.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Utility.Globals.IENativeFunctions.InProtectedMode">
            <summary>
            True if you are running in low-rights IE on Vista.  False if any of those aren't true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Utility.Globals.IENativeFunctions.ShowSaveFileDialog(System.String,System.String,System.String,System.String@,System.IntPtr@)">
            <summary>
            Shows the IE's SaveFile dialog, used to save a file with low rights.
            
            Saving a file with low rights in IE is a two-step Save operation. This method is used to initialize a Save As dialog box
            in IE. After the user closes the dialog box, IE returns information about the user's selection. If the call is successful,
            a subsequent call to the SaveFile function must be made to complete the operation (CancelSaveFile should be called
            otherwise).
            </summary>
            <param name="filename">A file name used to initialize the File Name edit control.</param>
            <param name="filter">A string containing pairs of filter strings that are terminated with the pipe escape character (|).</param>
            <param name="defaultExt">The default file extension.</param>
            <param name="outFilename">The full path of the file that the user selected.</param>
            <param name="token">A token subsequently used in a call to the SaveFile (or CancelSaveFile) method.</param>
            <returns>True if the call was succesful and the user clicked 'OK'. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Utility.Globals.IENativeFunctions.SaveFile(System.IntPtr,System.String)">
            <summary>
            Saves the file to the location selected by the user in a previous call to ShowSaveFileDialog.
            </summary>
            <param name="token">The token returned by a previous call to ShowSaveFileDialog.</param>
            <param name="sourceFile">The full path to the temporary (source) location of the file to be saved.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Utility.Globals.IENativeFunctions.CancelSaveFile(System.IntPtr)">
            <summary>
            Releases all memory and state associated with a previous call to ShowSaveFileDialog.
            </summary>
            <param name="token">The token returned by ShowSaveFileDialog.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion">
            <summary>
            A class that handles suppressing building models in specified areas.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion.AddPoint(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Adds a point to be used in constructing the bounds and exclusion footprint.
            </summary>
            <param name="point">A point in world coordinates</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion.AddTriangle(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="point3"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion.Clear">
            <summary>
            Clears the exclusion point and triangle lists.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion.Update">
            <summary>
            Updates the internal exclusion object if it has changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion.GetInternalExclusionObject">
            <summary>
            Returns the internal exclusion object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.ActorManager">
            <summary>
            Maintains the set of actors being used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.Add(Microsoft.MapPoint.Rendering3D.Steps.Actors.Actor)">
            <summary>
            Adds an actor to the actor list.  This actor will be updated and rendered every frame
            regardless of camera position.
            </summary>
            <param name="actor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.Remove(Microsoft.MapPoint.Rendering3D.Steps.Actors.Actor)">
            <summary>
            Removes an actor from the actor list.
            </summary>
            <param name="actor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.Clear">
            <summary>
            Removes all actors from the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.ActorManager"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.ActorManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindingsManager">
            <summary>
            Manager for the entire event to action binding system.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.RegisterAction(Microsoft.MapPoint.Binding.BindingsSource,System.String,Microsoft.MapPoint.Binding.Action)">
            <summary>
            Register an action.
            </summary>
            <param name="source"></param>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.UnregisterAction(Microsoft.MapPoint.Binding.BindingsSource,System.String)">
            <summary>
            Unregister an action.
            </summary>
            <param name="source"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.SetupEventSources(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Setup access to needed input devices
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.MergeBindings(System.String,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Loads bindings from the specified file into the current bindings, 
            merging any matching namespaces and sets contained therein.
            </summary>
            <param name="fileName"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.MergeBindingsFromResources(Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Loads bindings from the embedded resource, 
            merging any matching namespaces and sets contained therein.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.MergeBindings(System.IO.Stream,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Loads and merges bindings from the specified stream, which must represent an XML stream, into the 
            loaded bindings.
            </summary>
            <param name="stream"></param>
            <param name="source">Should support IRayIntersect if it will perform spatial bindings.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.MergeBindings(System.Xml.XmlReader,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Loads and merges bindings from the specified XML reader into the 
            loaded bindings.
            </summary>
            <param name="reader"></param>
            <param name="source">Should support IRayIntersect if it will perform spatial bindings.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.MergeBindings(Microsoft.MapPoint.Binding.Bindings)">
            <summary>
            Merge the supplied bindings with the current set.
            </summary>
            <param name="bindings"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.AddActiveBindingSet(System.String)">
            <summary>
            Adds a binding set to the active bindings that was loaded by the 
            default loader.  For example, including a BindingMyStuff.xml in the
            bindings folder.
            </summary>
            <param name="bindingSetName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.AddActiveBindingSet(Microsoft.MapPoint.Binding.BindingsSource,System.String)">
            <summary>
            Adds a binding set to the active bindings that was loaded by the
            specified source.
            </summary>
            <param name="source"></param>
            <param name="bindingSetName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.RemoveActiveBindingSet(System.String)">
            <summary>
            Removes a binding set from the active bindings that was loaded by 
            the default loader.
            </summary>
            <param name="bindingSetName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.RemoveActiveBindingSet(Microsoft.MapPoint.Binding.BindingsSource,System.String)">
            <summary>
            Removes a binding set from the active bindings that was loaded by 
            the specified source.
            </summary>
            <param name="source"></param>
            <param name="bindingSetName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.RequestFocus(Microsoft.MapPoint.Binding.IFocus,System.Boolean)">
            <summary>
            Requests focus.  Succeeding in this call is required to carry out 
            various operations that take an IFocus as a parameter.
            </summary>
            <param name="focus"></param>
            <param name="exclusive"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.ReleaseFocus(Microsoft.MapPoint.Binding.IFocus)">
            <summary>
            Releases focus.  Requires that you have focus.
            </summary>
            <param name="focus">Reference to an IFocus interface that is used 
            for validation that you have focus.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.AddFocusBindingSet(Microsoft.MapPoint.Binding.IFocus,Microsoft.MapPoint.Binding.BindingsSource,System.String)">
            <summary>
            Makes the specified binding set the focus binding set.  
            Requires that you have focus.
            </summary>
            <param name="focus">Reference to an IFocus interface that is used
            for validation that you have focus.</param>
            <param name="source"></param>
            <param name="bindingSetName">Name of the binding set that should 
            become the focus binding set.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.ClearFocusBindingSet(Microsoft.MapPoint.Binding.IFocus)">
            <summary>
            Removes the current focus binding set.  
            Requires that you have focus.
            </summary>
            <param name="focus">Reference to an IFocus interface that is used for validation that you have focus.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.InitializeBindings(Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Define default bindings and load all desired mappings
            </summary>
            <param name="defaultSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingsManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingsManager.Keyboard">
            <summary>
            Gets a source of events from the keyboard.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingsManager.Mouse">
            <summary>
            Gets a source of events from the mouse.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingsManager.GamePad">
            <summary>
            Gets a source of events from a gamepad such as the XBox controller.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingsManager.NavControl">
            <summary>
            Gets a source of events from the onscreen nav control.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingsManager.EventSourceManager">
            <summary>
            Gets the event source manager.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingsManager.ActionSystem">
            <summary>
            Gets the action system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Binding.BindingsManager.ActiveBindings">
            <summary>
            Gets the active binding set.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CameraControllerManager">
            <summary>
            Handles camera controllers
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CameraControllerManager.RaiseChangedCameraEvent">
            <summary>
            Force the Default camera controller to raise a changed event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CameraControllerManager.Enable(Microsoft.MapPoint.Rendering3D.Cameras.CameraController{Microsoft.MapPoint.Rendering3D.Cameras.PredictiveCamera})">
            <summary>
            Provides a camera to the controller and enables it.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CameraControllerManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CameraControllerManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CameraControllerManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CameraControllerManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.CameraControllerManager.CameraChanged">
            <summary>
            Event that occurs when camera changes.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CameraControllerManager.Current">
            <summary>
            Gets or sets the current camera controller to use.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CameraControllerManager.Default">
            <summary>
            Gets the default controller.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CameraControllerManager.ActionCameraController">
            <summary>
            Gets the default controller, which just happens to be the ActionCameraController
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CameraControllerManager.CameraChangedEventHandler">
            <summary>
            Handle to a method that will process camera changed event.
            </summary>
            <param name="camera">Camera that has changed.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.Anchor">
            <summary>
            A location that a camera controller has locked as a reference for movement.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.Anchor.#ctor(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.Anchor"/> class.
            </summary>
            <param name="position"></param>
            <param name="cameraData"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.Anchor.Position">
            <summary>
            The position the camera controller will use as a reference for movement.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.Anchor.CameraData">
            <summary>
            Data for the camera that is anchored.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.DataSourceManager">
            <summary>
            Maintains the set of DataSources being used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.Add(Microsoft.MapPoint.Rendering3D.Utility.DataSourceLayerData)">
            <summary>
            Adds a new source to the list of sources providing
            data to the control.
            </summary>
            <param name="newSource">A new source of data to add to the system.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.QueueAdd(Microsoft.MapPoint.Rendering3D.Utility.DataSourceLayerData)">
            <summary>
            Adds a new source to the list of sources providing
            data to the control, but the add is not fully completed until <see cref="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.CommitQueuedChanges"/> is called.
            </summary>
            <param name="newSource">A new source of data to add to the system.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.Remove(System.String,System.String)">
            <summary>
            Removes a source from the list of sources providing data
            to the control.
            </summary>
            <param name="layerId">The layer id of the source to remove.</param>
            <param name="id">The id of the source to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.QueueRemove(System.String,System.String)">
            <summary>
            Removes a source from the list of sources providing data
            to the control, but the remove is not fully completed until <see cref="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.CommitQueuedChanges"/> is called.
            </summary>
            <param name="layerId">The layer id of the source to remove.</param>
            <param name="id">The id of the source to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.CommitQueuedChanges">
            <summary>
            Complete any pending QueueAdd or QueueRemove calls.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.CommitQueuedChanges(System.Boolean)">
            <summary>
            Complete any pending QueueAdd or QueueRemove calls.
            </summary>
            <param name="disposeRemovedSources">If true, any sources that are waiting to be removed will also be disposed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.GetDataSourceList">
            <summary>
            Gets the current list of datasources.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.RecoverKnownSources">
            <summary>
            Hook up all known sources again.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.AddFeederSourceInternal(Microsoft.MapPoint.Rendering3D.Utility.DataSourceLayerData)">
            <summary>
            Adds a new source to the list of sources providing
            data to the control.
            Call UpdateFeederSources after all adds/removes
            To perform the action
            </summary>
            <param name="newSource"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.RemoveFeederSourceInternal(System.String,System.String)">
            <summary>
            Removes a source from the list of sources providing data
            to the control
            Call UpdateFeederSources after all adds/removes
            To perform the action
            </summary>
            <param name="layerId"></param>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.UpdateFeederSources(System.Boolean)">
            <summary>
            Updates the sources providing data based on 
            previous calls to add/remove individual sources
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.SetPersistentCacheFileSize(System.Int64,System.Boolean)">
            <summary>
            Sets the size of the cache file.  Will limit the real amount by available disk space,
            and return the amended amount.
            </summary>
            <param name="value">The new value to use.</param>
            <param name="isFromUser">If true, can consume all available space.  If false, maxes at 25%.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.DataSourceManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.DataSourceManager.PersistentCacheFileSize">
            <summary>
            Gets size of the cache file.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.DataSourceManager.PersistentCacheIsFullAccess">
            <summary>
            Gets/Sets whether we have full access to the cache.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.EngineEvents">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnLoad">
            <summary>
            Fired when the control has finished loading.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnMouseDown">
            <summary>
            Fired on MouseDown.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnKeyDown">
            <summary>
            Fired on KeyDown.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnCameraChanged">
            <summary>
            Fired when the camera has stopped moving.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnHover">
            <summary>
            Fired when the pointer has hovered over a pushpin.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnHoverEnd">
            <summary>
            Fired when the pointer stops hovering over a pushpin.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnCursorPositionUpdate">
            <summary>
            Fired when the pointer position on the ground has changed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnDropGeometry">
            <summary>
            Fired when a geometry should be dropped after being moved.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnHardwareCapabilitiesUpdate">
            <summary>
            Fired when hardware capabilities have changed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnLatLonAltClicked">
            <summary>
            Fired when a position has been selected when in selection mode.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnBeginCameraChange">
            <summary>
            Fired when the camera begins moving.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnShowNavigationHelp">
            <summary>
            Fired when the navigation help form is displayed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnMouseUp">
            <summary>
            Fired on MouseUp.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnMouseOver">
            <summary>
            Fired when the mouse moves over a selectable geometry.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnMouseOut">
            <summary>
            Fired when the mouse leaves a selectable geometry.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnClick">
            <summary>
            Fired on OnClick.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnDoubleClick">
            <summary>
            Fired on OnDoubleClick.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnDataLoadComplete">
            <summary>
            Fired when data has finished loading for the current scene.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnFrame">
            <summary>
            Fired at the end of each render frame.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnPlugInLoaded">
            <summary>
            Fired when a plug-in has successfully loaded.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnPlugInActivated">
            <summary>
            Fired when a plug-in has been activated.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnPlugInDeactivated">
            <summary>
            Fired when a plug-in has been deactivated.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnZoom">
            <summary>
            Fired when the camera zooms in or out.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnPan">
            <summary>
            Fired when the camera starts panning.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnVisibleDataChanged">
            <summary>
            Fired when the camera starts panning.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnAnimatedCameraChange">
            <summary>
            Fired when an animated camera begins moving.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnShowNotification">
            <summary>
            Fired when a notification should pop up.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnHideNotification">
            <summary>
            Fired when a notification should go away.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnMouseEnterControl">
            <summary>
            Fired when the mouse enters the control.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnMouseLeaveControl">
            <summary>
            Fired when the mouse leaves the control.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnScaleBarPositionChange">
            <summary>
            Fired when the scalebar should reposition itself.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnFlyToEnd">
            <summary>
            Fired when FlyToWithProperties or FlyAround ends.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnControlLostFocus">
            <summary>
            Fired when the control loses focus
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnDataLoadFailure">
            <summary>
            Fired when data for a tile has repeatedly failed to load.  Many timeouts usually
            means difficulty with the network.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnCultureChanged">
            <summary>
            Fired when the value of <see cref="P:Microsoft.MapPoint.Rendering3D.WorldEngine.Culture"/> has changed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnShowMapObjectsChanged">
            <summary>
            Fired when the value of <see cref="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowMapObjects"/> has changed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.OnEnvironmentManagerChanged">
            <summary>
            Fired when the settings on <see cref="P:Microsoft.MapPoint.Rendering3D.WorldEngine.Environment"/> have changed.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.EngineEvents.Group">
            <summary>
            Guid of the group that owns all of these events.  This should be specified with a call to CommunicationsManager.AttachEvent.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy">
            <summary>
            Encapsulates the graphics engine global properties.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.MAX_LIGHT_COUNT">
            <summary>
            The number of lights supported by the graphics engine.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Constructs a new instance of GraphicsEngineProxy.
            </summary>
            <param name="host">A valid instance of Host.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.ProjectionTransform">
            <summary>
            Gets the current projection transform, used to render graphics objects in 3D space.
            The projection transform is automatically calculated by the render engine based on the current camera
            by multiplying the independent view, projection, and miscellaneous transforms of the current camera.
            Independent components of the camera may be accessed from the <see href="CameraData"/> entry in the
            <see href="SceneState"/>.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.Settings">
            <summary>
            Gets the graphics settings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.Caps">
            <summary>
            Gets the graphics capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.DeviceDisposed">
            <summary>
            Gets whether the device has been disposed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.RenderQueuesAvailable">
            <summary>
            Gets whether the render queues are ready on the device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsEngineProxy.DeviceValid">
            <summary>
            Gets whether the device is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps">
            <summary>
            Exposes the graphics hardware capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.PixelShaderVersion">
            <summary>
            Gets the maximum pixel shader version supported by the system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.TotalSystemMemoryBytes">
            <summary>
            Gets the detected system memory in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.ProcessorCount">
            <summary>
            Gets the number of detected logical processors in the current system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.VertexShaderVersion">
            <summary>
            Gets the maximum vertex shader version supported by the system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.MaxTextureSize">
            <summary>
            Gets the maximum texture size supported by the system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.SupportsEpitome">
            <summary>
            Gets the maximum texture size supported by the system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.SupportsG16R16Format">
            <summary>
            Retrieves a flag indication whether or not the graphics hardware can use 
            the G16R16 pixel format.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.SupportsNonPowerOfTwoTextures">
            <summary>
            Retrieves a flag indicating whether or not the graphics hardware can use 
            non-power-of-two texture sizes.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.CardName">
            <summary>
            Gets the graphics card name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.TotalTextureMemoryBytes">
            <summary>
            Gets the maximum amount of video memory dedicated to textures.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsCaps.MaxSimultaneousTextures">
            <summary>
            Gets the maximum number of textures that can be associated to a Material.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsSettings">
            <summary>
            Exposes the graphics settings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsSettings.UseAnisotropicFiltering">
            <summary>
            Gets or sets whether we should use Anisotropic filtering if possible.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsSettings.BackgroundColor">
            <summary>
            Gets or sets the color used to clear the screen before each frame is rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsSettings.FogColor">
            <summary>
            Gets or sets the fog color used to render the globe, including the buildings.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject">
            <summary>
            Implements a graphics object that renders line segments using 2D or 3D coordinates.
            
            Lines segments are defined by a a color, width, and a set of two or more points.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.#ctor">
            <summary>
            Constructs a new LineGraphicsObject instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.UpdateRenderState">
            <summary>
            Updates the render state used to render the lines.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.CreateInternalGraphicsObject">
            <summary>
            Creates the internal graphics object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.TransformedPoints(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            In ScreenCoordinates mode, no transformation is performed in the input coordinates. In WorldCoordinates mode, each
            point is transformed by the current Projection matrix.
            
            Lines are always drawn in 2D coordinates with a constant pixel width size. Its 3D coordinates need to be transformed
            before any vertices are created.
            </summary>
            <param name="device">The graphics device.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.UpdateLineGeometry(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the vertex and index buffers that render the lines.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.GetWidth(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Gets the width of a line in 3D coordinates. In ScreenCoordinates mode, the width is equal to the input value,
            which is the width of the line in pixels. The aspect ratio transformation is taken care of by the transformation used to
            convert screen coordinates to normalized device coordinates. In WorldCoordinates mode, there is no transformation that
            takes the aspect ratio into account -- this is done by this method, that converts the pixel line width to a 3D vector representing
            the line width in all axis.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The vector representing the line width.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.UpdateTransforms(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the matrix used to transform the line coordinates to screen coordinates according to the mode
            selected.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.UpdateRenderObjects(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.Points">
            <summary>
            The collection of points that define the line segments rendered by this graphics object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.Width">
            <summary>
            Gets or sets the thickness of the line, in pixels. The default value is 1.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.Color">
            <summary>
            Gets or sets the color (including alpha) of the line.
            The default value is Color.White.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.AlphaEnable">
            <summary>
            Gets or sets whether alpha blending is enabled while rendering the lines.
            The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.ZBufferEnable">
            <summary>
            Gets or sets whether lines should be rendered with the z-buffer enabled.
            The default value is true.
            
            Note that if ZBufferEnable is set to false, AlphaEnable is set to true and Color has an alpha smaller
            than 255, rendering artifacts may be seen at each line 'joint'. This occurs because line segments are
            slightly drawn on top of each other at their ends.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.Mode">
            <summary>
            Gets or sets the line mode.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineGraphicsObject.Transform">
            <summary>
            Gets or sets a transformation that is applied to the line coordinates.
            
            The transformation is applied in screen coordinates when Mode is LineMode.ScreenCoordinates and in world coordinates otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineMode">
            <summary>
            Defines the supported line modes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineMode.ScreenCoordinates">
            <summary>
            Line coordinates are specified in pixel screen coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.LineMode.WorldCoordinates">
            <summary>
            Line coordinates are specified in 3D world coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId">
            <summary>
            A TextureId is used to reference a texture in a TextureCollection.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.One">
            <summary>
            One.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.Two">
            <summary>
            Two.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.Three">
            <summary>
            Three.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.Four">
            <summary>
            Four.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.Five">
            <summary>
            Five.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.Six">
            <summary>
            Six.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.Seven">
            <summary>
            Seven.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId.COUNT">
            <summary>
            The number of items in the enum.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject">
            <summary>
            Implements a graphics object that renders sprites in 2D space
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.#ctor">
            <summary>
            Constructs a new SpriteGraphicsObject instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.#ctor(System.Boolean)">
            <summary>
            Constructs a new SpriteGraphicsObject instance.
            </summary>
            <param name="manageTextures">Whether textures associated with this object should be automatically disposed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.UpdateRenderState">
            <summary>
            Updates the render state used to render the sprite.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.UpdateSpriteGeometry(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the sprite vertices based on the texture size and the SourceRect property.
            
            Note that the sprite may not draw during the first frame, since the texture may not yet be loaded.
            The texture's width and height are required to create the sprite.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.SetBorder(System.Single,System.Drawing.Color)">
            <summary>
            Adds a border around the sprite.
            </summary>
            <param name="thickness">thickness of border = <paramref name="thickness"/>*(texture width + texture height)/2</param>
            <param name="borderColor">color of border</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.RemoveBorder">
            <summary>
            Removes any border around the sprite.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.UpdatePosition(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the sprite position according to the current sprite mode.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.UpdateRenderObjects(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Plane3D@)">
            <summary>
            Tests whether a camera ray intersects with this object. If successful, hitPoint will contain the intersection point in global space.
            
            This method is supported only if the object was created with the enableCollision flag set.
            When mode is IntersectMesh, only static buffers are supported.
            
            If the ray does not represent the camera ray, the behavior is undefined.
            </summary>
            <param name="ray">The ray (in global coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox, or IntersectMesh.</param>
            <param name="hitPoint">Contains the Position value of the sprite if the ray intersects the object.</param>
            <param name="plane">Contains the intersection plane in global space if the ray intersect the object.</param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.Dispose(System.Boolean)">
            <summary>
            Releases internal resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.Position">
            <summary>
            Gets or sets the sprite's position.
            
            The meaning of position depends on the sprite mode currently selected. If Mode is SpriteMode.ScreenCoordinates, the
            position is in screen coordinates (only the X and Y coordinates are used).
            If Mode is SpriteMode.WorldCoordinates, the position is in world coordinates.
            
            Note that when Mode is SpriteMode.ScreenCoordinates, the Z value is still used for depth sorting
            when ZBufferEnable is set to true. The Z value can be used to sort all the objects rendered in
            screen space, such as sprites, text and lines.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.Mode">
            <summary>
            Gets or sets the sprite mode.
            
            Sprites are rendered in 2D or 3D space according to the selected mode. The default value is ScreenMode.ScreenCoordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.Texture">
            <summary>
            Gets or sets the sprite texture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.SourceRect">
            <summary>
            Gets or sets the rectangle that indicates the portion of the source texture to use when rendering the sprite.
            
            If the rectangle's width and height are zero, the entire source texture is used. The default value is (0, 0, 0, 0).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.SpriteCenter">
            <summary>
            Gets or sets the sprite's center. The sprite center is defined in pixel coordinates, where (0, 0) is the center of the
            source texture. The default value is (0, 0).
            
            If SourceRect is used, the sprite's center is defined as the center of the portion of the texture defined by the
            SourceRect coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.AlphaEnable">
             <summary>
             Gets or sets whether alpha blending is enabled while rendering the sprite. The default value is false.
            
             Set this property to true to enable transparency. Alpha values can be defined by the texture, by the sprite's color, or both.
             </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.ZBufferEnable">
            <summary>
            Gets or sets whether the sprite should render with z-buffering enabled. The default value is false.
            
            If this property is set to false, the sprite will always draw on top of the 3D geometry (since the z-buffer is disabled).
            It's up to the application developer to correctly sort the sprites, so they render in the correct order when they overlap.
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteGraphicsObject.Color">
            <summary>
            Gets or sets a color that modulates the texture. The default value is Color.White, which in practice does not affect the 
            source texture.
            
            This property can be used to modulate the texture's alpha, color, or both.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteMode">
            <summary>
            Defines the supported sprite modes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteMode.ScreenCoordinates">
            <summary>
            The sprite's position and size are defined in screen coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpriteMode.WorldCoordinates">
            <summary>
            The sprite's position is defined in world coordinates, but its size is defined in screen coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont">
            <summary>
            A GraphicsFont encapsulates a font that a TextGraphicsObject uses to render 2D text.
            
            To speed up rendering, all glyphs are pre-rendered to a texture (up to 1024x1024).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.MIN_TEXTURE_SIZE">
            <summary>
            The minimum texture size used to render the glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.MAX_TEXTURE_SIZE">
            <summary>
            The maximum texture size used to render the glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.DefaultGlyphs">
            <summary>
            The standard ascii set to begin with.  New characters may be added by the system as they are encountered.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.#ctor(System.Drawing.Font)">
            <summary>
            Constructs a new GraphicsFont object.
            </summary>
            <param name="font">The font used to draw the text.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.#ctor(System.Drawing.Font,System.Int32)">
            <summary>
            Constructs a new GraphicsFont object, using a glow effect.
            </summary>
            <param name="font">The font used to draw the text.</param>
            <param name="glowSize">The pixel width of a glow around the text.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.#ctor(System.Drawing.Font,System.String)">
            <summary>
            Constructs a new GraphicsFont object.
            
            A texture varying in size between 128x128 and 1024x1024 is used to pre-render all supported glyphs, according to the number
            of glyphs and font size.
            </summary>
            <param name="font">The font used to draw the text.</param>
            <param name="glyphs">A string containing all characters that should be supported this font.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.#ctor(System.Drawing.Font,System.String,System.Int32)">
            <summary>
            Constructs a new GraphicsFont object.
            
            A texture varying in size between 128x128 and 1024x1024 is used to pre-render all supported glyphs, according to the number
            of glyphs and font size.  A glow is also rendered into a separate texture.
            </summary>
            <param name="font">The font used to draw the text.</param>
            <param name="glyphs">A string containing all characters that should be supported this font.</param>
            <param name="glowSize">The pixel width of a glow around the text.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.GetCharInfo(System.Char)">
            <summary>
            Returns a CharacterInfo instance given a character. If the character is not supported by this font, the CharacterInfo
            for the first character in the alphabet (accessible through the Glyphs property) is returned.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.UpdateDefaultGlyphs(System.String[])">
            <summary>
            Updates the default glyphs with any glyphs in text that are not already there.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.DrawGlow(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw the glyph into the graphics in a circular pattern.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.Dispose">
            <summary>
            Releases all resources used by this GraphicsFont.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.Glyphs">
            <summary>
            Returns a string containing all glyphs supported by this font.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.Font">
            <summary>
            Returns the System.Drawing.Font used to create this GraphicsFont.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.GlowSize">
            <summary>
            Returns the width of the glow used to create this GraphicsFont.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.UpdateGlyphs">
            <summary>
            Returns true if the glyphs for this font are updatable.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.TextureSizeInBytes">
            <summary>
            The amount of memory used by the texture that caches all pre-rendered glyphs.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.MaxHeight">
            <summary>
            Returns the height of the tallest glyph supported by this font.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.NullChar">
            <summary>
            Gets the first character in the glyph set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.FontTexture">
            <summary>
            Returns the texture containing all pre-rendered glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.CharacterSlot.CachedVertices">
            <summary>
            A quad at (0,0) that renders the corresponding characters.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.CharacterSlot.Width">
            <summary>
            The character's typographical width.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.CharacterSlot.Height">
            <summary>
            The character's typografical height.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont.CharacterSlot.#ctor(System.Int32,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="size"></param>
            <param name="posInfo"></param>
            <param name="textureSize"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection">
            <summary>
            A collection of Materials.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.Add(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Adds a new material.
            </summary>
            <param name="newMaterial">The new material.</param>
            <returns>The new material id.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.Update(System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material)">
            <summary>
            Updates a material.
            
            When a Material reference is added to a MaterialCollection, any modification to its properties are handled properly by
            the graphics engine.
            
            For instance:
            <code>
            Material m = new Material();
            m.DiffuseColor = Color.Blue;
            graphicsObject.Materials.Add(m);
            
            m.DiffuseColor = Color.Red; //the diffuse color will be properly updated
            </code>
            
            </summary>
            <param name="materialId">the material id.</param>
            <param name="updatedMaterial">The updated material.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.Remove(System.Int32)">
            <summary>
            Removes a material.
            
            When a material is removed, all materials with the ID greater than the removed material's ID have their IDs decremented by one.
            </summary>
            <param name="materialId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.Clear">
            <summary>
            Removes all materials from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.Clone">
            <summary>
            Returns a new copy of the material collection. 
            The clones material collection contains clones of the materials.
            </summary>
            <returns>A new instance of MaterialCollection.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.UpdateInternalState(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the internal state of all materials in this collection.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.Count">
            <summary>
            The number of materials in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.MaterialCollection.Item(System.Int32)">
            <summary>
            Returns a material associated with the material id.
            </summary>
            <param name="id">The material id.</param>
            <returns>A material.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSourceState">
            <summary>
            Encapsulates the color source used for lighting calculations.
            
            This render state is only meaningful if lighting is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSourceState.#ctor">
            <summary>
            Constructs a new ColorSourceState object and set its properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSourceState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of ColorSourceState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSourceState.Ambient">
            <summary>
            Ambient color source for lighting calculations. The default value is ColorSource.Material. 
            
            If the color source is set to a vertex component not present in the current vertex format, the material color is used.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSourceState.Diffuse">
            <summary>
            Diffuse color source for lighting calculations. The default value is ColorSource.Color1.
            
            If the color source is set to a vertex component not present in the current vertex format, the material color is used.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSourceState.Specular">
            <summary>
            Specular color source for lighting calculations. The default value is ColorSource.Color2. 
            
            If the color source is set to a vertex component not present in the current vertex format, the material color is used.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSourceState.Emissive">
            <summary>
            Emissive color source for lighting calculations. The default value is ColorSource.Material. 
            If the color source is set to a vertex component not present in the current vertex format, the material color is used.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorWriteState">
            <summary>
            Encapsulates the per-channel write for the render-target color buffer. This render state does not affect the clear operation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorWriteState.#ctor">
            <summary>
            Constructs a new ColorWriteState object and set its properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorWriteState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new ColorWriteState instance.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorWriteState.Color">
            <summary>
            Whether the color channel is updated during 3D rendering.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorWriteState.Alpha">
            <summary>
            Whether the alpha channel is updated during 3D rendering.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend">
            <summary>
            Defines the supported blend mode.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.Zero">
            <summary>
            Blend factor is (0, 0, 0, 0).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.One">
            <summary>
            Blend factor is (1, 1, 1, 1).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.InvBlendFactor">
            <summary>
            Inverted constant color blending factor used by the frame-buffer blender. This blend mode is supported only if BlendCaps.SupportsBlendFactor is set.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.BlendFactor">
            <summary>
            Constant color blending factor used by the frame-buffer blender. This blend mode is supported only if BlendCaps.SupportsBlendFactor is set.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.BothInvSourceAlpha">
            <summary>
            Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As), and destination blend factor is (As, As, As, As); the destination blend selection is overridden. This blend mode is supported only for the RenderStates.SourceBlend render state.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.SourceAlphaSat">
            <summary>
            Blend factor is (f, f, f, 1); f = min(A, 1 - Ad).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.InvDestinationColor">
            <summary>
            Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.DestinationColor">
            <summary>
            Blend factor is (Rd, Gd, Bd, Ad).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.InvDestinationAlpha">
            <summary>
            Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.DestinationAlpha">
            <summary>
            Blend factor is (Ad, Ad, Ad, Ad).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.InvSourceAlpha">
            <summary>
            Blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.SourceAlpha">
            <summary>
            Blend factor is (As, As, As, As).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.InvSourceColor">
            <summary>
            Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Blend.SourceColor">
            <summary>
            Blend factor is (Rs,Gs,Bs,As).
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSource">
            <summary>
            Defines the location at which a color or color component must be accessed for lighting calculations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSource.Color1">
            <summary>
            Use the diffuse vertex color.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSource.Color2">
            <summary>
            Use the specular vertex color.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ColorSource.Material">
            <summary>
            Use the color from the current material. 
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Cull">
            <summary>
            Defines the supported culling modes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Cull.CounterClockwise">
            <summary>
            Cull back faces with counterclockwise vertices. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Cull.Clockwise">
            <summary>
            Cull back faces with clockwise vertices. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Cull.None">
            <summary>
            Don't cull faces based on winding order.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode">
            <summary>
            Represents the mode used to perform an intersection test.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode.IntersectBoundingBox">
            <summary>
            The intersection test should be performed using a bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode.IntersectBoundingSphere">
            <summary>
            The intersection test should be performed using a bounding sphere.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode.IntersectMesh">
            <summary>
            The intersection test should be performed using the mesh polygons.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material">
            <summary>
            Materials describe how polygons reflect light or appear to emit light in a 3D scene. Material properties detail a material's
            diffuse reflection, ambient reflection, light emission, and specular highlight characteristics. With the exception of the
            specular property, each property is described as an RGBA color that represents how much of the red, green, and blue parts
            of a given type of light it reflects, and an alpha blending factor.
            
            The material colors are only meaningful if the Lighting render state is enabled.
            
            A material also describes which textures are used to render polygons. The RenderState is used to define how each texture is blended.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.#ctor">
            <summary>
            Constructs a new Material object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.Clone">
            <summary>
            Returns a new copy of the material.
            If a material points to one or more textures, the new material will point to the same texture instances.
            </summary>
            <returns>A new instance of Material.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.AmbientColor">
            <summary>
            Gets or sets the ambient color of this material.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of this material.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.SpecularColor">
            <summary>
            Gets or sets the specular color of this material.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.EmissiveColor">
            <summary>
            Gets or sets the emissive color of this material.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.TranslucentTextures">
            <summary>
            Gets a property indicating whether this material has a transparent texture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.Translucent">
            <summary>
            Gets a property indicating whether this material has any transparent components.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.TranslucentMaterial">
            <summary>
            Gets or sets a property indicating whether this material has a transparent component.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Material.Textures">
            <summary>
            Gets the collection of textures associated with this material.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState">
            <summary>
            Encapsulates all alpha-blending render states.
            
            Alpha blending is used to display an image that has transparent or semi-transparent pixels. In addition to a red, green, and blue
            color channel, each pixel in an alpha bitmap has a transparency component known as its alpha channel. The alpha channel typically
            contains as many bits as a color channel. For example, an 8-bit alpha channel can represent 256 levels of transparency,
            from 0 (the entire pixel is transparent) to 255 (the entire pixel is opaque). 
            Color can be defined with or without alpha values. Color without alpha is RGB color with alpha is stored as ARGB. 
            Vertex data, material data and texture data can be used to give object's transparency. The frame buffer can also be used
            to generate transparency effects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.#ctor">
            <summary>
            Constructs a new AlphaState object and sets its properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new AlphaState instance.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.Enabled">
            <summary>
            Whether the alpha-blended transparency is enabled. The default value is false. 
            The type of alpha blending is determined by the SourceBlend and DestinationBlend properties.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.AlphaTestEnable">
            <summary>
            Whether per pixel alpha testing is enabled. If the test passes, the pixel is processed by the frame buffer. Otherwise,
            all frame-buffer processing is skipped for the pixel. The test is done by comparing the incoming alpha value with the
            reference alpha value, using the comparison function provided by the AlphaFunction property.
            The reference alpha value is determined by ReferenceAlpha property.  The default value of this parameter is false.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.SourceBlend">
            <summary>
            One member of the Blend enumeration. The default value is Blend.One. 
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.DestinationBlend">
            <summary>
            One member of the Blend enumeration. The default value is Blend.Zero.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.ReferenceAlpha">
            <summary>
            Value that specifies a reference alpha value against which pixels are tested when alpha testing is enabled. 
            The default value is 0. 
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.AlphaState.AlphaFunction">
            <summary>
            One member of the Compare enumerated type. The default value is Compare.Always. This property enables the render engine
            to accept or reject a pixel, based on its alpha value. 
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare">
            <summary>
            Defines the supported compare functions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.Always">
            <summary>
            Always pass the test. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.Never">
            <summary>
            Always fail the test. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.GreaterEqual">
            <summary>
            Accept the new pixel if its value is greater than or equal to the value of the current pixel.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.NotEqual">
            <summary>
            Accept the new pixel if its value does not equal the value of the current pixel.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.Greater">
            <summary>
            Accept the new pixel if its value is greater than the value of the current pixel.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.LessEqual">
            <summary>
            Accept the new pixel if its value is less than or equal to the value of the current pixel. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.Equal">
            <summary>
            Accept the new pixel if its value equals the value of the current pixel.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Compare.Less">
            <summary>
            Accept the new pixel if its value is less than the value of the current pixel.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.CullState">
            <summary>
            Encapsulates the triangle culling render state.
            
            To improve rendering performance, the render engine can cull out (or remove) a primitive that faces away from the camera.
            For single-sided primitives, this saves rendering time because a back-face is not visible. To enable culling,
            it is needed to know the winding order of the vertices (typically counter-clockwise).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.CullState.#ctor">
            <summary>
            Constructs a new CullState object and sets its properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.CullState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of CullState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.CullState.Enabled">
            <summary>
            Whether culling is enabled. The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.CullState.Mode">
            <summary>
            Specifies how triangle faces are culled. The default value is Cull.CounterClockwise.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogApplyMode">
            <summary>
            Defines the supported fog calculation modes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogApplyMode.PerPixel">
            <summary>
            Calculates the fog on a per-pixel basis in the device driver. This is different from vertex fog, which is computed by the
            pipeline during transformation and lighting calculations. Pixel fog is sometimes called table fog because some drivers use
            a precalculated lookup table to determine the fog factor, using the depth of each pixel to apply in blending computations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogApplyMode.PerVertex">
            <summary>
            Calculates the fog on a per-vertex basis by the transformation and lighting stage. Fog is calculated at each vertex in a
            polygon, and then interpolates the results across the face of the polygon during rasterization.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogMode">
            <summary>
            Defines the fog modes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogMode.Linear">
            <summary>
            Fog effect intensifies linearly between the start and end points, according to the formula f= (end - d) / (end - start)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogMode.Exp2">
            <summary>
            Fog effect intensifies exponentially with the square of the distance, according to the formula f = 1 / (e^((d*density)^2))
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogMode.Exp">
            <summary>
            Fog effect intensifies exponentially, according to the formula f = 1 / (e^(d*density))
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogMode.None">
            <summary>
            No fog effect.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureAddress">
            <summary>
            Defines the supported texture-addressing modes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureAddress.Wrap">
            <summary>
            Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times;
            no mirroring is performed. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureAddress.Mirror">
            <summary>
            Similar to TextureAddress.Wrap, except that the texture is flipped at every integer junction. For u values between 0 and 1,
            for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3,
            the texture is normal again; and so on. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureAddress.Clamp">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureAddress.Border">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the border color.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureAddress.MirrorOnce">
            <summary>
            Similar to TextureAddress.Mirror and TextureAddress.Clamp. Takes the absolute value of the texture coordinate
            (thus, mirroring around 0), and then clamps to the maximum value.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFilter">
            <summary>
            Defines texture filtering modes for a texture stage.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFilter.None">
            <summary>
            Mipmapping disabled. The rasterizer should use the magnification filter instead.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFilter.Point">
            <summary>
            Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the
            desired pixel value is used. The texture filter to be used between mipmap levels is nearest-point mipmap filtering.
            The rasterizer uses the color from the texel of the nearest mipmap texture. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFilter.Linear">
            <summary>
            Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of
            a 2 x 2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is
            trilinear mipmap interpolation. The rasterizer linearly interpolates pixel color, using the texels of the two nearest
            mipmap textures. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFilter.Anisotropic">
            <summary>
            Anisotropic texture filtering used as a texture magnification or minification filter. Compensates for distortion caused
            by the difference in angle between the texture polygon and the plane of the screen. 
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState">
            <summary>
            Encapsulates all fog blending render states.
            
            Essentially, fog is implemented by blending the color of objects in a scene with a chosen fog color based on the depth
            of an object in a scene or its distance from the viewpoint. As objects grow more distant, their original color blends
            more and more with the chosen fog color, creating the illusion that the object is being increasingly obscured by tiny
            particles floating in the scene.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.#ctor">
            <summary>
            Constructs a new FogState object and sets its properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of FogState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.Enabled">
            <summary>
            Whether fog blending is enabled. The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.Start">
            <summary>
            Depth at which pixel or vertex fog effects begin for linear fog mode. The default value is 0.0f. Depth is specified
            in world space for vertex fog and either device space [0.0, 1.0] or world space for pixel fog. For pixel fog,
            these values are in device space when the system uses z for fog calculations and world-world space when the system is
            using eye-relative fog (w-fog).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.End">
            <summary>
            Depth at which pixel or vertex fog effects end for linear fog mode. The default value is 1.0f. Depth is specified
            in world space for vertex fog and either device space [0.0, 1.0] or world space for pixel fog. For pixel fog,
            these values are in device space when the system uses z for fog calculations and in world space when the system is
            using eye-relative fog (w-fog).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.Density">
            <summary>
            Fog density for pixel or vertex fog used in the exponential fog modes (FogMode.Exp and FogMode.Exp2). Valid density
            values range from 0.0 through 1.0. The default value is 1.0.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.Color">
            <summary>
            The fog color. The default value is Color.Transparent (0).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.Mode">
            <summary>
            The fog formula to be used for the fog blending. The default value is FogMode.None.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.ApplyMode">
            <summary>
            The fog calculation mode. The default value is ApplyMode.Pixel.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.FogState.RangeFogEnable">
            <summary>
            Wether range-based vertex fog is enabled. The default value is false, in which case the system uses depth-based fog.
            In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the
            object (that is, the z-coordinate) in the scene. In range-based fog, all fog methods work as usual, except that they
            use range instead of depth in the computations.
            Range is the correct factor to use for fog computations, but depth is commonly used instead because range is time-consuming
            to compute and depth is generally already available. Using depth to calculate fog has the undesirable effect of having the
            fogginess of peripheral objects change as the viewer's eye moves - in this case, the depth changes and the range remains
            constant. Range correction is offered only for vertex fog.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates">
            <summary>
            A collection of methods that return RenderState templates that can be used to set the initial state of an object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.SimpleWireframe">
            <summary>
            A template that sets 
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.NoTextureWithMaterialColors">
            <summary>
            Template for a mesh with PositionVertex vertices and a material.
            
            This template disables lighting. If the vertices contain normals, enable lighting if desired.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.NoTextureWithVertexColors">
            <summary>
            Template for a mesh with PositionColoredVertex vertices.
            
            This template disables lighting. If the vertices contain normals, enable lighting if desired.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.SimpleSingleTexture">
            <summary>
            Template for a mesh with PositionVertex vertices and a texture.
            
            This template disables lighting. If the vertices contain normals, enable lighting if desired.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.SimpleSingleTextureWithNormals">
            <summary>
            Template for a mesh with PositionNormalVertex vertices, a material and a texture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.SimpleAlphaBlendedTexture">
            <summary>
            Template for a mesh with PositionVertex vertices and a texture with an alpha channel.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.SimpleAlphaBlendedTextureWithNormals">
            <summary>
            Template for a mesh with PositionNormalVertex vertices, a material and a texture with an alpha channel.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderStateTemplates.SimpleSemiTransparentTexture">
            <summary>
            Template for a mesh with PositionVertex vertices and a texture. When using this render state template, primitives
            will be rendered with transparency. The level of transparency is controlled by the TextureFactor.Value property.
            The default alpha value is 128.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState">
            <summary>
            Encapsulates all sampler states.
            
            For more information, see TextureFilter.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderState">
            <summary>
            Represents a render state (or a collection of render states) that is associated with a texture blending stage.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderState.UpdateInternalRenderState(Microsoft.MapPoint.Graphics3D.State.RenderStateObject,System.Int32)">
            <summary>
            Updates the internal graphics device RenderStateObject instance.
            </summary>
            <param name="state">The internal render stage object.</param>
            <param name="stage">The stage id associated with this render state.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderState.Changed">
            <summary>
            Whether any state was updated since the last time this property was accessed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.#ctor">
            <summary>
            Constructs a new SamplerState object and sets its properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of SamplerState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.MagnificationFilter">
            <summary>
            The magnification filter to use. The default value is TextureFilter.Point.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.MinificationFilter">
            <summary>
            The minification filter to use. The default value is TextureFilter.Point.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.MipmapFilter">
            <summary>
            The filter to use between mipmap levels. The default value is TextureFilter.Point.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.AddressU">
            <summary>
            The texture-address mode for the U coordinate. The default value is TextureAddress.Wrap.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.AddressV">
            <summary>
            The texture-address mode for the V coordinate. The default value is TextureAddress.Wrap.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SamplerState.BorderColor">
            <summary>
            The border color. The default value is Color.FromArgb(0).
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpecularState">
            <summary>
            Encapsulates the specular highlight render state.
            
            Specular highlights are calculated as though every vertex in the object being lit is at the object's origin. This gives
            the expected results as long as the object is modeled around the origin and the distance from the light to the object is
            relatively large. In other cases, the results are undefined.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpecularState.#ctor">
            <summary>
            Constructs a new SpeculateState object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpecularState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of SpecularState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.SpecularState.Enabled">
            <summary>
            Whether specular highlights are enabled. The default value is false.
            
            When this property is set to true, the specular color is added to the base color after the texture cascade but before
            alpha blending.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderStateCollection">
            <summary>
            Encapsulates a collection of render states associated with a texture blending stage.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderStateCollection.#ctor">
            <summary>
            Constructs a new instance of StageRenderStateCollection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderStateCollection.Clone">
            <summary>
            Returns a copy of the current render state collection.
            </summary>
            <returns>A new instance of StageRenderStateCollection.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderStateCollection.Sampler">
            <summary>
            The Sampler render state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderStateCollection.Blending">
            <summary>
            The blending render state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StageRenderStateCollection.Enabled">
            <summary>
            Whether the texture blending stage is enabled. The default value for the first texture stage (stage 0) is true; 
            for all other stages the default is false.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFactorState">
            <summary>
            Encapsulates the TextureFactor render state.
            
            The TextureFactor color is used for multiple-texture blending when the TextureArgument.TFactor argument is specified in a 
            texture-blending operation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFactorState.#ctor">
            <summary>
            Constructs a new TextureFactorState object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFactorState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of TextureFactorState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFactorState.Value">
            <summary>
            The TextureFactor color. The default value is opaque white (0xFFFFFFFF).
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState">
            <summary>
            Encapsulates all blending render states associated with a texture blending stage.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.#ctor">
            <summary>
            Constructs a new BlendingState object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of BlendingState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.Enabled">
            <summary>
            Whether the texture blending stage is enabled. The default value for the first texture stage (stage 0) is true; for all other stages
            the default is false.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.ColorOperation">
            <summary>
            Texture color blending operation identified by one member of the TextureOperation enumeration.
            The default value is TextureOperation.Modulate.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.ColorArgument1">
            <summary>
            The first color argument for the stage, identified by one member of the TextureArgument enumeration. The default
            argument is TextureArgument.Texture. Specify TextureArgument.Temp to select a temporary register color for read or write.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.ColorArgument2">
            <summary>
            The second color argument for the stage, identified by one member of the TextureArgument enumeration. The default
            argument is TextureArgument.Current. Specify TextureArgument.Temp to select a temporary register color for read or write.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.AlphaOperation">
            <summary>
            Texture alpha blending operation identified by one member of the TextureOperation enumeration. The default value is
            TextureOperation.SelectArg1.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.AlphaArgument1">
            <summary>
            The first alpha argument for the stage, identified by one member of the TextureArgument enumeration. The default
            argument is TextureArgument.Texture. Specify TextureArgument.Temp to select a temporary register color for read or write.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.AlphaArgument2">
            <summary>
            The ssecond alpha argument for the stage, identified by one member of the TextureArgument enumeration. The default
            argument is TextureArgument.Current. Specify TextureArgument.Temp to select a temporary register color for read or write.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.EnableTextureTransform">
            <summary>
            Whether the texture coordinates are transformed by the TextureTransform matrix before they are sent to the rasterizer.
            The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.TextureTransform">
            <summary>
            The transformation matrix used to transform the texture coordinates when EnableTextureTransfom is true. The default value is
            Matrix4x4D.Identity.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.BlendingState.ResultArgument">
            <summary>
            The destination register for the result of this stage. This value can be set to TextureArgument.Current (the default value)
            or to TextureArgument.Temp, which is a single temporary register that can be read into subsequent stages as an input argument.
            The final color passed to the fog blender and frame buffer is taken from TextureArgument.Current, so the last active texture
            stage state must be set to write to current.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WireframeState">
            <summary>
            Encapsulates the Wireframe fill mode.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WireframeState.#ctor">
            <summary>
            Constructs a WireframeState object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WireframeState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of WireframeState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.WireframeState.Enabled">
            <summary>
            Gets or sets whether wireframe mode is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ZBufferState">
            <summary>
            Encapsulates all z-buffer render states.
            
            A depth buffer, often called a z-buffer, is a property of the graphics device that stores depth information. When the graphics engine
            renders a scene to a target surface, it can use the memory in an associated depth-buffer surface as a workspace to determine how
            the pixels of rasterized polygons occlude one another. The graphics engine uses an off-screen surface as the target to which final
            color values are written. The depth-buffer surface that is associated with the render-target surface is used to store depth
            information that tells the graphics engine how deep each visible pixel is in the scene. When a scene is rasterized with depth 
            buffering enabled, each point on the rendering surface is tested.
            At the beginning of the test, the depth value in the depth buffer is set to the largest possible value for the scene. The color 
            value on the rendering surface is set to either the background color value or the color value of the background texture at that 
            point. Each polygon in the scene is tested to see if it intersects with the current coordinate (x,y) on the rendering surface.
            If it does, the depth value - which will be the z coordinate in a z-buffer - at the current point is tested to see if it is
            smaller than the depth value stored in the depth buffer. If the depth of the polygon value is smaller, it is stored in the
            depth buffer and the color value from the polygon is written to the current point on the rendering surface. If the depth value 
            of the polygon at that point is larger, the next polygon in the list is tested.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ZBufferState.#ctor">
            <summary>
            Constructs a ZBufferState object and sets its properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ZBufferState.Clone">
            <summary>
            Returns a copy of the current render state.
            </summary>
            <returns>A new instance of ZBufferState.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ZBufferState.Enabled">
            <summary>
            Whether z-buffering is enabled. The default value is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ZBufferState.Writable">
            <summary>
            Whether writing to the depth buffer is enabled. The default value is true. This property enables an application to prevent
            the system from updating the depth buffer with new depth values. If false, depth comparisons are still made according to the
            ZBufferFunction property, assuming that depth buffering is taking place, but depth values are not written to the buffer. 
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ZBufferState.ZBufferFunction">
            <summary>
            One member of the Compare enumeration. The default value is Compare.LessEqual. This property enables an application to
            accept or reject a pixel, based on its distance from the camera. 
            The depth value of the pixel is compared with the depth-buffer value. If the depth value of the pixel passes the comparison 
            function, the pixel is written.
            The depth value is written to the depth buffer only if the Writable property is true.
            The graphics device works faster if the depth test fails, because there is no need to filter and modulate the texture
            if the pixel is not going to be rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.ZBufferState.ZBias">
            <summary>
            The Z-Bias value. The default value is zero. The bias is a value between 0-16 inclusive.
            
            Polygons that are coplanar in 3D space can be made to appear as if they are not coplanar by adding a z-bias to each one.
            This is a technique commonly used to ensure that shadows in a scene are displayed properly. For instance, a shadow on a 
            wall will likely have the same depth value as the wall does. If the wall is rendered before the shadow, the shadow
            might not be visible, or depth artifacts might be visible. The order in which the object can be reversed in hopes of
            reversing the effect, but depth artifacts are still likely.
            To help ensure that coplanar polygons are rendered properly by adding a bias to the z-values that the system 
            uses when rendering the sets of coplanar polygons. A higher z-bias value increases the likelihood that the polygons 
            you render will be visible when displayed with other coplanar polygons.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1">
            <summary>
            Encapsulates operations performed on an index buffer optimized for dynamic access.
            </summary>
            <typeparam name="IndexFormat"></typeparam>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1">
            <summary>
            Encapsulates operations performed on an index buffer.
            </summary>
            <typeparam name="IndexFormat"></typeparam>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.internalIndexBuffer">
            <summary>
            The internal index buffer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.indexSize">
            <summary>
            The size of each index: either 2 (ushort) or 4 (uint) bytes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.#ctor">
            <summary>
            Constructs a new instance of IndexGraphicsBuffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.#ctor(Microsoft.MapPoint.Graphics3D.Types.MeshSubset[])">
            <summary>
            Initializes a new instance of the IndexGraphicsBuffer class by providing an array of subsets.
            </summary>
            <param name="subsets"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddData(`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            If the buffer is dynamic, the copy is performed asynchronously. The rendering thread will copy the data to its internal
            index buffer before rendering the next frame. Since no temporary copy is made, this data should be available at least
            until the end of the current frame.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddData(`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends a single index to the index buffer.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            </summary>
            <param name="data">The index.</param>
            <param name="primType">The primitive type associated with the index.</param>
            <param name="materialId">The material associated with the index.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddData(`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends 2 indices to the index buffer.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddData(`0,`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends 3 indices to the index buffer.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="i3">The third index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.SetData(System.Int32,System.Int32,System.Int32,`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Copies a list of indices to a specified position in the index buffer. The indices are associated with a primitive type
            and a material.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            </summary>
            <param name="destIndex">The position in the index buffer.  The position has to be equal or smaller than the index buffer size.</param>
            <param name="sourceIndex">The position in the source index list.</param>
            <param name="count">The number of indices to copy.</param>
            <param name="data">The list of indices to copy.</param>
            <param name="primType">The primitive type associated to the indices.</param>
            <param name="materialId">The material associated to the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddDataUnsafe(`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            If the bufer is dynamic, the copy is performed asynchronously. The rendering thread will copy the data to its internal
            index buffer before rendering the next frame. Since no temporary copy is made, this data should be available at least
            until the end of the current frame.
            
            This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
            within the valid range of values (determined by the vertices associated to the same graphics object). Since this
            is an unsafe operation, this method can only be called by full-trust code.
            
            This method is faster than its AddData() counterpart. This method is not thread-safe.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddDataUnsafe(`0[],System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            If the bufer is dynamic, the copy is performed asynchronously. The rendering thread will copy the data to its internal
            index buffer before rendering the next frame. Since no temporary copy is made, this data should be available at least
            until the end of the current frame.
            
            This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
            within the valid range of values (determined by the vertices associated to the same graphics object). Since this
            is an unsafe operation, this method can only be called by full-trust code.
            
            This method is faster than its AddData() counterpart. This method is not thread-safe.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="count">The number of indices to copy from the source array.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddDataUnsafe(`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends a single index to the index buffer.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            
            This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
            within the valid range of values (determined by the vertices associated to the same graphics object). Since this
            is an unsafe operation, this method can only be called by full-trust code.
            
            This method is faster than its AddData() counterpart. This method is not thread-safe.
            </summary>
            <param name="data">The index.</param>
            <param name="primType">The primitive type associated with the index.</param>
            <param name="materialId">The material associated with the index.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddDataUnsafe(`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Appends 2 indices to the index buffer.
             
             The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            
             This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
             within the valid range of values (determined by the vertices associated to the same graphics object). Since this
             is an unsafe operation, this method can only be called by full-trust code.
            
             This method is faster than its AddData() counterpart. This method is not thread-safe.
             </summary>
             <param name="i1">The first index.</param>
             <param name="i2">The second index.</param>
             <param name="primType">The primitive type associated with the indices.</param>
             <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddDataUnsafe(`0,`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Appends 3 indices to the index buffer.
             
             The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
             
             This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
             within the valid range of values (determined by the vertices associated to the same graphics object). Since this
             is an unsafe operation, this method can only be called by full-trust code.
            
             This method is faster than its AddData() counterpart. This method is not thread-safe.
             </summary>
             <param name="i1">The first index.</param>
             <param name="i2">The second index.</param>
             <param name="i3">The third index.</param>
             <param name="primType">The primitive type associated with the indices.</param>
             <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.SetDataUnsafe(System.Int32,System.Int32,System.Int32,`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Copies a list of indices to a specified position in the index buffer. The indices are associated with a primitive type
             and a material.
             
             The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
             If the buffer is dynamic, the copy is performed asynchronously. The rendering thread will copy the data to its internal
             index buffer before rendering the next frame. Since no temporary copy is made, this data should be available at least
             until the end of the current frame.
             
             This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
             within the valid range of values (determined by the vertices associated to the same graphics object). Since this
             is an unsafe operation, this method can only be called by full-trust code.
            
             This method is faster than its SetData() counterpart. This method is not thread-safe.
             </summary>
             <param name="destIndex">The position in the index buffer.  The position has to be equal or smaller than the index buffer size.</param>
             <param name="sourceIndex">The position in the source index list.</param>
             <param name="count">The number of indices to copy.</param>
             <param name="data">The list of indices to copy.</param>
             <param name="primType">The primitive type associated to the indices.</param>
             <param name="materialId">The material associated to the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.Clone">
            <summary>
            Returns a new copy of the index buffer, including the subset information.
            </summary>
            <returns>A new instance of IndexBufferManager.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.InternalClone">
            <summary>
            Returns a new copy of the index buffer.
            </summary>
            <returns>A new instance of IndexBufferManager.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.Clear">
            <summary>
            Clears the index buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.InternalClear">
            <summary>
            Removes all indices from the index buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.GetData">
            <summary>
            Returns a copy of indices currently in the index buffer.
            
            This method may return an InvalidOperationException if the manager's implementation does not support reading indices from
            the index buffer.
            </summary>
            <returns>A list of indices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.TrimExcess">
            <summary>
            Sets the capacity of the index buffer to its current size.
            
            This operation causes the internal vertex buffer to be recreated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.UpdateIndexBuffer(Microsoft.MapPoint.Graphics3D.Graphics3DDevice,System.Int32)">
            <summary>
            Update the graphics device index buffer.
            </summary>
            <param name="device">The graphics device.</param>
            <param name="vertexCount">The number of vertices in the associated vertex buffer.</param>
            <returns>The number of indices in the index buffer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.AddMeshSubsetUnsafe(Microsoft.MapPoint.Rendering3D.GraphicsProxy.MeshSubsetInformation)">
            <summary>
            Adds a new subset to the internal list that is automatically managed by the index graphics buffer.
            
            This method should only be used when the application needs to handle each drawing call sent to the graphics device.
            Each subset is translated to an individual draw call.
            
            This method can only be called by full-trust code.
            </summary>
            <param name="subset"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.ClearMeshSubsetsUnsafe">
             <summary>
             Clear the internal list of subsets automatically managed by the index graphics buffer.
            
             This method should only be used when the application needs to handle each drawing call sent to the graphics device.
             Each subset is translated to an individual draw call.
             
             This method can only be called by full-trust code.
             </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.ClearSubsets">
            <summary>
            Removes all subsets.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.GetMeshSubsetInformation(System.Int32)">
            <summary>
            Returns a copy of the subset information.
            </summary>
            <param name="subsetId">The subset id.</param>
            <returns>An instance of MeshSubsetInformation.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.UpdateIndexBufferSubset(Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the list of subsets according to the new data being added to the index buffer.
            </summary>
            <param name="primType">The primitive type associated with the new indices.</param>
            <param name="materialId">The material id associated with the new indices.</param>
            <param name="destIndex">The new indices destination index.</param>
            <param name="count">The number of indices being added.</param>
            <returns>Whether the operation was successful.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources referenced by this object.
            </summary>
            <param name="disposing">Whether this object is being disposed.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.IndexBuffer">
            <summary>
            Gets the internal index buffer;
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.SupportsGetData">
            <summary>
            Returns true if calls to GetData will succeed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.Count">
            <summary>
            Returns the number of indices in the index buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.Capacity">
            <summary>
            Returns the number of indices the index buffer can contain.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.IndexGraphicsBuffer`1.Subsets">
            <summary>
            The list of mesh subsets.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.#ctor">
            <summary>
            Constructs a new instance of DynamicIndexGraphicsBuffer.
            
            Only full-trust code can created an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.#ctor(System.Int32)">
             <summary>
             Constructs a new instance of DynamicIndexGraphicsBuffer.
            
             Only full-trust code can created an instance of this class.
             </summary>
             <param name="initialIndexCount">The initial index buffer capacity.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddData(`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            This method is not supported.
            
            Full-trust code should call AddDataUnsafe(). Partial-trust code must use static index buffers.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddData(`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            This method is not supported.
            
            Full-trust code should call AddDataUnsafe(). Partial-trust code must use static index buffers.
            </summary>
            <param name="data">The index.</param>
            <param name="primType">The primitive type associated with the index.</param>
            <param name="materialId">The material associated with the index.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddData(`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            This method is not supported.
            
            Full-trust code should call AddDataUnsafe(). Partial-trust code must use static index buffers.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddData(`0,`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            This method is not supported.
            
            Full-trust code should call AddDataUnsafe(). Partial-trust code must use static index buffers.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="i3">The third index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.SetData(System.Int32,System.Int32,System.Int32,`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            This method is not supported.
            
            Full-trust code should call AddDataUnsafe(). Partial-trust code must use static index buffers.
            </summary>
            <param name="destIndex">The position in the index buffer.  The position has to be equal or smaller than the index buffer size.</param>
            <param name="sourceIndex">The position in the source index list.</param>
            <param name="count">The number of indices to copy.</param>
            <param name="data">The list of indices to copy.</param>
            <param name="primType">The primitive type associated to the indices.</param>
            <param name="materialId">The material associated to the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddDataUnsafe(`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            /// Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddDataUnsafe(`0[],System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            /// Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="count">The number of indices to copy from the source array.</param>  
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddDataUnsafe(`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends a single index to the index buffer.
            </summary>
            <param name="data">The index.</param>
            <param name="primType">The primitive type associated with the index.</param>
            <param name="materialId">The material associated with the index.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddDataUnsafe(`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends 2 indices to the index buffer.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.AddDataUnsafe(`0,`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends 3 indices to the index buffer.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="i3">The third index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.GetPendingUpdateSlot(Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Returns the more recent update slot if the primitive type and material id match the input parameters.
            </summary>
            <param name="primType">The primitive type.</param>
            <param name="materialId">The material id.</param>
            <returns>An instance of PendingBufferUpdate if the update slot is found, or null otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.InternalClear">
            <summary>
            Removes all indices from the index buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.GetData">
            <summary>
            This operation is not supported by dynamic index buffers.
            </summary>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.SetDataUnsafe(System.Int32,System.Int32,System.Int32,`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Copies indices to the index buffer.
            </summary>
            <param name="destIndex">The position in the index buffer.</param>
            <param name="sourceIndex">The position in the source index list.</param>
            <param name="count">The number of indices to copy.</param>
            <param name="data">The list of indices to copy.</param>
            <param name="primType">The primitive type associated to the indices.</param>
            <param name="materialId">The material associated to the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.TrimExcess">
            <summary>
            Sets the capacity of the index buffer to its current size.
            
            This operation causes the internal vertex buffer to be recreated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.UpdateIndexBuffer(Microsoft.MapPoint.Graphics3D.Graphics3DDevice,System.Int32)">
            <summary>
            Updates the graphics device index buffer.
            </summary>
            <param name="device">The graphics device.</param>
            <param name="vertexCount">The number of vertices in the associated vertex buffer.</param>
            <returns>The number of indices in the index buffer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.InternalClone">
            <summary>
            Returns an empty instance of IndexGraphicsBuffer.
            </summary>
            <returns>A new instance of DynamicIndexBufferManager</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.SupportsGetData">
            <summary>
            Returns true if calls to GetData will succeed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.Count">
            <summary>
            Returns the number of indices in the index buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.Capacity">
            <summary>
            Returns the number of indices the index buffer can contain.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1">
            <summary>
            Represents an internal index buffer update. Instances of PendingBufferUpdate are used to managed the index buffer subsets.
            </summary>
            <typeparam name="DataFormat">The index data format.</typeparam>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.#ctor(`1[],System.Int32,System.Int32,System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Constructs a new instance of PendingBufferUpdate.
            </summary>
            <param name="data">The list of indices to be added.</param>
            <param name="srcIndex">The first index to be copied from the source array.</param>
            <param name="destIndex">The position in the destination buffer to start copying the data.</param>
            <param name="count">The number of indices to copy from the source index buffer.</param>
            <param name="primType">The primitive type associated with the indices being added.</param>
            <param name="materialId">The material associated with the indices being added.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.#ctor(`1[],System.Int32,System.Int32,System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32,System.Boolean)">
            <summary>
            Constructs a new instance of PendingBufferUpdate.
            </summary>
            <param name="data">The list of indices to be added.</param>
            <param name="srcIndex">The first index to be copied from the source array.</param>
            <param name="destIndex">The position in the destination buffer to start copying the data.</param>
            <param name="count">The number of indices to copy from the source index buffer.</param>
            <param name="primType">The primitive type associated with the indices being added.</param>
            <param name="materialId">The material associated with the indices being added.</param>
            <param name="canAppendData">Whether new indices can be attached to this buffer update slot.</param>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.Data">
            <summary>
            The indices to be added.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.SrcIndex">
            <summary>
            The first index to be copied from the source index buffer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.DestIndex">
            <summary>
            The position in the destination buffer to start copying the data.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.Count">
            <summary>
            The number of indices to copy from the source index buffer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.PrimitiveType">
            <summary>
            The primitive type associated with the indices being added.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.MaterialId">
            <summary>
            The material associated with the indices being added.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicIndexGraphicsBuffer`1.PendingBufferUpdate`1.CanAppendData">
            <summary>
            Whether new indices can be attached to this buffer update slot.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1">
            <summary>
            Implements a vertex buffer manager that manages a dynamic vertex buffer (i.e. a vertex buffer that is updated frequently
            </summary>
            <typeparam name="VertexFormat">The vertex format.</typeparam>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1">
            <summary>
            Encapsulates operations performed on a vertex buffer.
            </summary>
            <typeparam name="VertexFormat">The vertex format.</typeparam>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.internalVertexBuffer">
            <summary>
            The internal vertex buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.AddData(`0)">
            <summary>
            Adds a vertex to the vertex buffer.
            
            The buffer grows automatically if the total number of vertices exceeds the current buffer's capacity.
            </summary>
            <param name="data">A vertex.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.Clear">
            <summary>
            Removes all vertices from the vertex buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.GetData">
            <summary>
            Returns a copy of the list of vertices currently in the vertex buffer.
            
            This method returns an InvalidOperationException if dynamic vertex buffers are used.
            </summary>
            <returns>A list of vertices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.GetDataUnsafe">
             <summary>
             Returns an array of vertices currently in the vertex buffer.
            
             The returned array should be used exclusively as read-only. Adding or removing elements from the list may cause undefined behavior.
             The array length may be larger than the value returned by the Count property. Use the Count property to know the number of
             valid vertices in the array.
             
             This method is not thread safe.
             
             This method returns an InvalidOperationException if dynamic vertex buffers are used.
             </summary>
             <returns>An array of vertices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.ComputeBoundingBox">
            <summary>
            Computes the axis-aligned bounding box for the current vertex buffer.
            </summary>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.AddData(`0[])">
            <summary>
            Adds a list of vertices to the vertex buffer.
            </summary>
            <param name="data">A list of vertices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.SetData(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Copies a list of vertices to a specified position in the vertex buffer.
            
            The buffer grows automatically if the total number of vertices exceeds the current buffer's capacity.
            If the buffer is dynamic, the copy is performed asynchronously. The rendering thread will copy the data to its internal
            vertex buffer before rendering the next frame. Since no temporary copy is made, this data should be available at least
            until the end of the current frame.
            </summary>
            <param name="destPos">The position in the vertex buffer. The position has to be equal or smaller than the vertex buffer size.</param>
            <param name="sourcePos">The position in the source vertex list.</param>
            <param name="count">The number of vertices to copy.</param>
            <param name="data">The list of vertices to copy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.SetData(System.Int32,`0[])">
            <summary>
            Copies a list of vertices to a specified position in the vertex buffer.
            
            The buffer grows automatically if the total number of vertices exceeds the current buffer's capacity.
            If the buffer is dynamic, the copy is performed asynchronously. The rendering thread will copy the data to its internal
            vertex buffer before rendering the next frame. Since no temporary copy is made, this data should be available at least
            until the end of the current frame.
            </summary>
            <param name="destPos">The position in the vertex buffer. The position has to be equal or smaller than the vertex buffer size.</param>
            <param name="data">The source data to copy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.TrimExcess">
            <summary>
            Sets the capacity of the vertex buffer to its current size.
            
            This operation causes the internal vertex buffer to be recreated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.Clone">
            <summary>
            Returns a new copy of the vertex buffer.
            </summary>
            <returns>A new instance of VertexBufferManager.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.UpdateVertexBuffer(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the graphics device vertex buffer.
            </summary>
            <param name="device">The current graphics device.</param>
            <returns>The current number of vertices in the vertex buffer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources referenced by this object.
            </summary>
            <param name="disposing">Whether this object is being disposed.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.SupportsGetData">
            <summary>
            Returns true if calls to GetData will succeed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.SupportsComputeBoundingBox">
            <summary>
            Returns true if calls to ComputeBoundingBox will succeed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.VertexBuffer">
            <summary>
            Gets the internal vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.Count">
            <summary>
            Returns the number of vertices in the vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.Capacity">
            <summary>
            Returns the number of vertices the vertex buffer can contain.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.VertexGraphicsBuffer`1.Dirty">
            <summary>
            The Dirty flag is set to true whenever the vertex buffer is modified.
            
            The flag is not reset (to false) automatically. It is up to the application to reset it to its default state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.#ctor">
            <summary>
            Creates a new DynamicVertexBufferManager instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.#ctor(System.Int32,System.Boolean)">
             <summary>
             Creates a new DynamicVertexBufferManager instance.
            
             Setting the enableCollision flag may impact performance, since it is necessary to go through the entire vertex
             buffer (a O(n) operation) to find each vertex position -- used to calculate a bounding box.
             </summary>
             <param name="initialVertexBufferSize">The initial vertex buffer capacity.</param>
             <param name="enableAABB">If true, calls to CalculateBoundingBox will succeed, at a cost of increased memory usage.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.AddData(`0)">
            <summary>
            Adds a vertex to the vertex buffer.
            </summary>
            <param name="data">A vertex.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.AddData(`0[])">
            <summary>
            Adds a list of vertices to the vertex buffer.
            </summary>
            <param name="data">A list of vertices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.Clear">
            <summary>
            Removes all vertices from the vertex buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.GetData">
            <summary>
            Reading back from a dynamic vertex buffer is not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.GetDataUnsafe">
            <summary>
            Reading back from a dynamic vertex buffer is not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.ComputeBoundingBox">
            <summary>
            Computes the axis-aligned bounding box for the current vertex buffer.
            </summary>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.InternalSetData(System.Int32,System.Int32,System.Int32,`0[],System.Boolean)">
            <summary>
            Copies vertices to the vertex buffer.
            </summary>
            <param name="destPos">The position in the vertex buffer.</param>
            <param name="sourcePos">The position in the source vertex list.</param>
            <param name="count">The number of vertices to copy.</param>
            <param name="data">The list of vertices to copy.</param>
            <param name="canAppend">Whether data can be added to the 'data' List.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.SetData(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Copies vertices to the vertex buffer.
            </summary>
            <param name="destPos">The position in the vertex buffer.</param>
            <param name="sourcePos">The position in the source vertex list.</param>
            <param name="count">The number of vertices to copy.</param>
            <param name="data">The list of vertices to copy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.TrimExcess">
            <summary>
            Sets the capacity of the vertex buffer to its current size.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.Clone">
            <summary>
            Returns a new empty instance of DynamicVertexBufferManager.
            </summary>
            <returns>A new instance of DynamicVertexBufferManager.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.UpdateVertexBuffer(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Process all PendingBufferUpdates and updates the graphics device vertex buffer.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The current number of vertices in the vertex buffer.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.CalculateRequiredVBCapacity">
            <summary>
            Calculates the required vertex buffer capacity after all pending buffer updates are processed.
            </summary>
            <returns>The required vertex buffer capacity.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.Dirty">
            <summary>
            The Dirty flag is set to true whenever the vertex buffer is modified.
            
            The flag is not reset (to false) automatically. It is up to the application to reset it to its default state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.Count">
            <summary>
            Returns the number of vertices in the vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.Capacity">
            <summary>
            Returns the number of vertices the vertex buffer can contain.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.SupportsGetData">
            <summary>
            Returns true if calls to GetData will succeed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.SupportsComputeBoundingBox">
            <summary>
            Returns true if calls to ComputeBoundingBox will succeed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.PendingBufferUpdate`1">
            <summary>
            A PendingBufferUpdate describes a pending vertex buffer update that is processed by the render thread during 'rendering' time.
            </summary>
            <typeparam name="DataFormat">The vertex format.</typeparam>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.PendingBufferUpdate`1.Data">
            <summary>
            The list of vertices to copy to the vertex buffer.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.PendingBufferUpdate`1.SrcIndex">
            <summary>
            The index at the source to start copying vertices.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.PendingBufferUpdate`1.DestIndex">
            <summary>
            The index at the destination (the vertex buffer).
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.PendingBufferUpdate`1.Count">
            <summary>
            The number of vertices to be copied.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.DynamicVertexGraphicsBuffer`1.PendingBufferUpdate`1.CanAppendData">
            <summary>
            Whether the 'Data' list is managed by the VertexBufferManager an can be modified i.e. (data can be added to it)
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1">
            <summary>
            Encapsulates operations performed on an index buffer optimized for static access.
            </summary>
            <typeparam name="IndexFormat">The index format, either ushort (16-bit) or uint (32-bit).</typeparam>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.#ctor">
            <summary>
            Constructs a new instance of StaticIndexGraphicsBuffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of StaticIndexGraphicsBuffer.
            </summary>
            <param name="initialIndexCount">The initial index buffer capacity.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.#ctor(`0[],Microsoft.MapPoint.Graphics3D.Types.MeshSubset[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="subsets"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddData(`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            
            This method is thread-safe.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddData(`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends a single index to the index buffer.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            
            This method is thread-safe.
            </summary>
            <param name="data">The index.</param>
            <param name="primType">The primitive type associated with the index.</param>
            <param name="materialId">The material associated with the index.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddData(`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends 2 indices to the index buffer.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            
            This method is thread-safe.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddData(`0,`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends 3 indices to the index buffer.
            
            The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            
            This method is thread-safe.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="i3">The third index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.SetData(System.Int32,System.Int32,System.Int32,`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Copies a list of indices to a specified position in the index buffer. The indices are associated with a primitive type
             and a material.
             
             The buffer grows automatically if the total number of indices exceeds the current buffer's capacity.
            
             This method is thread-safe.
             </summary>
             <param name="destIndex">The position in the index buffer.  The position has to be equal or smaller than the index buffer size.</param>
             <param name="sourceIndex">The position in the source index list.</param>
             <param name="count">The number of indices to copy.</param>
             <param name="data">The list of indices to copy.</param>
             <param name="primType">The primitive type associated to the indices.</param>
             <param name="materialId">The material associated to the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddDataUnsafe(`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            
            This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
            within the valid range of values (determined by the vertices associated to the same graphics object). Since this
            is an unsafe operation, this method can only be called by full-trust code.
            
            This method is faster than its AddData() counterpart. This method is not thread-safe.
            </summary>
            <param name="data">The list of indices.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddDataUnsafe(`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
            <summary>
            Appends 2 indices to the index buffer.
            
            This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
            within the valid range of values (determined by the vertices associated to the same graphics object). Since this
            is an unsafe operation, this method can only be called by full-trust code.
            
            This method is faster than its AddData() counterpart. This method is not thread-safe.
            </summary>
            <param name="i1">The first index.</param>
            <param name="i2">The second index.</param>
            <param name="primType">The primitive type associated with the indices.</param>
            <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddDataUnsafe(`0,`0,`0,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Appends 3 indices to the index buffer.
            
             This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
             within the valid range of values (determined by the vertices associated to the same graphics object). Since this
             is an unsafe operation, this method can only be called by full-trust code.
             
             This method is faster than its AddData() counterpart. This method is not thread-safe.
             </summary>
             <param name="i1">The first index.</param>
             <param name="i2">The second index.</param>
             <param name="i3">The third index.</param>
             <param name="primType">The primitive type associated with the indices.</param>
             <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddDataUnsafe(`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            
             This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
             within the valid range of values (determined by the vertices associated to the same graphics object). Since this
             is an unsafe operation, this method can only be called by full-trust code.
             
             This method is faster than its AddData() counterpart. This method is not thread-safe.
             </summary>
             <param name="data">The list of indices.</param>
             <param name="primType">The primitive type associated with the indices.</param>
             <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.AddDataUnsafe(`0[],System.Int32,Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Appends indices to the index buffer. A set of indices is associated with a primitive type and a material.
            
             This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
             within the valid range of values (determined by the vertices associated to the same graphics object). Since this
             is an unsafe operation, this method can only be called by full-trust code.
             
             This method is faster than its AddData() counterpart. This method is not thread-safe.
             </summary>
             <param name="data">The list of indices.</param>
             <param name="count">The number of indices to copy from the source array.</param>
             <param name="primType">The primitive type associated with the indices.</param>
             <param name="materialId">The material associated with the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.SetDataUnsafe(System.Int32,System.Int32,System.Int32,`0[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType,System.Int32)">
             <summary>
             Copies a list of indices to a specified position in the index buffer. The indices are associated with a primitive type
             and a material.
            
             This method copies the indices directly to graphics memory. No validation is performed to ensure the indices are
             within the valid range of values (determined by the vertices associated to the same graphics object). Since this
             is an unsafe operation, this method can only be called by full-trust code.
             
             This method is faster than its SetData() counterpart. This method is not thread-safe.
             </summary>
             <param name="destIndex">The position in the index buffer.  The position has to be equal or smaller than the index buffer size.</param>
             <param name="sourceIndex">The position in the source index list.</param>
             <param name="count">The number of indices to copy.</param>
             <param name="data">The list of indices to copy.</param>
             <param name="primType">The primitive type associated to the indices.</param>
             <param name="materialId">The material associated to the indices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.InternalClear">
            <summary>
            Removes all indices from the index buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.GetData">
            <summary>
            Returns a read-only copy of the indices in the index buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.InternalClone">
            <summary>
            Returns a new copy of the IndexGraphicsBuffer.
            </summary>
            <returns>A new instance of StaticIndexBufferManager.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.TrimExcess">
            <summary>
            Sets the capacity of the index buffer to its current size.
            
            This operation causes the internal vertex buffer to be recreated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.VerifyIndices16bit(System.UInt16*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies if all 16-bit indices are equal or less than the associated vertex buffer size.
            </summary>
            <param name="data">The index buffer data.</param>
            <param name="startIndex">The first index that should be verified.</param>
            <param name="indexCount">The number of indices to be verified.</param>
            <param name="vertexCount">The size of the associated vertex buffer.</param>
            <returns>True if the indices are valid; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.VerifyIndices32bit(System.UInt32*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies if all 32-bit indices are equal or less than the associated vertex buffer size.
            </summary>
            <param name="data">The index buffer data.</param>
            <param name="startIndex">The first index that should be verified.</param>
            <param name="indexCount">The number of indices to be verified.</param>
            <param name="vertexCount">The size of the associated vertex buffer.</param>
            <returns>True if the indices are valid; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.VerifyIndices(System.Int32)">
            <summary>
            Determines whether the index buffer data is valid.
            </summary>
            <param name="vertexCount">The number of vertices in the associated vertex buffer.</param>
            <returns>True if the index buffer data is valid; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.UpdateIndexBuffer(Microsoft.MapPoint.Graphics3D.Graphics3DDevice,System.Int32)">
            <summary>
            Updates the graphics device index buffer.
            </summary>
            <param name="device">The graphics device.</param>
            <param name="vertexCount">The number of vertices in the associated vertex buffer.</param>
            <returns>The number of indices in the index buffer.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.Count">
            <summary>
            Returns the number of indices in the index buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.Capacity">
            <summary>
            Returns the number of indices the index buffer can contain.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticIndexGraphicsBuffer`1.SupportsGetData">
            <summary>
            Returns true if calls to GetData will succeed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1">
            <summary>
            Implements a vertex buffer manager that manages a static vertex buffer (i.e. a vertex buffer that is created once and rarely modified)
            </summary>
            <typeparam name="VertexFormat">The vertex format.</typeparam>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.#ctor">
            <summary>
            Creates a new StaticVertexBufferManager instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.#ctor(System.Int32)">
            <summary>
            Creates a new StaticVertexBufferManager instance.
            </summary>
            <param name="initialVertexBufferSize">The initial vertex buffer capacity.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the StaticVertexGraphicsBuffer 
            class in an unsafe (but fast) way by using the provided array as 
            the data.  
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.AddData(`0[])">
            <summary>
            Adds a list of vertices to the vertex buffer.
            </summary>
            <param name="data">A list of vertices.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.AddData(`0)">
            <summary>
            Adds a vertex to the vertex buffer.
            </summary>
            <param name="data">A vertex.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.SetData(System.Int32,System.Int32,System.Int32,`0[])">
            <summary>
            Copies vertices to the vertex buffer.
            
            The vertex buffer will grow automatically if necessary.
            </summary>
            <param name="destPos">The position in the vertex buffer.</param>
            <param name="sourcePos">The position in the source vertex list.</param>
            <param name="count">The number of vertices to copy.</param>
            <param name="data">The list of vertices to copy.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.Clear">
            <summary>
            Removes all vertices from the vertex buffer.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.TrimExcess">
            <summary>
            Sets the capacity of the vertex buffer to its current size.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.GetData">
            <summary>
            Returns a system-memory copy of the list of vertices currently in the vertex buffer.
            </summary>
            <returns>A list of vertices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.GetDataUnsafe">
             <summary>
             Returns an array of vertices currently in the vertex buffer.
            
             The returned array should be used exclusively as read-only. Adding or removing elements from the list may cause undefined behavior.
             The array length may be larger than the value returned by the Count property. Use the Count property to know the number of
             valid vertices in the array.
             
             This method is not thread safe.
             </summary>
             <returns>An array of vertices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.Clone">
            <summary>
            Returns a new copy of the vertex buffer.
            </summary>
            <returns>A new instance of StaticVertexBufferManager</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.ComputeBoundingBox">
            <summary>
            Computes the axis-aligned bounding box for the current vertex buffer.
            </summary>
            <returns>A bounding box.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.UpdateVertexBuffer(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the device vertex buffer when the local system-memory copy of the data has changed.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The current number of vertices in the vertex buffer.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.Dirty">
            <summary>
            The Dirty flag is set to true whenever the vertex buffer is modified.
            
            The flag is not reset (to false) automatically. It is up to the application to reset it to its default state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.Count">
            <summary>
            Returns the number of vertices in the vertex buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.Capacity">
            <summary>
            Returns the number of vertices the vertex buffer can contain.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.SupportsGetData">
            <summary>
            Returns true if calls to GetData will succeed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.StaticVertexGraphicsBuffer`1.SupportsComputeBoundingBox">
            <summary>
            Returns true if calls to ComputeBoundingBox will succeed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType">
            <summary>
            Defines the primitives supported by Microsoft Direct3D.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType.TriangleFan">
            <summary>
            Renders the vertices as a triangle fan.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType.TriangleStrip">
            <summary>
            Renders the vertices as a triangle strip. The backface-culling flag is automatically flipped on even-numbered triangles.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType.TriangleList">
            <summary>
            Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType.LineStrip">
            <summary>
            Renders the vertices as a single polyline. Calls using this primitive type fail if the count is less than two.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType.LineList">
            <summary>
            Renders the vertices as a list of isolated straight line segments. Calls using this primitive type fail if the count is less than two or is odd.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.PrimitiveType.PointList">
            <summary>
            Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.#ctor(Microsoft.MapPoint.Graphics3D.RenderQueues)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues"/> class.
            </summary>
            <param name="internalRenderQueues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.AddRenderable(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject)">
            <summary>
            Adds a renderable to the general list.
            </summary>
            <param name="renderable"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.AddAlphaRenderable(System.Double,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject)">
            <summary>
            Adds a renderable to the alpha list sorted by distance.
            </summary>
            <param name="distance"></param>
            <param name="renderable"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.AddUIRenderable(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject)">
            <summary>
            Adds a renderable to the UI list.
            </summary>
            <param name="renderable"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.AddExclusion(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion)">
            <summary>
            Adds an exclusion area the scene.
            </summary>
            <param name="exclusion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.IsFootprintExcluded(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsExclusion)">
            <summary>
            Returns a flag indicating whether this footprint is excluded.
            </summary>
            <param name="exclusion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.Execute(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Copies all the renderables to the graphics engine render queues.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.CheckAnimating(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsObject)">
            <summary>
            This function checks to see if an object is an animation.  If so it sets the updating flag so that the 
            render queues can set the GraaphicsDevice.Engine.NeedUpdate flag when the Render call happens.
            
            If any object has already set the updating flag the renderable parameter will not be checked again.
            </summary>
            <param name="renderable">The object to check for animation.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues.InternalRenderQueues">
            <summary>
            Gets the internal render queues.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState">
            <summary>
            Encapsulates all render states that set the behavior of the rendering pipeline.
            Render states define set-up states for all kinds of vertex and pixel processing. Some render states setup vertex processing, and 
            some set up pixel processing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.#ctor">
            <summary>
            Constructs a RenderState object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Clone">
            <summary>
            Returns a new copy of this RenderState object.
            </summary>
            <returns>A new instance of RenderState.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.UpdateInternalState">
            <summary>
            Updates the internal render state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.ApplyEffectState(Microsoft.MapPoint.Rendering3D.GraphicsProxy.FixedFunctionState)">
            <summary>
            Applies the fixed-function specific render states to the main internal render state object.
            </summary>
            <param name="state">The fixed-function render state associated with an effect.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Alpha">
            <summary>
            The render states that control alpha-blending operations.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Animation">
            <summary>
            Flag indicating whether this object is an animation object indicating that it needs 
            to be updated every frame.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.ColorWrite">
            <summary>
            The render states that control which data is written to the color buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Cull">
            <summary>
            The render states that control face culling.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Fog">
            <summary>
            The render states that control fog blending.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.TextureFactor">
            <summary>
            The render state that controls the texture factor constant.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Wireframe">
            <summary>
            The render states that control the wireframe rendering mode.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.ZBuffer">
            <summary>
            The render states that control the Z-Buffer.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Lighting">
            <summary>
            The render states that control lighting.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Stages">
            <summary>
            Encapsulates the render states for all texture blending units.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.InternalRenderState">
            <summary>
            The internal render state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderState.Templates">
            <summary>
            A collection of render state templates that can be used to set the initial render state of an object.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject">
            <summary>
            Implements a graphics object that can render 2D text.
            
            Note: When Dispose() is called, the GraphicsFont instance associated with this object is not automatically disposed, since
            it can be associated with multiple TextGraphicsObject instances.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont)">
            <summary>
            Constructs a new TextGraphicsObject instance.
            </summary>
            <param name="gfxFont">The GraphicsFont font.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont,System.Drawing.Color,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Construct a new TextGraphicsObject instance.
            </summary>
            <param name="gfxFont">The GraphicsFont font.</param>
            <param name="color">The text color.</param>
            <param name="position">The text position.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.#ctor(Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont,System.Drawing.Color,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Boolean)">
            <summary>
            Construct a new TextGraphicsObject instance.
            </summary>
            <param name="gfxFont">The GraphicsFont font.</param>
            <param name="color">The text color.</param>
            <param name="position">The text position.</param>
            <param name="enableCollision">If true, intersections may be performed against this graphics object.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.OnDeviceReset(System.Object,System.EventArgs)">
            <summary>
            Since dynamic buffers are used, they need to be updated when the device is reset.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.UpdateWidthAndGlyphInfoIfNecessary(System.Boolean)">
            <summary>
            Calculates the width of each text line.
            </summary>
            <returns>True if the font needs to be reset.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.AddGlyphsToFont">
            <summary>
            Add any glyphs in the current text to the font and reconstruct.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.UpdateVertexBuffer(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Updates the vertex buffer used to render the text.
            
            Since Transform and Lighting are used, any changes in position and/or alignment require the actual vertices to be modified. The graphics engine 
            bypasses all transformation matrices when transformed and lit vertices are used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.UpdateRenderObjects(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Intersects(System.Drawing.PointF,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode)">
            <summary>
            Returns whether a point is inside the object's bounds.
            </summary>
            <param name="point">The point (in normalized device coordinates) to test for intersection.</param>
            <param name="mode">One of the IntersectionMode enum values.</param>
            <returns>Whether the point is inside the object bounds.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Rendering3D.GraphicsProxy.IntersectionMode,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Plane3D@)">
            <summary>
            Tests whether a camera ray intersects with this object. If successful, hitPoint will contain the intersection point in global space.
            
            This method is supported only if the object was created with the enableCollision flag set.
            When mode is IntersectMesh, only static buffers are supported.
            
            If the ray does not represent the camera ray, the behavior is undefined.
            </summary>
            <param name="ray">The ray (in global coordinates) to test for intersection.</param>
            <param name="mode">One of the following IntersectionMode modes: IntersectBoundingBox, IntersectBoundingSphere or IntersectMesh.</param>
            <param name="hitPoint">Contains the hit point coordinate in global space if the ray intersects the object.</param>
            <param name="plane">Contains the intersection plane in global space if the ray intersect the object.</param>
            <returns>Whether the ray intersects with the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Dispose(System.Boolean)">
            <summary>
            Release internal resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Color">
            <summary>
            The text color.
            
            The default color is white.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Position">
            <summary>
            Gets or sets the text's top position.
            
            The meaning of position depends on the text mode currently selected. If Mode is TextMode.ScreenCoordinates, the
            position is in screen coordinates (only the X and Y coordinates are used).
            If Mode is TextMode.WorldCoordinates, the position is in world coordinates.
            
            Note that when Mode is TextMode.ScreenCoordinates, the Z value is still used for depth sorting when ZBufferEnable
            is set to true. The Z value can be used to sort all the objects rendered in screen space, such as sprites, text and lines.
            
            The default position is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.PositionOffset">
            <summary>
            Provides a screen coordinate offset from Position.  This is only used if Mode is TextMode.WorldCoordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Scale">
            <summary>
            Gets or sets the text scale. The default value is (1, 1).
            
            When scale equals (1, 1), the text is rendered with point filtering, to ensure the text is as
            sharp as possible. When any other scale value is used, linear filtering is used.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.ZBufferEnable">
            <summary>
            Gets or sets whether the text should render with z-buffering enabled. The default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Mode">
            <summary>
            Gets or sets the text mode.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Text">
            <summary>
            The text to render. Multi-line text is supported -- use Environment.NewLine to insert a break between each line.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Width">
            <summary>
            Returns the text width in pixels. If the text contains multiple lines, the width for the longest line is returned.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Height">
            <summary>
            Returns the text height in pixels. If the text contains multiple lines, the total height for the text block is returned.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.Alignment">
            <summary>
            The horizontal text alignment. The default alignment is TextAlignment.Left.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.VerticalAlignment">
            <summary>
            The vertical text alignment. The default alignment is VerticalTextAlignment.Bottom.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.AABB">
            <summary>
            The object's axis-aligned bounding rectangle, in screen coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextGraphicsObject.SupportsAABB">
            <summary>
            If false, AABB calls and bounding box/sphere intersection calls will fail.  This may be because of dynamic graphics usage.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextAlignment">
            <summary>
            The horizontal alignment of text rendered by a TextGraphicsObject.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextAlignment.Center">
            <summary>
            The text is centered at a given position. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextAlignment.Left">
            <summary>
            The text is rendered to the right of a given position.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextAlignment.Right">
            <summary>
            The text is rendered to the left of a given position.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument">
            <summary>
            Defines the texture argument constants.
            
            You can combine an argument flag with a modifier, but two argument flags cannot be combined.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.Current">
            <summary>
            The texture argument is the result of the previous blending stage. In the first texture stage (stage 0), this argument is
            equivalent to TextureArgument.Diffuse. Permissions are read/write.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.Specular">
            <summary>
            The texture argument is the specular color interpolated from vertex components during Gouraud shading.
            If the vertex does not contain a specular color, the default color is 0xffffffff. Permissions are read-only.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.Diffuse">
            <summary>
            The texture argument is the diffuse color interpolated from vertex components during Gouraud shading, which
            is the combination of the ambient, diffuse and emissive components defined by the fixed-function lighting algorithm.
            If the vertex does not contain a diffuse color, the default color is 0xffffffff. Permissions are read-only.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.Temp">
            <summary>
            The texture argument is a temporary register color for read or write. Permissions are read/write.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.TFactor">
            <summary>
            The texture argument is the texture factor property exposed by the TextureFactorState class. Permissions are read-only.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.TextureColor">
            <summary>
            The texture argument is the texture color for this texture stage. Permissions are read-only.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.AlphaReplicate">
            <summary>
            Replicate the alpha information to all color channels before the operation completes. This is a read modifier.
            
            This is a modifier flag. It has to be combined with any of the non-modifier flags.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureArgument.Complement">
            <summary>
            Take the complement of the argument x, (1.0 - x). This is a read modifier.
            
            This is a modifier flag. It has to be combined with any of the non-modifier flags.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation">
            <summary>
            Defines per-stage texture-blending operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.BlendTextureAlphaPM">
            <summary>
            Linearly blend a texture stage that uses a premultiplied alpha.
            
            S = arg1 + arg2 * (1 - alpha)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.Subtract">
            <summary>
            Subtract the components of the second argument from those of the first argument. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.DotProduct3">
            <summary>
            Modulate the components of each argument as signed components, add their products; then replicate the sum to all
            color channels, including alpha. This operation is supported for color and alpha operations. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.ModulateInvColorAddAlpha">
            <summary>
            Similar to TextureOperation.ModulateColorAddAlpha, but use the inverse of the color of the first argument.
            This operation is supported only for color operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.ModulateInvAlphaAddColor">
            <summary>
            Similar to TextureOperation.ModulateAlphaAddColor, but use the inverse of the alpha of the first argument.
            This operation is supported only for color operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.ModulateColorAddAlpha">
            <summary>
            Modulate the arguments; then add the alpha of the first argument. This operation is supported only for color operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.ModulateAlphaAddColor">
            <summary>
            Modulate the color of the second argument, using the alpha of the first argument; then add the result to argument one.
            This operation is supported only for color operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.PreModulate">
            <summary>
            TextureOperation.PreModulate is set in stage n. The output of stage n is arg1. Additionally, if there is a texture in
            stage n + 1, any TextureArgument.Current in stage n + 1 is premultiplied by texture in stage n + 1. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.BlendCurrentAlpha">
            <summary>
            Linearly blend this texture stage, using the alpha taken from the previous texture stage. 
            
            S = arg1*alpha + arg2*(1-alpha)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.BlendFactorAlpha">
             <summary>
             Linearly blend this texture stage, using a scalar alpha set to the TextureFactor state.
            
             S = arg1*alpha + arg2*(1-alpha)
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.BlendTextureAlpha">
             <summary>
             Linearly blend this texture stage, using the alpha from this stage's texture. 
            
             S = arg1*alpha + arg2*(1-alpha)
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.BlendDiffuseAlpha">
            <summary>
            Linearly blend this texture stage, using the interpolated alpha from each vertex. 
            
            S = arg1*alpha + arg2*(1-alpha)
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.AddSmooth">
            <summary>
            Add the first and second arguments; then subtract their product from the sum. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.AddSigned2X">
            <summary>
            Add the components of the arguments with a - 0.5 bias, and shift the products to the left 1 bit. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.AddSigned">
            <summary>
            Add the components of the arguments with a - 0.5 bias, making the effective range of values from - 0.5 through 0.5. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.Add">
            <summary>
            Add the components of the arguments. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.Modulate4X">
            <summary>
            Multiply the components of the arguments, and shift the products to the left 2 bits (effectively multiplying them by 4)
            for brightening. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.Modulate2X">
            <summary>
            Multiply the components of the arguments, and shift the products to the left 1 bit (effectively multiplying them by 2)
            for brightening. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.Modulate">
            <summary>
            Multiply the components of the arguments. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.SelectArg2">
            <summary>
            Use this texture stage's second color or alpha argument, unmodified, as the output.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureOperation.SelectArg1">
            <summary>
            Use this texture stage's first color or alpha argument, unmodified, as the output.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture">
            <summary>
            Encapsulates a texture resource.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.#ctor">
            <summary>
            Constructs a new Texture object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromBitmapProvider(Microsoft.MapPoint.Rendering3D.Utility.BitmapProvider,Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions)">
            <summary>
            Creates a new texture from a BitmapProvider instance.  BitmapProviders are able to control when the bitmap changes.
            This is an alternative to using Texture.Update().
            
            The pixel format and image size will match the corresponding values in the Bitmap instance.
            The new texture will be stored in the DXT1 format if TextureCreationOptions.EncodeToDXT1 flag is specified. It 
            is stored in its uncompressed format otherwise.
            
            The texture is created asynchronously by the render engine (while the first frame is rendered). Only after this point,
            if the creation succeeds, the texture becomes 'Valid'.
            </summary>
            <param name="provider">The bitmap provider used to create a texture.</param>
            <param name="creationOptions">One of the creation options.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromBitmapProvider(Microsoft.MapPoint.Rendering3D.Utility.BitmapProvider)">
            <summary>
            Creates a new texture from a BitmapProvider instance.  BitmapProviders are able to control when the bitmap changes.
            This is an alternative to using Texture.Update().
            
            The pixel format and image size will match the corresponding values in the Bitmap instance.
            The new texture will always be uncompressed.
            
            The texture is asynchronously created by the render engine (while the first frame is rendered). Only after this point,
            if the creation succeeds, the texture becomes 'Valid'.
            
            The bitmap is not disposed by the render engine.
            </summary>
            <param name="provider">The bitmap provider used to create a texture.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromBitmap(System.Drawing.Bitmap,System.Boolean,Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions)">
            <summary>
            Creates a new texture from a Bitmap instance.
            
            The pixel format and image size will match the corresponding values in the Bitmap instance.
            The new texture will be stored in the DXT1 format if TextureCreationOptions.EncodeToDXT1 flag is specified. It 
            is stored in its uncompressed format otherwise.
            
            The texture is created asynchronously by the render engine (while the first frame is rendered). Only after this point,
            if the creation succeeds, the texture becomes 'Valid'.
            </summary>
            <param name="bitmap">The bitmap used to create a texture.</param>
            <param name="disposeBitmap">Whether the bitmap object should be automatically disposed by the render engine.</param>
            <param name="creationOptions">One of the creation options.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates a new texture from a Bitmap instance.
            
            The pixel format and image size will match the corresponding values in the Bitmap instance.
            The new texture will always be uncompressed.
            
            The texture is asynchronously created by the render engine (while the first frame is rendered). Only after this point,
            if the creation succeeds, the texture becomes 'Valid'.
            
            The bitmap is not disposed by the render engine.
            </summary>
            <param name="bitmap">The bitmap used to create a texture.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Creates a new texture from a Bitmap instance.
            
            The pixel format and image size will match the corresponding values in the Bitmap instance.
            The new texture will always be uncompressed.
            
            The texture is created asynchronously by the render engine (while the first frame is rendered). Only after this point,
            if the creation succeeds, the texture becomes 'Valid'.
            </summary>
            <param name="bitmap">The bitmap used to create a texture.</param>
            <param name="disposeBitmap">Whether the bitmap object should be automatically disposed by the render engine.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromStream(System.IO.Stream,Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions)">
            <summary>
            Creates a new texture from data contained in the stream.  Does not dispose the stream.  Formats that are not GDI+ compatible
            require full trust to execute.
            </summary>
            <param name="stream">The input data stream.  The stream is not disposed.</param>
            <param name="creationOptions">One of the creation options.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.GetBitmap">
            <summary>
            Get this texture as a bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the texture out to a stream.        
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromFile(System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions)">
             <summary>
             Creates a new texture from a file. Most image file formats are supported (BMP, PNG, JPG, DDS and others).
             
             Textures compressed in any of the DXT formats are supported. Images in any other file format (compressed or not) will result
             in uncompressed textures, unless TextureCreationOptions.EncodeToDXT1 is specified. If a file contains mipmaps, they will be automatically
             assigned to the texture. The texture pixel format will be derived from the file.
             
             The texture is asynchronously created by the render engine (while the first frame is rendered). Only after this point,
             if the creation succeeds, the texture becomes 'Valid'.
            
             </summary>
             <param name="path">The file path.</param>
             <param name="creationOptions">One of the creation options.</param>
             <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromByteArrayUnsafe(System.Byte[])">
            <summary>
            Creates a new texture from a byte array.  The data is passed directly to low-level graphics
            functions, and so this function requires full trust to execute.  For partially trusted code,
            FromStream may be used for formats supported by GDI+.
            
            See the documentation for FromFile(string path, TextureCreationOptions options).
            </summary>
            <param name="data">The texture data.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromByteArrayUnsafe(System.Byte[],Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions)">
            <summary>
            Creates a new texture from a byte array.  The data is passed directly to low-level graphics
            functions, and so this function requires full trust to execute.  For partially trusted code,
            FromStream may be used for formats supported by GDI+.
            
            See the documentation for FromFile(string path, TextureCreationOptions options).
            </summary>
            <param name="data">The texture data.</param>
            <param name="options">One of the creation options.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromDXT1ByteArray(System.Byte[],System.Drawing.Size)">
            <summary>
            Creates a new texture from a byte array that contains DXT1 data.  This function requires full trust to execute.
            
            See the documentation for FromFile(string path).
            </summary>
            <param name="data">The texture data.</param>
            <param name="size">The dimensions of the created bitmap.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromFile(System.String)">
            <summary>
            Creates a new texture from a file.
            
            See the documentation for FromFile(string path, TextureCreationOptions options).
            </summary>
            <param name="path">The file path.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromResource(System.Reflection.Assembly,System.String,Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions)">
            <summary>
            Creates a new texture from an embedded resource. Most image file formats are supported (BMP, PNG, JPG, DDS and others).
            Formats that are not GDI+ compatible require full trust.
            
            Textures compressed in any of the DXT formats are supported. Images in any other file format (compressed or not) will result
            in uncompressed textures, unless TextureCreationOptions.EncodeToDXT1 is specified. If a file contains mipmaps, they will be automatically
            assigned to the texture. The texture pixel format will be derived from the file.
            
            The texture is asynchronously created by the render engine (while the first frame is rendered). Only after this point,
            if the creation succeeds, the texture becomes 'Valid'.
            </summary>
            <param name="assembly">The assembly containing the resource.</param>
            <param name="resourceName">The resource name.</param>
            <param name="creationOptions">One of the creation options.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromResource(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a new texture from an embedded resource.
            
            See the documentation for FromResource(assembly, resourceName, creationOptions).
            </summary>
            <param name="assembly">The assembly containing the resource.</param>
            <param name="resourceName">The resource name.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.FromInternalTexture(Microsoft.MapPoint.Graphics3D.Texture)">
            <summary>
            Creates a new texture from a Graphics3D texture.
            
            This method is used only by the graphics engine.
            </summary>
            <param name="tex">A valid Graphics3D.Texture.</param>
            <returns>A new texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.Update(System.Drawing.Point,System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Copies a rectangular subset of pixels from the provided image to the texture.
            
            The texture is asynchronously updated by the render engine before the following frame is rendered. 
            The source image must fit in the destination texture. The source and destination pixel formats must match.
            Only the main texture is updated when this method is used. To propagate the changes to the other mip levels (in case they are
            used), GenenerateMipmaps() should be called.
            
            This method can be called multiple times per frame. In case the updated areas overlap, the order of the calls determine what
            is rendered first.
            </summary>
            <param name="position">The upper left corner position of the texture where data will copied.</param>
            <param name="image">The source image.</param>
            <param name="disposeImage">Whether the graphics engine should dispose the Bitmap object after the texture is updated.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.ProcessTextureCreationOptions(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture,Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCreationOptions)">
            <summary>
            Validates the texture creation options and assign them to the texture object.
            </summary>
            <param name="texture">The texture being created.</param>
            <param name="creationOptions">The texture creation options.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.UpdateStaticTexture(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>
            Blits the contents of a bitmap into the current texture.
            </summary>
            <param name="inputBitmap">The bitmap that will be blitted on top of the existing bitmap.</param>
            <param name="inputBitmapPos">The position (from the top-left corner) at which the input bitmap will be blitted.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.GetInternalTexture(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Returns the internal texture.
            
            The internal texture is updated if needed before this method returns it.
            </summary>
            <param name="device">The graphics device.</param>
            <returns>The updated internal texture.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.CreateInternalTextureIfNecessary(Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Creates an internal texture object from one of the input buffers.
            </summary>
            <param name="device">The graphics device.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.EncodeToDXT1">
            <summary>
            Applies DXT1 encoding to the existing texture.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.UpdateTextureInfo">
            <summary>
            Updates the image description properties based on the internal data.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.UpdateProvider">
            <summary>
            If we have a bitmap provider, check it to see if we need to get a new texture.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.Dispose">
            <summary>
            Releases all resources used by this Texture.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.PendingUpdate">
            <summary>
            Whether the underlying texture data still has to be updated to contain the changes specified by previous calls
            to Update() or one of the From*() methods.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.HasAlpha">
            <summary>
            Flag indicating whether this texture contains any alpha components.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.Valid">
            <summary>
            Whether the current texture is in a valid state. The render engine cannot polygons referencing invalid textures.
            
            When a new texture is created, Valid is always false. The graphics engine will process the texture and determine whether
            it is valid only when the first frame containing a reference to the texture is rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.Format">
            <summary>
            The texture pixel format.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.Width">
            <summary>
            The texture's width.
            
            This property contains a valid value only if the texture is valid (Valid == true).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.Height">
            <summary>
            The texture's height.
            
            This property contains a valid value only if the texture is valid (Valid == true).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.ConvertedToDXT1">
            <summary>
            Whether the texture was sucessfully converted to DXT1 during construction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture.Disposed">
            <summary>
            Returns whether this texture has been disposed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCollection">
            <summary>
            A collection of textures that can be associated with a material.
            
            This collection contains a fixed number of slots, defined by TextureId.COUNT.
            Each texture slot is directly associated with a Texture Stage. The texture assigned to TextureId.Zero will always be assigned
            to the texture stage 0, the texture assigned to TextureId.One will be assigned to the second texture stage and so on.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCollection.Add(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture)">
            <summary>
            Adds a texture to the next available slot.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCollection.Remove(Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture)">
            <summary>
            Removes a texture from the collection.
            </summary>
            <param name="texture">The texture to be removed from the collection.</param>
            <returns>Whether the texture was successfully removed.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCollection.Update(Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId,Microsoft.MapPoint.Rendering3D.GraphicsProxy.Texture)">
            <summary>
            Sets a texture to a specified stage slot.
            </summary>
            <param name="stage">One member of the TextureId enumeration.</param>
            <param name="texture">A texture.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCollection.Clone">
            <summary>
            Returns a new copy of the texture collection.
            The cloned texture collection will still point to the same textures i.e. no texture clones are created.
            </summary>
            <returns>A new instance of TextureCollection.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCollection.Item(Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureId)">
            <summary>
            Gets or sets the texture associated with a texture id.
            </summary>
            <param name="id">One member of the TextureId enumeration.</param>
            <returns>A texture, or null if no textures are associated with the texture id.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureCollection.Count">
            <summary>
            Gets the size of the texture collection.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat">
            <summary>
            The texture format enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.Dxt5">
             <summary>
            DXT5 compression texture format. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.Dxt4">
             <summary>
            DXT4 compression texture format. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.Dxt3">
             <summary>
            DXT3 compression texture format. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.Dxt2">
             <summary>
            DXT2 compression texture format. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.Dxt1">
             <summary>
            DXT1 compression texture format. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.X8B8G8R8">
             <summary>
            A 32-bit RGB pixel format that reserves 8 bits for each color. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.A8B8G8R8">
             <summary>
            A 32-bit ARGB pixel format, with alpha, that uses 8 bits per channel. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.A8">
             <summary>
            8-bit alpha only. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.A1R5G5B5">
             <summary>
            A 16-bit pixel format that reserves 5 bits for each color and 1 bit for alpha. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.X1R5G5B5">
             <summary>
            A 16-bit pixel format that reserves 5 bits for each color. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.R5G6B5">
             <summary>
            A 16-bit RGB pixel format that uses 5 bits for red, 6 bits for green, and 5 bits for blue. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.X8R8G8B8">
             <summary>
            A 32-bit RGB pixel format that reserves 8 bits for each color. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.A8R8G8B8">
             <summary>
            A 32-bit ARGB pixel format, with alpha, that uses 8 bits per channel. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.R8G8B8">
             <summary>
            A 24-bit RGB pixel format that uses 8 bits per channel. 
             </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextureFormat.Unknown">
             <summary>
            Unknown surface format. 
             </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextMode">
            <summary>
            Defines the supported text modes.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextMode.ScreenCoordinates">
            <summary>
            The text position is specified in screen coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TextMode.WorldCoordinates">
            <summary>
            The text position is specified in world coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1">
            <summary>
            Encapsulates a strongly-typed list of objects that can be accessed by index.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1.Add(`0)">
            <summary>
            Adds an element to the end of the collection.
            </summary>
            <param name="data">The object to be added to the end of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the collection.
            </summary>
            <param name="data">The collection whose elements should be added to the end of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GraphicsProxy.TrackableCollection`1.Updated">
            <summary>
            Whether the list has been updated.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Host">
            <summary>
            The Host is the main interaction object for Virtual Earth 3D.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.SetDataPath(System.String)">
            <summary>
            Gets the current DataPath, but only if it is not already set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.CheckReadyInternal">
            <summary>
            Helper function to allow other components to check if Host is ready, and throw if it isn't.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.Refresh">
            <summary>
            Causes the engine to refresh its state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.NeedUpdate">
            <summary>
            Informs the graphics engine that it should re-render itself as soon as possible.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.GetWorldMemoryDataSource(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Gets the <see cref="P:Microsoft.MapPoint.Rendering3D.Host.WorldMemoryDataSource"/> from the Host object.  Accessing it directly allows some advanced
            techniques, but is potentially unsafe and requires full trust.
            </summary>
            <param name="host">The host to get the <see cref="P:Microsoft.MapPoint.Rendering3D.Host.WorldMemoryDataSource"/> from.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Host"/> class.  Normally this is created by the GlobeControl
            and need not be constructed directly.
            </summary>
            <param name="control">Normally the GlobeControl, which is the owner and constructor of this object.  Usually Host need not be constructed directly.</param>
            <param name="alreadyLoaded">If true, this is not the first Host in this process.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.EnableLogging(System.IO.StreamWriter,Microsoft.MapPoint.Utility.Logging.Level)">
            <summary>
            Turns on logging.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.SetAppDomainForCallback(System.AppDomain)">
            <summary>
            Assigns the AppDomain in which we will recieve callbacks from the network layer.  This is important because they are native callbacks
            and need to came back to an AppDomain that will not be unloaded.
            </summary>
            <param name="appDomain"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.ReportErrorLoading(System.String)">
            <summary>
            Set a flag indicating that there was an error loading resources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.SetCameraValues(Microsoft.MapPoint.Rendering3D.LatLonAlt,Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw,System.Boolean)">
            <summary>
            Sets the camera parameters.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.FirstTimeVisibleInitialization">
            <summary>
            Called only once when we are first drawn and are therefore guaranteed of a handle.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.RequestsComplete(System.Object,System.EventArgs)">
            <summary>
            Called when data has finished loading.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.VisibleDataChanged(System.Object,System.EventArgs)">
            <summary>
            Called when data has finished loading.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.DataLoadFailure(Microsoft.MapPoint.Rendering3D.Utility.TileId,Microsoft.MapPoint.Data.ResultStatus)">
            <summary>
            Called when a piece of data repeatedly failed to load.
            </summary>
            <param name="tile"></param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.ScaleBarPositionChange(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Called when the scale bar position needs to change it's vertical offset
            </summary>
            <param name="functionName"></param>
            <param name="param"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.OnUpdatePreloadList(System.Object,System.EventArgs)">
            <summary>
            A feeder source updated, and possibly has new preload data.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.UpdateProgress(System.Single,System.String)">
            <summary>
            Callback function for updating the percent complete bar on startup.
            </summary>
            <param name="newPercentComplete"></param>
            <param name="nextStep"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.UsingActions">
            <summary>
            Gets whether or not the current camera controller uses actions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.CancelCameraMovements">
            <summary>
            Cancel current camera inputs like mousedowns.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.InitializeSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Host.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Control">
            <summary>
            Gets the control that owns this host.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.CommunicationManager">
            <summary>
            A system that organizes events and handlers within the system, for events that occur both
            within the engine and for custom events from the user.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.HttpManager">
            <summary>
            Gets the HTTP manager, which handles making safe web requests for partial trust code.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.SecurityManager">
            <summary>
            Manages security for plug-ins, such as which servers they may make web requests to.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Geometry">
            <summary>
            Gets the Geometry Manager, which maintains various vector features in the world such as Pushpins
            and simple Polylines/Polygons.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.DataSources">
            <summary>
            Gets the DataSource Manager, which handles added data sources used for background data loading.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Navigation">
            <summary>
            Gets the Navigation Manager, which handles camera control and interaction.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.CameraControllers">
            <summary>
            Gets the CameraControllerManager, which helps maintain camera controllers.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Actors">
            <summary>
            Gets the Actor Manager, which handles Actor objects added globally to the world,
            Actors that should always Update and Render regardless of camera view.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.WorldEngine">
            <summary>
            Gets the World Engine, which handles many tasks such as intersection and display settings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.RenderEngine">
            <summary>
            Gets the render engine that is being used to manage the scene.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.BindingsManager">
            <summary>
            Gets the bindings manager that handles all eventing (such as the keyboard, mouse, etc).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Notifications">
            <summary>
            Gets the notifications mechanism, which can display simple messages to the user.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Input">
            <summary>
            Handles direct input from mouse, keyboard, etc, and distributes those
            events to objects that require them.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.RenderThread">
            <summary>
            Gets the render thread manager.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.AdActions">
            <summary>
            Gets the ad actions.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.GraphicsEngine">
            <summary>
            Gets the internal reference to the graphics engine.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.WorldMemoryDataSource">
            <summary>
            Gets the internal reference to the world memory data source.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.GotHardwareDevice">
            <summary>
            Gets whether or not we have a hardware device.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.UseReferenceDevice">
            <summary>
            Gets or sets a flag indicating whether the graphics engine should be constructed using the reference device.
            This flag may only be usefully set before the graphics engine is created.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.UseMultithreadedDevice">
            <summary>
            Gets or sets a flag indicating whether the graphics engine should be constructed allowing multithreaded access.
            This flag may only be usefully set before the graphics engine is created.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.StartRenderThreadOnInitialize">
            <summary>
            If this flag is true, the render thread will not be started immediately on startup.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.AllowImmersiveAds">
            <summary>
            Sets a flag indicating whether immmersive ads are allowed.  This flag can only be set at startup.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.PersistentCachePathOverride">
            <summary>
            Gets or sets the persistent cache's file path.  This is only valid 
            until the Initialize method is called.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Host.UIThreadYield">
            <summary>
            Called by host when it needs to yield CPU time to the UI thread
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Host.ProgressUpdated">
            <summary>
            Called by Host when main loading progress changes.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Host.RenderingError">
            <summary>
            Occurs when an unhandled exception makes it out of the rendering thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.DataPath">
            <summary>
            Gets the current DataPath
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Ready">
            <summary>
            If true, the Host is set up and ready to be interacted with.  For more detail, see <see cref="P:Microsoft.MapPoint.Rendering3D.Host.ReadyState"/>.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.ReadyState">
            <summary>
            Describes the state that the Host is currently in.  <see cref="P:Microsoft.MapPoint.Rendering3D.Host.Ready"/> may also be used, and is
            a shortcut for checking for ReadyState.Ready.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.LoadFailed">
            <summary>
            Gets whether the graphics engine is already loaded or not.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.AlreadyLoaded">
            <summary>
            Flag indicating whether the map control is already loaded in this process or not.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.Valid">
            <summary>
            Returns the result of !AlreadyLoaded (and) !LoadFailed;
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.EnableNetworkRequests">
            <summary>
            Gets/sets the network request ability for VirtualEarth Tile sources
            Set to false to disable any network access
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Host.RaiseLatLongEventOnMouseDown">
            <summary>
            Gets whether we should raise a lat/long selection event on next mouse down.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Host.UIThreadYieldDelegate">
            <summary>
            Delegate to allow the UI thread to process messages
            </summary>
            <param name="timeoutInMilliseconds"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Host.UpdateLoadingProgress">
            <summary>
            Delegate to allow the parent control to update the main loading progress meter.
            </summary>
            <param name="progress">Current progress percentage, from 0.0 to 1.0.</param>
            <param name="description">A description of the current stage.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MethodParameterInvoker">
            <summary>
            Delegate that will be executed by the Host on another thread.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.HostInvokerDelegate">
            <summary>
            Delegate used to assist in marshalling the invoke.  What happens is that
            we can't call control.Invoke directly because cross-appdomain invoke requires
            ReflectionPermission, but instead have to marshal either a
            delegate across and then invoke it, or an object with the delegate 
            (we do the latter).  See <see cref="T:Microsoft.MapPoint.Rendering3D.InvokeHelper"/> for more.
            </summary>
            <param name="method"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.InvokeHelper">
            <summary>
            Another helper for the invoke.  We can't marshal a plug-in delegate directly
            because its assembly won't be found.  So we marshal across this object, and when 
            Execute is Invoked it is executed on the UI thread in the Helper's original
            AppDomain, where the plug-in assembly is already loaded.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.LocaleManager">
            <summary>
            Class for managing locale changes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.#ctor">
            <summary>
            Only accessible through the instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.Clear">
            <summary>
            Clears all callbacks.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.DoCallbacks">
            <summary>
            Let all interested parties know about the changes made
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.Register(Microsoft.MapPoint.Rendering3D.LocaleManager.LocaleCallback)">
            <summary>
            Registers a callback.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.Unregister(Microsoft.MapPoint.Rendering3D.LocaleManager.LocaleCallback)">
            <summary>
            Unregisters a callback.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.LocaleManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.LocaleManager.IsMetric">
            <summary>
            Gets or sets the Metric display flag
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.LocaleManager.CurrentLocale">
            <summary>
            Gets or sets the current locale.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.LocaleManager.LocaleCallback">
            <summary>
            A callback for when locale settings change.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.DefaultSaveFileManager">
            <summary>
            The default SaveFile manager.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager">
            <summary>
            Manages the process of saving a file to the disk.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager.DEFAULT_EXT">
            <summary>
            The default extension used to save a movie file.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager.ShowDialog(System.String)">
            <summary>
            Shows the save file dialog.
            </summary>
            <param name="filename">The initial filename displayed in the SaveFile dialog box.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager.Save">
            <summary>
            Saves the file to the disk.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager.Cancel">
            <summary>
            Cancels the current file save operation.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager.Instance">
            <summary>
            Returns the appropriate SaveFileManager instance according to the application/browser currently hosting the control.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager.FilenameWrite">
            <summary>
            Returns the filename that should be used to write data to the disk.
            
            If a temporary file is used, FilenameWrite and FilenameRead do not match. FilenameWrite will point to the temporary filename
            while FilenameRead will point to the file containing the final recorded video.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.SaveFileManager.FilenameRead">
            <summary>
            Returns the recorded video filename.
            
            If a temporary file is used, FilenameWrite and FilenameRead do not match. FilenameWrite will point to the temporary filename
            while FilenameRead will point to the file containing the final recorded video.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.DefaultSaveFileManager.ShowDialog(System.String)">
            <summary>
            Shows the OS's default SaveFile dialog.
            </summary>
            <param name="filename">A file name used to initialize the file name edit control.</param>
            <returns>True if the the user selected a file and clicked OK. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.DefaultSaveFileManager.Save">
            <summary>
            This method does nothing in this implementation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.DefaultSaveFileManager.Cancel">
            <summary>
            Deletes the current file.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.DefaultSaveFileManager.FilenameWrite">
            <summary>
            Returns the filename that should be used to write data to the disk.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.DefaultSaveFileManager.FilenameRead">
            <summary>
            Returns the filename that contains the final video.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.IEProtectedSaveFileManager">
            <summary>
            This class manages the file saving process when the application is hosted by IE in protected mode.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.IEProtectedSaveFileManager.ShowDialog(System.String)">
            <summary>
            Shows the IE Protected-Mode SaveFile dialog.
            </summary>
            <param name="filename">A file name used to initialize the file name edit control.</param>
            <returns>True if the the user selected a file and clicked OK. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.IEProtectedSaveFileManager.Save">
            <summary>
            Moves the file from its temporary location to the path specified by the user with the SaveFile dialog.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.IEProtectedSaveFileManager.Cancel">
            <summary>
            Cancels the current operation and deletes the temporary file.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.IEProtectedSaveFileManager.FilenameWrite">
            <summary>
            Returns the temporary file name.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.IEProtectedSaveFileManager.FilenameRead">
            <summary>
            Returns the file name selected by the user that will contain the final recorded video.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep">
            <summary>
            The step that encodes each frame using the VideoEncoder API.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn)">
            <summary>
            Constructs a new instance of MovieEncoderStep.
            </summary>
            <param name="host">The Host instance.</param>
            <param name="parameters">The movie recording parameters.</param>
            <param name="plugin">A valid MovieRecorderPlugIn instance.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Encodes a video frame.
            </summary>
            <param name="state">The current scene state.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.Encode">
            <summary>
            Encodes a frame.
            </summary>
            <returns>Whether a frame was successfully encoded.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.BitCountGivenPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Gets the number of bits per pixel for given a pixel format.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>The number of bits.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.CalculateSourceRectangle(System.Int32,System.Int32)">
            <summary>
            Calculates the source frame size according to the encoder constraints.
            </summary>
            <param name="inputWidth">The source frame width.</param>
            <param name="inputHeight">The source frame height.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.AppendVideo(System.String)">
            <summary>
            Pauses the current encoding-from-backbuffer process and appends a video (at the current location) to the output file.
            </summary>
            <param name="filename">The input video filename.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.DoneAppendVideo">
            <summary>
            Signals the plugin that the encoder is done appending a video.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.AddBitmapsIfAvailable">
            <summary>
            Overlays a bitmap on top of a series of frames.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.AddIntroVideo">
            <summary>
            Inserts the intro video in the beginning of the file.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.AddOutroVideo">
            <summary>
            Appends the outro video to the end of the output file.
            
            It is up to the caller to call Dispose() on the same frame this method is called to ensure no extra frames are rendered
            by the encoder after the outro video is added to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.Dispose(System.Boolean)">
            <summary>
            Finalizes encoding and releases all resources.
            This method must be called in order to ensure the output video file is closed properly.
            </summary>
            <param name="disposing">Whether this object is being disposed.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.LastFrameSuccessful">
            <summary>
            Gets whether the last frame was successfully encoded.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieEncoderStep.AppendingVideo">
            <summary>
            Gets whether the encoder is currently appending a video to the output file.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderDevForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderDevForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderDevForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams">
            <summary>
            Defines a set of movie recording parameters.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.BitRate">
            <summary>
            The output video bit rate, in kbits.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.FramesPerSecond">
            <summary>
            The output video frame rate.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.OutputWidth">
            <summary>
            The output video frame width, in pixels. The width needs to be a multiple of 4.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.OutputHeight">
            <summary>
            The output video frame height, in pixels. The height needs to be a multiple of 4.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.BindingsEnable">
            <summary>
            Whether the action system is enabled during movie recording.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.DataLoadWaitEnable">
            <summary>
            Whether the movie recorder will wait for all data to load for each frame.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.UIEnable">
            <summary>
            Whether the UI is visible during movie recording.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.PushpinEnable">
            <summary>
            Whether POI pushpins should be visible during movie recording.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.OutputFilename">
            <summary>
            The output filename.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.Title">
            <summary>
            The video title.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.IntroFilename">
            <summary>
            The filename of the video that is is inserted in the beginning of the movie.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.OutroFilename">
            <summary>
            The filename of the video that is appended to to the end of the output movie.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.LogoVerticalAlignment">
            <summary>
            The brand logo vertical alignment during recording.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams.LogoHorizontalAlignment">
            <summary>
            The brand logo horizontal alignment during recording.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn">
            <summary>
            Encapsulates a plug-in for recording (encoding) a movie from the frames rendered on the screen.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.PlugIns.PlugIn">
            <summary>
            The base class for code to be loaded and executed by a host application.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Base constructor.  Should perform minimal initialization.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.Activate(System.Object)">
            <summary>
            Begin main logic or displaying feedback to the user.
            </summary>
            <param name="activationObject">An object provided by the host application that may contain specific activation information for the plug-in.</param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.Deactivate">
            <summary>
            Cease main logic.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.GetBindings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.CreateBindingsSource">
            <summary>
            Method that creates the bindings source that will be used for this 
            plug-in.  This method may be overridden to use a custom bindings 
            source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugIn.ToString">
            <summary>
            The friendly name of the plug-in.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugIn.Host">
            <summary>
            The main controller object for Virtual Earth 3D.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugIn.Name">
            <summary>
            A friendly name for the plug-in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugIn.BindingsSource">
            <summary>
            Specifies the origin of bindings operations for this plug-in.  This is used for 
            resolution of spatial tests, its assembly is used for naming, and it is used for focus testing.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugIn.Description">
            <summary>
            A lengthier description of the plug-in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugIn.Guid">
            <summary>
            A unique identifier for this plug-in.  Based on Type.GUID.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.GetBindings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.Activate(System.Object)">
            <summary>
            
            </summary>
            <param name="activationObject"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.Deactivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.StartMovieRecording(Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams)">
            <summary>
            Starts a movie recording session.
            </summary>
            <param name="movieParams">The movie recording parameters.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.StopMovieRecording">
            <summary>
            Stops the current movie recording session.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.OnErrorInitializingEncoder(System.Exception)">
            <summary>
            This method is called by the encoder step when an error occurs during the encoder initialization.
            </summary>
            <param name="exception">The exception thrown by the video encoder.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.OnErrorEncodingFrame(System.Exception)">
            <summary>
            This method is called by the encoder step when an error occurs during encoding.
            </summary>
            <param name="exception">The exception thrown by the video encoder.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.OnErrorFinalizingEncoder(System.Exception)">
            <summary>
            This method is called by the encoder step when an error occurs during finalization.
            </summary>
            <param name="exception">The exception thrown by the video encoder.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ShowMovieDialogBox(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ShowMovieDialogBox.
            </summary>
            <param name="cause">The cause</param>
            <returns>Whether the event was successfully handled.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ShowLoader">
            <summary>
            Display the dev-only movie recorder form.
            This form emulates the calls that will come from the Tours code. It can be used to start and stop a
            movie recording session.
            
            This method should always be called from the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.InitializeMovieRecording(System.Object)">
            <summary>
            Initializes movie recording.
            
            This method should always be called from the render thread.
            </summary>
            <param name="movieParams">A MovieRecorderParams instance.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.DisableUI(System.Boolean,System.Windows.Forms.HorizontalAlignment,System.Windows.Forms.VisualStyles.VerticalAlignment,System.Boolean,System.Int32)">
            <summary>
            Disables all UI elements.
            </summary>
            <param name="disablePushpins">Whether POI pushpins should be disabled during movie recording.</param>
            <param name="logoHorizontalAlignment">The brand logo horizontal alignment.</param>
            <param name="logoVerticalAlignment">The brand logo vertical alignment.</param>
            <param name="safetyMargin">Whether the safety margin is enabled.</param>
            <param name="copyrightTextSize">The copyright text size</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.DisablePushpins(System.String)">
             <summary>
             Removes all pushpins from the GeometryManager that match a given resourceName.
             If resourceName is null, all pushpins are removed. 
            
             All removed pushpins are added to the pushpinsToHide list.
             </summary>
             <param name="resourceName">A resource name string. All pushpins containing this substring will be removed.</param>
             <returns>Returns a boolean indicating whether at least one pushpin was successfully removed.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.EnablePushpins">
            <summary>
            Re-insert all pushpins previously removed by a DisablePushpins call.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.EnableSteps(System.Boolean)">
            <summary>
            Enables or disables specific UI steps.
            </summary>
            <param name="enable">Whether the UI steps should be enabled or disabled.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.UninitializeMovieRecording">
            <summary>
            Stops movie recording and restore the UI to its previous state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.EnableUI">
            <summary>
            Re-enables all UI elements.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.RegisterDependencies">
            <summary>
            Register all methods and event that can be called/raised externally (i.e. from JScript code).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.UnregisterDependencies">
            <summary>
            Unregister all methods and events that can be called/raised externally (i.e. from JScript code).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.OnReceiveFlyToEstimate(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Handles the OnAnimatedCameraChange event.
            
            This method checks if there are any pending 'text overlay' requests. If so, the text is added to the overlay
            manager based on how long the current camera will take to complete the current FlyTo operation.
            </summary>
            <param name="function">This parameter is not used.</param>
            <param name="data">The estimated amount of seconds it will take the animated camera to fly to the target location.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalGetMovieFilename(Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Returns the filename for the last encoded video file.
            </summary>
            <param name="data">This parameter is not used.</param>
            <returns>A filename.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalPlayRecordedMovie(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Loads a new process with the default media player and play the generated movie.
            </summary>
            <param name="function">This parameter is not used.</param>
            <param name="data">This parameter is not used.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalInitializeRecording(Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            This method is called from the communications manager (when the "InitializeRecording" method is invoked externally)
            
            The input parameters must be in the form of "key:value", separated by ";".
            For instance: "Width:640;Height:480"
            </summary>
            <param name="data">The method data, containing the parameters to setup a movie recording session.</param>
            <returns>A boolean indicating whether the movie recording initialization was successful.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.AddIntroAndOutroVideos(Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams@)">
            <summary>
            Enables intro/outro movies.
            </summary>
            <param name="movieParams">The movie parameters.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ValidateInitializationParameters(Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams)">
            <summary>
            Validates the input parameters set by the external caller (usually JScript code)
            </summary>
            <param name="movieParams">The input parameters.</param>
            <returns>A boolean indicating whether the parameters are valid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ParseInitializeRecordingInput(System.Object,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderParams@)">
            <summary>
            Parses the input string that contains all parameters that define a movie recording session.
            </summary>
            <param name="data">The input string.</param>
            <param name="movieParams">A reference to a struct where all output parameters will be stored.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.RemoveInvalidFileChars(System.String)">
            <summary>
            Removes any invalid filename characters from the string.
            </summary>
            <param name="str">The input string to be analyzed.</param>
            <returns>A valid filename string.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalStopRecording(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Stops the movie recording and closes the resulting video file.
            </summary>
            <param name="function">This parameter is not used.</param>
            <param name="data">This parameter is not used.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.SaveFile">
            <summary>
            Moves the recorded file to its final destination (if it's not already there).
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalCancelRecording(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Stops the movie recording and deletes the file containing the partially encoded video.
            </summary>
            <param name="function">This parameter is not used.</param>
            <param name="data">This parameter is not used.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalStartRecording(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Starts or resumes the current movie recording session.
            </summary>
            <param name="function">This parameter is not used.</param>
            <param name="data">This parameter is not used.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.AddPOIImageIfAvailable">
            <summary>
            Adds the POI image (associated with the current POI) to the video.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.DoImageRequest(System.String)">
            <summary>
            Requests the POI image.
            </summary>
            <param name="imageUrl">The image URL.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ResetBitmapOverlay">
            <summary>
            Resets the bitmap overlay state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ImageRequest_Failed(System.Object,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailedEventArgs)">
            <summary>
            Handles a failed POI image request.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The request event arguments.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ImageRequest_Complete(System.Object,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestCompleteEventArgs)">
            <summary>
            Handles a successful POI image request.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The request event arguments.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ParseStartRecordingInput(System.Object,Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties@,Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties@,System.String@,System.String@)">
            <summary>
            Parses the input string that contains all parameters that describe how the label for a POI should be rendered.
            </summary>
            <param name="data">The input string.</param>
            <param name="textProperties">The output text properties.</param>
            <param name="bitmapProperties">The POI image rendering properties.</param>
            <param name="poiTitle">The POI title.</param>
            <param name="poiImageUrl">The image URL associated with the POI (null if no image is associated).</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ValidateTextProperties(Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties)">
            <summary>
            Validates the text properties used to render the POI overlay text.
            </summary>
            <param name="properties">The text properties.</param>
            <returns>A boolean indicating whether the properties are valid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ValidateBitmapDisplayProperties(Microsoft.MapPoint.Rendering3D.MovieRecorder.BitmapProperties)">
            <summary>
            Validates the bitmap properties used to render the POI image.
            </summary>
            <param name="properties">The bitmap properties.</param>
            <returns>A boolean indicating whether the properties are valid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalPauseRecording(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Pauses the current movie recording session. The time is not incremented and no frames are recorded while 
            the recording is paused.
            </summary>
            <param name="function">This parameter is not used.</param>
            <param name="data">This parameter is not used.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalFixedTimeRecording(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Records video frames for a fixed number of seconds and then pauses recording.
            
            The most common usage for this method is to encode video frames while the camera is idle (simulating a 'wait time').
            There are no guarantees that the camera won't move during the fixed time recording. It is up to the caller to ensure
            the correct camera behavior.
            </summary>
            <param name="function">This parameter is not used.</param>
            <param name="data">The number of seconds that should be recorded.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.ExternalDoneFixedTimeRecording(Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Returns whether a previous 'fixed time recording' requested by ExternalFixedTimeRecording() has finished.
            </summary>
            <param name="data">This parameter is not used.</param>
            <returns>Whether the idle recording task has finished.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.Trace(System.String)">
            <summary>
            Writes a message to the trace listeners.
            </summary>
            <param name="traceMessage">The trace message.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.TraceInvalidInputValue(System.String)">
            <summary>
            Writes the "invalid input value" message to the trace listener.
            </summary>
            <param name="param">The parameter with the invalid value.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.TraceUnknownParam(System.String)">
            <summary>
            Writes the "unknown parameter" message to the trace listener.
            </summary>
            <param name="param">The unknown parameter name.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.Name">
            <summary>
            The public name of this plug-in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.Recording">
            <summary>
            Whether a movie is currently being recorded.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.Paused">
            <summary>
            Gets or sets whether the current movie recording session is paused. The time is not incremented and no frames
            are encoded while the recording is paused.
            
            This property is not thread-safe. It must be accessed from the render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.LastFrameSuccessfullyEncoded">
            <summary>
            Gets whether the last frame was sucessfully encoded.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.OverlayManager">
            <summary>
            Returns the OverlayManager. It manages text overlaying on top of the encoded video frames.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.BitmapOverlayManager">
            <summary>
            Returns the BitmapOverlayManager. It manages bitmap overlaying on top of the encoded video frames.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn.VideoRenderTargetStep">
            <summary>
            Returns the instance of VideoRenderTargetStep.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieTimeStep">
             <summary>
             A step that advances time in fixed increments.
             
             All steps make timing calculations based on the timestamp defined by the TimeSnapshot instance (which is stored
             by the scene state, readily available to all steps through the OnExecute() method. These real-time timestamps are 
             generated by the TimeStep step.
             When a movie is recorded, it is desired to advance time in fixed increments, regardless of how long each frame 
             actually took in real time -- this ensures that the camera movement is smooth on a frame-by-frame basis. To do so,
             the default TimeStep should be replaced by this step during movie recording.
            
             </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieTimeStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn,System.Single)">
            <summary>
            Constructs a new instance of MovieTimeStep.
            </summary>
            <param name="host">The Host instance.</param>
            <param name="plugin">A valid MovieRecorderPlugIn instance.</param>
            <param name="framesPerSecond">It defines the fixed increment this step will use to advance time each frame.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieTimeStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Advances time by a fixed amount.
            </summary>
            <param name="state">The scene state.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieTimeStep.AutoPauseCount">
            <summary>
            Gets or sets the time in seconds before the movie plug-in is automatically paused.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieWaitForLoadStep">
            <summary>
            A step that blocks the render thread until all the data is loaded for the current frame.
            This ensures maximum visual quality when encoding a movie.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieWaitForLoadStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn)">
            <summary>
            Constructs a new instance of MovieWaitForLoadStep.
            </summary>
            <param name="host">The host instance.</param>
            <param name="plugin"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieWaitForLoadStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Blocks the render thread until all the data is loaded for the current frame.
            </summary>
            <param name="state">The current scene state.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay">
            <summary>
            Encapsulates text that is rendered on a video frame.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay.#ctor(System.String,System.Single,Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties)">
            <summary>
            Constructs a new instance of TextOverlay.
            </summary>
            <param name="text">The text to render.</param>
            <param name="time">The timestamp (in seconds, since the start of the video encoding) to render the text.</param>
            <param name="properties">The text rendering properties.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay.Render(System.Int64,System.Drawing.Rectangle,System.Drawing.Bitmap)">
            <summary>
            Renders the text overlay.
            </summary>
            <param name="currentTickCount">The current time.</param>
            <param name="frameArea">The area of the bitmap that will be encoded.</param>
            <param name="frame">The current frame with the original source resolution, before it is cropped, resized and encoded.</param>
            <returns>The rendering status.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay.AdjustFontSize(System.Int32)">
            <summary>
            Adjusts the font size used to render text.
            </summary>
            <param name="frameHeight">The current frame height.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay.CacheAndReturnState(Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayState,System.Int64)">
            <summary>
            Cache the overlay state and return it.
            </summary>
            <param name="state">The overlay state.</param>
            <param name="tickCount">The state's tickcount.</param>
            <returns>The overlay state.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay.GetCurrentState(System.Int64)">
            <summary>
            Returns the current text overlay rendering state.
            </summary>
            <param name="currentTickCount">The current tick count (in milliseconds) since the start of the current encoding session.</param>
            <returns>An instance of TextOverlayState.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlay.Properties">
            <summary>
            Gets the text properties.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager">
            <summary>
            This class manages text rendering on video frames.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.#ctor(Microsoft.MapPoint.Rendering3D.MovieRecorder.MovieRecorderPlugIn)">
            <summary>
            Constructs a new TextOverlayManager instance.
            </summary>
            <param name="plugin">A valid instance of MovieRecorderPlugIn.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.Reset">
            <summary>
            Resets the overlay manager to its initial state.
            
            This method should be called before a new video is rendered.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.SetPendingRequest(Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Sets the pending request that will be processed when SetCurrentTime()
            is called.
            </summary>
            <param name="pendingReq">The pending request.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.SetCurrentTime(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot,System.Boolean)">
            <summary>
            Sets the current time.
            
            This method should be called every frame to advance time.
            
            When introFrame is set to true, the time parameter is ignored (it can be null). It means that the intro sequence
            is being rendered, before the time ticking actually starts.
            </summary>
            <param name="time">The current time.</param>
            <param name="introFrameTime">Whether the intro frame is being rendered.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.HasTextAt(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot)">
            <summary>
            Returns whether there are any text objects to be rendered at the given timestamp.
            
            SetCurrentTime() should be called at least once before this method is called.
            </summary>
            <param name="time">The current time snapshot.</param>
            <returns>True if there are objects to be rendered at the given time; False otherwise.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.Render(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Renders a frame of text on top of the video frame.
            </summary>
            <param name="frame">A video frame.</param>
            <param name="sourceRect">The area of the video frame that is actually encoded.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.AddText(System.String,System.Single,Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties)">
            <summary>
            Adds text to be rendered on the video frames.
            
            The text is rendered for the time defined by the properties, starting at the timestamp defined by startTime.
            </summary>
            <param name="text">The string to render.</param>
            <param name="startTime">The start time (in seconds) since the start of the video encoding session.</param>
            <param name="properties">The text rendering properties.</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayManager.CurrentTickCount">
            <summary>
            Returns the current tick count.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayState">
            <summary>
            Defines the current rendering state of a text overlay item.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayState.#ctor(Microsoft.MapPoint.Rendering3D.MovieRecorder.TextRenderingStatus,System.Int32)">
            <summary>
            Constructs a new instance of TextOverlayState.
            </summary>
            <param name="status">The current text rendering status.</param>
            <param name="alpha"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayState.Status">
            <summary>
            The current rendering status.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextOverlayState.Alpha">
            <summary>
            When Status is TextRenderingStatus.Rendering, this property contains the current
            alpha value between 0 and 255 that should be used to render the text overlay.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties">
            <summary>
            Encapsulates all properties that describe how text should be rendered on a video frame.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.#ctor">
            <summary>
            Constructs a new instance of TextProperties.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.#ctor(System.Single,System.Single,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Drawing.StringAlignment,System.Drawing.StringAlignment)">
            <summary>
            Constructs a new instance of TextProperties.
            </summary>
            <param name="fade">The amount of time it takes to change the text from fully transparent to fully opaque (and vice-versa).</param>
            <param name="time">The amount of time the text is rendered when it's fully opaque.</param>
            <param name="color">The text color.</param>
            <param name="backColor">The outline color.</param>
            <param name="font">The text font.</param>
            <param name="alignment">The text horizontal alignment.</param>
            <param name="lineAlignment">The text vertical alignment.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.FadeTime">
            <summary>
            Gets or sets the amount of time it takes to change the text from fully transparent to fully opaque (and vice-versa).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.VisibleTime">
            <summary>
            Gets or sets the amount of time the text is rendered when it's fully opaque.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.Color">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.BackColor">
            <summary>
            Gets or sets the color used to render the text outline.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.Font">
            <summary>
            Gets or sets the font used to render the text.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.Alignment">
            <summary>
            Gets or sets the text horizontal alignment.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextProperties.LineAlignment">
            <summary>
            Gets or sets the text vertical alignment.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextRenderingStatus">
            <summary>
            Defines the status of text overlay rendering.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextRenderingStatus.NotStarted">
            <summary>
            The text rendering has not yet started. Its start time is greater than the current time.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextRenderingStatus.Rendering">
            <summary>
            The text is currently being rendered.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.MovieRecorder.TextRenderingStatus.Done">
            <summary>
            The text is done rendering. Its finish time is past the current time.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NativeMethods">
            <summary>
            Native methods.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationPlugIn">
            <summary>
            Encapsulates the on-screen navigation control.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationPlugIn.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationPlugIn"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationPlugIn.Activate(System.Object)">
            <summary>
            Activates.
            </summary>
            <param name="activationObject">The object contains activation infomation</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationPlugIn.Deactivate">
            <summary>
            Deactivates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationPlugIn.Name">
            <summary>
            Gets the name of the plug-in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationPlugIn.Enabled">
            <summary>
            Gets or sets whether the navigation step is enabled or not.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NavigationManager">
            <summary>
            Handles navigation tasks.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.CancelPendingFlyTo">
            <summary>
            If a FlyTo was pending, cancels it.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.GetCurrentQueryRegion">
            <summary>
            Returns a QueryRegion instance, which defines a bounding polygon that may be used when executing spatial search queries with
            the current view.  May return null if the region cannot be calculated at this time.
            </summary>
            <returns>a QueryRegion instance</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.GetScreenCenter">
            <summary>
            Gets the point on the earth that is at the center of the screen.  If the center is not on the earth, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.Pan(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Pan continuously in the indicated direction.  Use a zero vector to stop moving.
            </summary>
            <param name="direction">X is the longitude direction and Y is the latitude direction.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyTo(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.Double,System.Double)">
            <summary>
            Animates the camera to the destination.
            </summary>
            <param name="position">The location to move the camera to.</param>
            <param name="pitch">The camera pitch in degrees.  -90 is straight down, 0 is towards horizon.</param>
            <param name="direction">The camera direction in degrees.  0 is North and moves counterclockwise.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint)">
            <summary>
            Animates the camera to the destination.
            </summary>
            <param name="view">The camera view to move to.  Roll is ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyTo(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.Double,System.Double,System.Double)">
            <summary>
            Animates the camera to view the destination from the given direction and distance.
            </summary>
            <param name="target">The target location to view.</param>
            <param name="pitch">The angle from the target to the camera in degrees.  0 will place the camera at the same altitude.  90 will place it directly above.</param>
            <param name="direction">The direction from the target to the camera in degrees.  0 will place the camera to the north and moves counterclockwise.</param>
            <param name="distance">The distance in meters from the target to the camera.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPosition,Microsoft.MapPoint.Geometry.VectorMath.Orientation,System.Double)">
            <summary>
            Animates the camera to view the destination from the given direction and distance.
            </summary>
            <param name="target">The target location to view.</param>
            <param name="directionToCamera">The direction from the target to the camera.</param>
            <param name="distance">The distance in meters from the target to the camera.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyTo(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.Double,System.Double,System.Boolean,Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Animates the camera to the destination.
            </summary>
            <param name="position">The position to move the camera to.</param>
            <param name="pitch">The camera pitch in degrees.  -90 is straight down, 0 is towards horizon.</param>
            <param name="direction">The camera direction in degrees.  0 is North and moves counterclockwise.</param>
            <param name="needsPivot">whether camera should pivot/tilt from current orientation to the given orientation</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.ForceToAltitudeAboveGround(Microsoft.MapPoint.Rendering3D.LatLon,System.Double)">
            <summary>
            Forces the view to settle to the given altitude, as in when terrain is continuing to load.
            </summary>
            <param name="position">The position on the ground to watch to use for ground elevation measurements.</param>
            <param name="altitude"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.CancelAltitudeForcing">
            <summary>
            Cancel any current altitude forcing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyAround(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.Double,Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Animates the camera to circle around a given location.
            </summary>
            <param name="center">The center of rotation.</param>
            <param name="angle">The angle by which to rotate in degrees.  Positive values are clockwise.</param>
            <param name="parameters"></param>
            <returns>true if the call succeeds</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.StopAnimation">
            <summary>
            Stop any in-progress camera animations.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.LatLonAltFromScreenPosition(System.Drawing.Point)">
            <summary>
            Finds the position of the ground at the given screen coordinates.  Null if the ground is not at that location.
            </summary>
            <param name="pos">A position on the screen.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.ScreenPositionFromLatLon(Microsoft.MapPoint.Rendering3D.LatLon)">
            <summary>
            Finds the screen location of the point on the ground.  Null if that location is not in view.
            </summary>
            <param name="point">The point on the ground.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.IsNewCameraCenterCurrentlyVisible(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,System.Double,Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot)">
            <summary>
            Returns true if the center of the screen with the camera in the specified position is visible in the current view
            </summary>
            <param name="cameraViewpoint">Camera position and orientation</param>
            <param name="fieldOfViewY"></param>
            <param name="primitives"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.CameraSnapshot">
            <summary>
            Data on the current state of the camera.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.PointerScreenPosition">
            <summary>
            Gets the current pointer screen position.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.CameraPosition">
            <summary>
            Gets the camera's current position.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.CameraLocalOrientation">
            <summary>
            Gets the current orientation of the camera in terms of its current position.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.PointerPosition">
            <summary>
            Gets the position of the pointer on the earth.  Does not take into account any objects such as buildings.
            Null if the pointer is not on the earth.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.PointerPositionOnObject">
            <summary>
            Gets the position of the pointer on the earth.  If the pointer is actually on an object returns the position of the pointer on that object.
            Null if the pointer is not on the earth or on an object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.PointerOnObject">
            <summary>
            True if the pointer is actually on an object.  False if it is on the ground or not on anything.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationManager.HasPendingFlyTo">
            <summary>
            If FlyTo is called when the code is unable to honor it (for example, if a custom camera controller is being
            used), that FlyTo is saved.  If a FlyTo in saved in this fashion, returns true.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NavigationManager.AltitudeForcer">
            <summary>
            Listens to a particular location and emits flytos to keep the camera at the appropriate distance from ground.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyToData">
            <summary>
            Represents the data needed to fly to a specific location.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyToData.Position">
            <summary>
            The position to fly to.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyToData.Pitch">
            <summary>
            The target pitch.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyToData.Direction">
            <summary>
            The target direction.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyToData.NeedsPivot">
            <summary>
            Flag indicating whether this needs a pivot.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyToData.Parameters">
            <summary>
            The camera parameters to use.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationManager.FlyToData.#ctor(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.Double,System.Double,System.Boolean,Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Creates a FlyToData class.
            </summary>
            <param name="position"></param>
            <param name="pitch"></param>
            <param name="direction"></param>
            <param name="needsPivot"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.HttpManager">
            <summary>
            Class for making requests off thread and getting callbacks on the default thread pool.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.#ctor(Microsoft.MapPoint.Rendering3D.Host,System.Int32)">
            <summary>
            Creates a new instance. Call Start to begin sending requests from the queue and any requests enqueued after Start.
            </summary>
            <param name="host">The Host object.</param>
            <param name="maxOutstandingRequests">The maximum number of simultaneous requests to allow</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.Enqueue(Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest)">
            <summary>
            Adds a request to the queue.
            If the caller does not have access to the resource it will request permissions from the user.
            </summary>
            <param name="request">The request to make.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.Cancel(Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest)">
            <summary>
            Cancels an existing request.
            </summary>
            <param name="request">The request to cancel.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.CancelAll">
            <summary>
            Cancels all outstanding requests.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.GetQueueLength">
            <summary>
            Gets the queue length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.GetOutstandingRequestCount">
            <summary>
            Gets the number of requests currently in progress.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.Start">
            <summary>
            Starts making queued requests
            </summary>
            <returns>true if started, false if already started</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.Stop(System.Int32)">
            <summary>
            Stops making requests and cancels any outstanding requests.
            </summary>
            <param name="millisecondsTimeout">The amount of time in milliseconds to wait before forcefully terminating the request thread</param>
            <returns>true if stopped successfully</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.InternalEnqueue(Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest)">
            <summary>
            Adds the request to the queue without making any security demands
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.FinishedRequest(Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest)">
            <summary>
            Called by SafeHttpWebRequest when the request is complete (regardless of success or failure)
            to remove it from the list of outstanding requests
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.HttpManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.HttpManager.MaxOutstandingRequests">
            <summary>
            The maximum number of simultaneous requests allowed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus">
            <summary>
            Result code for a web request
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus.ConnectFailure">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus.ProtocolError">
            <summary>
                The response received from the server was complete but indicated a protocol-level
                error. For example, an HTTP protocol error such as 401 Access Denied would
                use this status.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus.Timeout">
            <summary>
                No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus.UnknownError">
            <summary>
                An exception of unknown type has occurred.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus.DeniedBySecurity">
            <summary>
            This request was denied by the user
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus.Unauthorized">
            <summary>
            This request was not authorized by server or proxy
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestCompleteEventArgs">
            <summary>
            Event argument when a request completed successfully.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestCompleteEventArgs.#ctor(Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest)">
            <summary>
            Constructs a new object.
            </summary>
            <param name="request">The request that completed</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestCompleteEventArgs.Request">
            <summary>
            The request that completed successfully.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailedEventArgs">
            <summary>
            Event argument when a request fails
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailedEventArgs.#ctor(Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest,Microsoft.MapPoint.Rendering3D.SafeWebExceptionStatus)">
            <summary>
            Constructs a new object.
            </summary>
            <param name="request">The request that failed</param>
            <param name="safeWebExceptionStatus">The failure reason</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailedEventArgs.Request">
            <summary>
            The request that failed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailedEventArgs.SafeWebExceptionStatus">
            <summary>
            The failure reason.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestComplete">
            <summary>
            Delegate called when a request completes successfully.
            </summary>
            <param name="sender">The request that completed</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailed">
            <summary>
            Delegate called when a request fails.
            </summary>
            <param name="sender">The request</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest">
            <summary>
            Makes a request for an internet resource and calls back when completed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.#ctor(System.Uri,System.Object,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestComplete,Microsoft.MapPoint.Rendering3D.SafeHttpWebProxyRequestFailed)">
            <summary>
            Creates a new request for the given Uri.
            </summary>
            <param name="uri">Uri to make a request for</param>
            <param name="state">Custom data to associate with this request</param>
            <param name="complete">Delegate called when request succeeds</param>
            <param name="failed">Delegate called when request fails</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.Cleanup">
            <summary>
            Release internally held resources.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.Uri">
            <summary>
            Uri to make a request for.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.ContentLength">
            <summary>
            The length in bytes of the Data associated with this request.  May be -1 if it the length is not yet known.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.ContentType">
            <summary>
            The Content-Type header from the response, or null if the response did not contain one.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.ResponseUrl">
            <summary>
            The response Url. May not be the same as the request url if redirected.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.Data">
            <summary>
            Upon receiving the Complete event this contains the data returned by the server.
            If accessed before the Complete event, data may be incomplete.
            If the request fails, will return null.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.State">
            <summary>
            Gets the state that was attached to the request.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.Timeout">
            <summary>
            The number of milliseconds to wait before the request times out.
            The default is 100,000 milliseconds (100 seconds).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.SafeHttpWebRequest.Headers">
            <summary>
            Gets the web headers.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.PlugIns.PlugInLoader">
            <summary>
            Used by a host application to load remote plug-ins and execute them.  Plug-ins are identified by guid.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.CreateLoader(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Creates a loader in the current AppDomain.
            </summary>
            <param name="host">The main Host object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.CreateLoader(Microsoft.MapPoint.Rendering3D.Host,System.AppDomain)">
            <summary>
            Creates a loader in the specified AppDomain.
            </summary>
            <param name="host">The main Host object.</param>
            <param name="targetDomain">The AppDomain to create the loader in.  See <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.HostDomain"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Creates the loader in the current AppDomain.  Use CreateLoader to load into a target AppDomain.
            </summary>
            <param name="host">The main Host object.</param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.GetPlugInInfo">
            <summary>
            Gets information about all currently loaded plug-ins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.GetPlugInInfo(System.Guid)">
            <summary>
            Retrieves status information on the plug-in that has the given guid.
            </summary>
            <param name="guid">The identifier of a plug-in.</param>
            <returns>Null if no plug-in is loaded with this guid.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.ActivatePlugInOnRenderThread(System.Guid,System.Object)">
            <summary>
            Activates the loaded plug-in that has this guid.  If no plug-in is loaded for it, does nothing.
            Automatically marshalls the call to the render thread and returns asynchronously.
            </summary>
            <param name="guid">The identifier of a plug-in.</param>
            <param name="activationData">An object provided by the host application that may contain specific activation information for the plug-in.</param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.ActivatePlugIn(System.Guid,System.Object)">
            <summary>
            Activates the loaded plug-in that has this guid.  If no plug-in is loaded for it, does nothing.
            Must be called on the render thread.
            </summary>
            <param name="guid">The identifier of a plug-in.</param>
            <param name="activationData">An object provided by the host application that may contain specific activation information for the plug-in.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.DeactivatePlugIn(System.Guid)">
            <summary>
            Deactivates the loaded plug-in that has this guid.  If no plug-in is loaded for it, does nothing.
            </summary>
            <param name="guid">The identifier of a plug-in.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.DeactivatePlugInOnRenderThread(System.Guid)">
            <summary>
            Deactivates the loaded plug-in that has this guid.  If no plug-in is loaded for it, does nothing.
            Automatically marshalls the call to the render thread and returns asynchronously.
            </summary>
            <param name="guid">The identifier of a plug-in.</param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.IsPlugInActive(System.Guid)">
            <summary>
            Gets whether or not the specified plug-in is active.
            </summary>
            <param name="guid">The identifier of a plug-in.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.IsPlugInLoaded(System.Guid)">
            <summary>
            Gets whether or not the specified plug-in is loaded.
            </summary>
            <param name="guid">The identifier of a plug-in.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.ResolveRedirect(System.String)">
            <summary>
            If the path is a redirect to another path, return the new path.  Otherwise return null.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.LoadPlugIn(System.String)">
            <summary>
            Loads all plug-ins that can be found with this identifier.
            </summary>
            <param name="assemblyIdentifier">A string that identifies an assembly to load the plug-in from.  
            Examples are paths, such as "http://www.foo.com/bar.dll" or "c:\temp\bar.dll", and fully
            qualified assembly names, such as "foo, Version=1.2.3.4, Culture=neutral, PublicKeyToken=abcd".</param>
            <returns>A list of guids for all plug-ins successfully loaded
            and that are not already loaded.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.LoadPlugIn(System.Type)">
            <summary>
            Loads a plug-in from a type.  If successful, returns the plug-in guid.  If failed or already loaded,
            returns Guid.Empty.  The dll that contains the plug-in must already be loaded.
            </summary>
            <param name="type">The Type of the plug-in to be loaded.</param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.LoadInstalledPlugIns">
            <summary>
            Loads all plug-ins that can be found in the installed plug-ins directory.
            </summary>
            <returns>A list of guids for all plug-ins successfully loaded
            and that are not already loaded.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.LoadPlugInAssembly(System.String)">
            <summary>
            Loads the primary assembly for a plug-in.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.LoadFrom(System.String)">
            <summary>
            LoadFroms should go through here.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.ValidateAssembly(System.Reflection.Assembly)">
            <summary>
            Do any post-load validation that we wish to do.
            </summary>
            <param name="assembly">The assembly to validate.</param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.LogAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Do any post-load logging that we wish to do.
            </summary>
            <param name="assembly">The assembly to log.</param>
            <param name="path">The path we loaded from.</param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.HandleWebProxy(System.String)">
            <summary>
            If we're using a webproxy, we can't specify a proxy to LoadFrom.  Instead, download the plugin directly
            and load it from the local file system.  
            </summary>
            <param name="webPath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.FirePlugInEvent(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Fires an engine event relating to plug-ins.
            </summary>
            <param name="eventId"></param>
            <param name="path"></param>
            <param name="guid"></param>
            <param name="success"></param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInLoader.Dispose">
            <summary>
            Releases resources held by the PlugInLoader.  Deactivates and disposes all loaded plug-ins.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.PlugIns.PlugInInfo">
            <summary>
            A description of this plug-in.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInInfo.#ctor(Microsoft.MapPoint.PlugIns.PlugIn,System.String,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="plugin"></param>
            <param name="path"></param>
            <param name="active"></param>
        </member>
        <member name="M:Microsoft.MapPoint.PlugIns.PlugInInfo.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugInInfo.PlugIn">
            <summary>
            The plug-in itself.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugInInfo.Name">
            <summary>
            The friendly name of the plug-in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugInInfo.Description">
            <summary>
            A lengthier description.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugInInfo.Path">
            <summary>
            The original path of the plug-in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugInInfo.Active">
            <summary>
            Whether this plug-in is currently active.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.PlugIns.PlugInInfo.Guid">
            <summary>
            The unique identifier for this plug-in.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.RestrictedAppDomain">
            <summary>
            Utility class to create an AppDomain with appropriate policy restrictions for loading
            plug-ins.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RestrictedAppDomain.GetAppDomain">
            <summary>
            Gets a restricted-permission AppDomain for use by GlobeControl.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RestrictedAppDomain.GetAppDomain(System.Security.Permissions.StrongNamePublicKeyBlob[])">
            <summary>
            Gets a restricted-permission AppDomain for use by GlobeControl.
            </summary>
            <param name="fullTrustStrongNames">A list of public keys to grant full trust to in the created AppDomain, beyond 
            those already included by default.  May be null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RestrictedAppDomain.AssemblyLoadSuccess(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Fired when an assembly loads, before any code in it is executed, even static initializers.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RestrictedAppDomain.UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Warns if an unhandled exception occurs in the appdomain.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RestrictedAppDomain.AssemblyResolveFailure(System.Object,System.ResolveEventArgs)">
            <summary>
            Helps fix errors in assembly resolution.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RestrictedAppDomain.GetNamedPermissionSet(System.String)">
            <summary>
            Get a named permission set from the security policy
            </summary>
            <param name="name">Name of the permission set to retrieve</param>
            <returns>
            The intersection of permission sets with the given name from all policy
            levels, or an empty set if the name is not found
            </returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NotificationPlugIn">
            <summary>
            Encapsulates the bottom-of-the-screen popup notification by hooking it 
            into the Notifications class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NotificationPlugIn.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.NotificationPlugIn"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NotificationPlugIn.Activate(System.Object)">
            <summary>
            Called when the plug-in is activated.
            </summary>
            <param name="activationObject">The object contains activation infomation</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NotificationPlugIn.Deactivate">
            <summary>
            Called when the plug-in is deactivated.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NotificationPlugIn.Name">
            <summary>
            Gets the name of the plug-in.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightAppDomainHelper">
            <summary>
            Helper class for managed a Silverlight AppDomain.
            This class should not instantiated directly but is created via SilverlightControl.SetupSilverlightAppDomain.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightAppDomainHelper.#ctor">
            <summary>
            Constructor.
            It is highly recommended that this object not be created directly but instead via SilverlightControl.SetupSilverlightAppDomain.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightAppDomainHelper.LoadAssembly(System.Byte[])">
            <summary>
            Loads the assembly into the Silverlight AppDomain.
            </summary>
            <param name="rawAssembly"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightAppDomainHelper.LoadAssemblyFrom(System.String)">
            <summary>
            Loads the assembly specified by the filename into the Silverlight AppDomain.
            </summary>
            <param name="assemblyFile"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightException">
            <summary>
            Exception thrown by Silverlight.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption">
            <summary>
            Options for hosting Silverlight
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.None">
            <summary>
            No additional options
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.FreezeOnInitialFrame">
            <summary>
            Freeze on initial frame
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.DisableFullScreen">
            <summary>
            Does nothing in 3D
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.DisableScriptExecution">
            <summary>
            Disable script execution
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.DisableManagedExecution">
            <summary>
            Disable managed code execution
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.EnableCrossDomainDownloads">
            <summary>
            Enable cross domain downloads
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.UseCustomAppDomain">
            <summary>
            Use a custom app domain
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.DisableNetworking">
            <summary>
            Disable networking
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.DisableScriptCallouts">
            <summary>
            Disable script callouts
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.EnableHtmlDomAccess">
            <summary>
            Enable DOM access
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.XcpHostOption.EnableScriptableObjectAccess">
            <summary>
            Enable scriptable object access
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor">
            <summary>
            Handles displaying and interacting with a silverlight control
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.GraphicsProxy.SilverlightGraphicsObject)">
            <summary>
            Constructor
            </summary>
            <param name="host"></param>
            <param name="silverlightGraphicsObject"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.#ctor(Microsoft.MapPoint.Rendering3D.Host,System.Uri,System.Drawing.Size,Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Creates a silverlight actor from the specified url with a given pixel size and a position in the world
            that always faces the camera on a horizontal plane.
            The actor owns the silverlight graphics object and silverlight control and will dispose
            these when the actor is disposed.
            </summary>
            <param name="host">Host object</param>
            <param name="uri">Address to load silverlight control from</param>
            <param name="size">The size in pixels of the control</param>
            <param name="position">The position of the actor</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.MouseLeave">
            <summary>
            Called by <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep"/> when this actor has previously received a mouse over event
            but is no longer getting them because the mouse has moved outside of its area.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.Dispose(System.Boolean)">
            <summary>
            Disposes of the actor. The SilverlightControl is not disposed of.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.Render(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            
            </summary>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.SilverlightGraphicsObject">
            <summary>
            The silverlight graphics object wrapped by this actor
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.IntersectionTagType">
            <summary>
            Gets the type of the tag that will be passed to intersections for early filtering.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor.IsSolid">
            <summary>
            Gets whether or not this is solid.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightTagProperties">
            <summary>
            Singleton that is used internally to perform intersection predicate testing on Silverlight actors.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightTagProperties.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightTagProperties.#ctor">
            <summary>
            This class is a singleton.  Use SilverlightTagProperties.Instance.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightTagProperties.IsSolid">
            <summary>
            Gets that the Silverlight actor is solid.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightTagProperties.IntersectionTagType">
            <summary>
            Gets SilverLightActor as the type.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadRequest">
            <summary>
            Content download request
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadRequest.CancelRequest">
            <summary>
            Cancels this request
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadRequest.SetContent(System.IO.Stream)">
            <summary>
            Sets the content stream
            </summary>
            <param name="contentStream"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadRequest.Uri">
            <summary>
            The Uri this silverlight control is requesting
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadRequest.IsAsynchronous">
            <summary>
            Whether this response stream is asynchronous or not.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.TextureChangedEventArgs">
            <summary>
            EventArgs used when firing TextureChanged event
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.TextureChangedEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            ctor
            </summary>
            <param name="changedArea"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.TextureChangedEventArgs.ChangedArea">
            <summary>
            The area of the RenderBitmap that has changed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadCallback">
            <summary>
            Delegate called when content is downloaded
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightErrorEventHandler">
            <summary>
            Delegate called when an error happens
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightEventHandler">
            <summary>
            Delegate called when an event is fired from Silverlight
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightTextureChangedEventHandler">
            <summary>
            Delegate called when the silverlight texture changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl">
            <summary>
            Windowless host for the Silverlight ActiveX control
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.#ctor(Microsoft.MapPoint.Rendering3D.Host,System.Uri)">
            <summary>
            Creates a new silverlight control with a default size of 640x480.
            </summary>
            <param name="host">Host object</param>
            <param name="uri">Address of silverlight control to run</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.#ctor(Microsoft.MapPoint.Rendering3D.Host,System.Uri,System.Drawing.Size)">
            <summary>
            Creates a new silverlight control with a specific size.
            </summary>
            <param name="host">Host object</param>
            <param name="uri">Address of silverlight control to run</param>
            <param name="size">The size in pixels of the control</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Dispose">
            <summary>
            Dispose of the control
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Dispose(System.Boolean)">
            <summary>
            Dispose of the control
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.LockRenderBitmap">
            <summary>
            Locks the render bitmap to guarantee that it won't be written to.
            If this method is not called the bitmap may be written to at any time possibly causing
            visible tearing if the bitmap is used at the wrong time.
            Keep the locked periods as small as possible.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.UnlockRenderBitmap">
            <summary>
            Unlocks the render bitmap so it can be updated asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SetupSilverlightAppDomain(System.AppDomain)">
            <summary>
            Sets up the app domain to resolve Silverlight assemblies.
            </summary>
            <param name="appDomain"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Draw(System.Drawing.Bitmap)">
            <summary>
            Draws the silverlight control to the specified bitmap
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SetAppDomain(System.AppDomain)">
            <summary>
            Sets the AppDomain silverlight uses for its managed code. Must be called before loading the control.
            Note that using a custom app domain like this exposes a potential denial of service attack from the Silverlight control;
            an unhandled exception on the Silverlight threadpool will terminate the process.
            
            Silverlight applications created in a custom app domain can not use Dispatcher.BeginInvoke due to a Silverlight limitation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Shutdown">
            <summary>
            Must be called on shutdown. Cleans up necessary resources to allow application to exit gracefully.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.MouseMove(System.Drawing.Point)">
            <summary>
            Sends a mouse move message.
            </summary>
            <param name="mouseCoordinates">The position of the mouse cursor</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.MouseDown(System.Windows.Forms.MouseButtons,System.Drawing.Point)">
            <summary>
            Sends a mouse down message.
            </summary>
            <param name="button">The mouse button that was pushed down</param>
            <param name="mouseCoordinates">The position of the click</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.MouseUp(System.Windows.Forms.MouseButtons,System.Drawing.Point)">
            <summary>
            Sends a mouse up message.
            </summary>
            <param name="button">The mouse button that was released</param>
            <param name="mouseCoordinates">The position of the click</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.MouseDoubleClick(System.Windows.Forms.MouseButtons,System.Drawing.Point)">
            <summary>
            Sends a mouse double click message.
            </summary>
            <param name="button">The mouse button that was double clicked</param>
            <param name="mouseCoordinates">The position of the click</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.MouseLeave">
            <summary>
            Sends a mouse leave message.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SendWindowMessage(System.Windows.Forms.Message)">
            <summary>
            Forwards a window message to the control.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Load">
            <summary>
            Loads the silverlight control using the current settings.
            A control may only be loaded once.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.GetTexture">
            <summary>
            Returns a texture for this silverlight control
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.GetBitmapProvider">
            <summary>
            Returns a bitmap provider for this silverlight control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.BeginInvoke(System.Windows.Forms.MethodInvoker)">
            <summary>
            Executes a method on the silverlight UI thread asynchronously.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SendMouseMessage(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.WindowMessage,System.Drawing.Point)">
            <summary>
            Sends a mouse message
            </summary>
            <param name="windowMessage"></param>
            <param name="mouseCoordinates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.ValidateNotDisposed">
            <summary>
            Throws an exception if this control has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.ValidateNotLoaded">
            <summary>
            Throws an exception if this control has been loaded already.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.IsValidMessage(System.Int32)">
            <summary>
            Ensures that the message is one the user is allowed to forward to the silverlight control.
            A little paranoia never hurt anyone.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.DefaultDownload(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadRequest)">
            <summary>
            If no ContentDownloadCallback is attached, DefaultDownload gets called.
            This handler only has the ability to fetch requests from the internet.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.InternalLoad">
            <summary>
            Loads the control. 
            Must be run from the UI thread that all future COM calls will be done on.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.OnTextureChanged(System.Drawing.Rectangle)">
            <summary>
            Fires ImageChanged event
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.OnResized">
            <summary>
            Called when the Size property has been modified
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.OnErrorRaised(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightErrorEventArgs)">
            <summary>
            Raises the ErrorRaised event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.OnControlLoaded(System.EventArgs)">
            <summary>
            Raises the ControlLoaded event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.OnEventRaised(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightEventArgs)">
            <summary>
            Raises the EventRaised event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.RaiseDownloadEvent(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightContentDownloadRequest)">
            <summary>
            Raises the ContentDownloadCallback event
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.RaiseLoadedEvent">
            <summary>
            Called by site
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.NotifyErrorRaised(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Called by site
            </summary>
            <param name="message">The error message</param>
            <param name="source">The source of the error</param>
            <param name="line">The line the error happened on</param>
            <param name="column">The column the error happened on</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.NotifyEventRaised(System.String)">
            <summary>
            Called by site
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Redraw">
            <summary>
            Called by silverlight thread at regular intervals when it wants to redraw the content.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.TextureChanged">
            <summary>
            Fired when the image representing this control is changed. Call Draw to get the new contents.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.ControlLoaded">
            <summary>
            Fired when the control is loaded.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.ErrorRaised">
            <summary>
            Fired when an error happens.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.EventRaised">
            <summary>
            Fired when an event is raised from Silverlight.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Resized">
            <summary>
            Fired when the Size property is modified.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.ContentDownloadCallback">
            <summary>
            Content download callback. Must be set before the control is created.
            If this property has a value the silverlight control will allow cross domain downloads
            and it is up to the download callback to validate any applicable security.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.RenderBitmap">
            <summary>
            Returns a bitmap representation of the Silverlight control. This bitmap is continuously 
            updated and will always be current.
            This bitmap must not be disposed of.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.AllowCrossSiteRequests">
            <summary>
            Whether cross site requests are allowed from the Silverlight control.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.ContainsAlpha">
            <summary>
            Whether this silverlight control is transparent or not
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.BackgroundColor">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.FrameRate">
            <summary>
            The framerate the silverlight control should be rendered at.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.IsControlLoaded">
            <summary>
            Whether the control is loaded
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Uri">
            <summary>
            The uri this silverlight control is running from.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.Size">
            <summary>
            The size of the control in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.InitializationParameters">
            <summary>
            Initialization parameters for the silverlight control
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightBitmapProvider">
            <summary>
            BitmapProvider that returns the current bitmap of the silverlight control
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.DownloadRequest">
            <summary>
            Implements downloading for the silverlight control web requests.
            All content is downloaded first and then made available to the control so streaming does not work.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightThreadManager">
            <summary>
            Class for managing the silverlight UI thread.
            Silverlight needs a UI thread pumping messages. We don't want to use the main UI thread
            since a lengthy operation could lock it up.
            All silverlight controls share a common UI thread that is separate from the rest of the
            application and all COM operations are marshalled to this thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightThreadManager.AddActiveControl(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl)">
            <summary>
            Adds an active silverlight control to the redraw list.
            </summary>
            <param name="silverlightControl"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightThreadManager.RemoveActiveControl(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl)">
            <summary>
            Removes an active silverlight control from the redraw list.
            </summary>
            <param name="silverlightControl"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightThreadManager.BeginInvoke(System.Windows.Forms.MethodInvoker)">
            <summary>
            Asynchronously executes the method on the silverlight UI thread
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightThreadManager.Shutdown">
            <summary>
            Shuts down the UI thread if one is started.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightThreadManager.Instance">
            <summary>
            Returns the SilverlightThreadManager instance if one is already created
            or creates it if necessary.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControl.SilverlightThreadManager.RedrawInterval">
            <summary>
            The number of milliseconds between redraw calls. Default is 33ms.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControlSite.Redraw(System.Drawing.Rectangle@)">
            <summary>
            Redraws the render target bitmap.
            </summary>
            <param name="changedArea"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControlSite.DoFirstDraw">
            <summary>
            Calls through to the silverlight control to request that it draw itself.
            The first call to draw will start the control loading.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightControlSite.RenderBitmap">
            <summary>
            The bitmap representation of the Silverlight control.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightErrorEventArgs">
            <summary>
            Event arguments for SilverlightControl.ErrorRaised
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightErrorEventArgs.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightErrorEventArgs.Source">
            <summary>
            The source of the error message
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightErrorEventArgs.Line">
            <summary>
            The line of the error
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightErrorEventArgs.Column">
            <summary>
            The column of the error
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightEventArgs.Name">
            <summary>
            The name for the event being fired
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.DataLoadedEventStep">
            <summary>
            An step to handle raising the OnDataLoadComplete event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DataLoadedEventStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.DataLoadedEventStep"></see>.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DataLoadedEventStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Called when the step should execute.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DataLoadedEventStep.Dispose(System.Boolean)">
            <summary>
            Implementation of IDisposable.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep">
            <summary>
            Manages silverlight actors and interactions
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            ctor
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.OnInitialize(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Called on the render thread when this step is initialized.
            </summary>
            <param name="progress"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Gets the intersections from this step.  
            Note that SilverlightActors will already be returned from the 
            ActorsStep, so this returns nothing.
            </summary>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.IntersectsActors(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            
            </summary>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.AddActor(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor)">
            <summary>
            Adds a silverlight actor to be tracked
            </summary>
            <param name="actor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.RemoveActor(Microsoft.MapPoint.Rendering3D.Silverlight.SilverlightActor)">
            <summary>
            Removes a disposed silverlight actor from being tracked
            </summary>
            <param name="actor"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.MouseOverActor">
            <summary>
            The current silverlight actor (if any, may be null) that has mouse attention
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.SilverlightStep.SilverlightBindingsSource">
            <summary>
            Spatially aware bindings source
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot">
            <summary>
            Encapsulates all of the primitives that are drawn on a scene.
            Collision testing goes against these.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Graphics3D.Mesh,Microsoft.MapPoint.Graphics3D.Mesh,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,Microsoft.MapPoint.Graphics3D.Mesh,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,System.Collections.Generic.List{Microsoft.MapPoint.Rendering3D.WorldMemoryDataStore.WorldMemoryPrimitive})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot"/> class.
            </summary>
            <param name="host"></param>
            <param name="globeMesh"></param>
            <param name="northPoleMesh"></param>
            <param name="northPoleBoundingBox"></param>
            <param name="southPoleMesh"></param>
            <param name="southPoleBoundingBox"></param>
            <param name="items"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Derived actors may override this method to perform ray intersection testing.
            </summary>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot.Intersects(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList)">
            <summary>
            Derived actors may override this method to perform swept-sphere intersection testing.
            </summary>
            <param name="sweptSphere"></param>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.State.PrimitivesSnapshot.Items">
            <summary>
            Gets the primitives.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition">
            <summary>
            Encapsulates a fade to or from a solid color.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.#ctor(Microsoft.MapPoint.Rendering3D.ActorManager,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition"/> class.
            </summary>
            <param name="actorManager"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.Begin(Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.TransitionCompleteHandler)">
            <summary>
            
            </summary>
            <param name="completeCallback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.OnComplete">
            <summary>
            
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.complete">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.TransitionCompleteHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition.#ctor(Microsoft.MapPoint.Rendering3D.ActorManager,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition"/> class.
            </summary>
            <param name="actorManager"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition.Dispose(System.Boolean)">
            <summary>
            Release internal resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition.FadeOut(System.Drawing.Color,Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.TransitionCompleteHandler)">
            <summary>
            Fade the screen out to the given color.
            </summary>
            <param name="color"></param>
            <param name="completeCallback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition.FadeIn(Microsoft.MapPoint.Rendering3D.Steps.Actors.Transition.TransitionCompleteHandler)">
            <summary>
            Fade the screen back from the last given color.
            </summary>
            <param name="completeCallback"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition.Update(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Update the logic of this transition.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FadeTransition.Render(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Render this transition for the frame.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.FloatingScreenTextActor">
            <summary>
            Encapsulates an actor that is some text that will fade in while 
            floating upward and getting larger, and then fade out and remove 
            itself.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor">
            <summary>
            Actor that is some text shown on the screen.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.renderable">
            <summary>
            The primary renderable object.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.glowRenderable">
            <summary>
            The glow renderable object.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.#ctor(System.String,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Point,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor"/> class.
            </summary>
            <param name="name"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="color"></param>
            <param name="position"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.#ctor(System.String,System.String,System.Drawing.Color,System.Drawing.Color,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont,System.Object,System.Single,System.Drawing.Point,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor"/> class.
            </summary>
            <param name="name"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="glowFont">The font of a glow around the main text.  May be null.</param>
            <param name="color"></param>
            <param name="glowColor">The color of the glow around the text.  If glowFont is null this parameter is ignored.</param>
            <param name="intersectionTag">This will be added to results of Intersects calls.  If it is null, Intersects calls will always return false.</param>
            <param name="fadeTime">The time in seconds that it should take to fade this label in and out.  A value less than or equal to zero will not use a fade effect.</param>
            <param name="position"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Render(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Renders the actor.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            
            </summary>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Font">
            <summary>
            Gets the font of this text.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.GraphicsFront">
            <summary>
            Gets the font this text uses to render.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.GlowGraphicsFront">
            <summary>
            Gets the font this text uses to render glow.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Text">
            <summary>
            Gets or sets the string displayed.  Environment.NewLine is supported.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Position">
            <summary>
            Gets or sets the position of the text on screen.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Alignment">
            <summary>
            Gets or sets the alignment of the text relative to the specified position.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Scale">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Color">
            <summary>
            Gets or sets the color of the displayed text.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.GlowColor">
            <summary>
            Gets or sets the color of the glow around the displayed text.  If the font used does not support glow, this property does nothing.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextActor.Visible">
            <summary>
            Get or set the text's visibility.  If a fade time was specified in the constructor, the text will fade
            to the value set.  When set to false this property will return true only when the label is fully faded out.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FloatingScreenTextActor.#ctor(Microsoft.MapPoint.Rendering3D.ActorManager,System.String,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Point,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.FloatingScreenTextActor"/> class.
            </summary>
            <param name="actorManager"></param>
            <param name="name"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="color"></param>
            <param name="position"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.FloatingScreenTextActor.Update(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor">
            <summary>
            Actor that is some text shown on the screen, drawn at a particular location in the world.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.#ctor(System.String,System.String,System.Drawing.Color,System.Drawing.Color,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont,Microsoft.MapPoint.Rendering3D.GraphicsProxy.GraphicsFont,Microsoft.MapPoint.Rendering3D.LatLonAlt,Microsoft.MapPoint.Rendering3D.Utility.AltitudeMode,System.Object,System.Single,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor"/> class.
            </summary>
            <param name="name"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="glowFont">The font of a glow around the main text.  May be null.</param>
            <param name="color"></param>
            <param name="glowColor">The color of the glow around the text.  If glowFont is null this parameter is ignored.</param>
            <param name="position"></param>
            <param name="altitudeMode"></param>
            <param name="intersectionTag">This will be added to results of Intersects calls.  If it is null, Intersects calls will always return false.</param>
            <param name="fadeTime">The time in seconds that it should take to fade this label in and out.  A value less than or equal to zero will not use a fade effect.</param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.LocationChanged(System.Double,System.Double)">
            <summary>
            Signals that data at this location has changed.
            </summary>
            <param name="groundElevation"></param>
            <param name="objectElevation"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.Position">
            <summary>
            Gets or sets the position of the anchor in the world.  If AltitudeMode is FromGround,
            the altitude represents the distance above the ground.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.Vector">
            <summary>
            Gets the current position of the anchor in 3D space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.Offset">
            <summary>
            Indicates an offset, in pixels, that the text should be displayed from the anchor.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.Location">
            <summary>
            The location of the spot this ILocationListener is interested in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.MaxLod">
            <summary>
            The maximum LOD this ILocationListener is interested in.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.AnchoredScreenTextActor.MinLod">
            <summary>
            The minimum LOD this ILocationListener is interested in.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextIntersectionComparable">
            <summary>
            A sorter for screen text.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenTextIntersectionComparable.#ctor(System.Int32)">
            <summary>
            A comparable object for subsorting sprites.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor">
            <summary>
            Actor that is an image shown in screen space.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.#ctor(System.Drawing.Bitmap,System.Drawing.Point,System.Drawing.Size,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor"/> class.
            </summary>
            <param name="image">The image to display.</param>
            <param name="position">The position of the lower left corner of the image, in screen pixels.</param>
            <param name="size">The size of the image, in screen pixels.</param>
            <param name="source">This should be the BindingsSource that owns this actor.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.Render(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Renders the actor.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Performs ray intersection testing against this actor.  Will only return true for rays that originate on the screen,
            such as the Pointer.
            </summary>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.Dispose(System.Boolean)">
            <summary>
            Releases any resources the actor is holding on to.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.Position">
            <summary>
            The position of the upper left corner of the image in screen coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.ZOrder">
            <summary>
            The draw order of the image.  The default value is 0.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.Size">
            <summary>
            The size of the image in screen coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.ScreenImageActor.Rotation">
            <summary>
            Gets or sets the image rotation in degrees counter-clockwise around its center.
            The default value is 0.0.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.AtmosphereRenderableObject.#ctor(System.String,Microsoft.MapPoint.Graphics3D.Graphics3DDevice,System.Double,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Renderable object for meshes.  Currently assumes only 1 texture and 1 material per pass.
            </summary>
            <param name="name"></param>
            <param name="device"></param>
            <param name="innerAtmospherScale"></param>
            <param name="outerAtmosphereScale"></param>
            <param name="localToGlobal"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.AtmosphereRenderableObject.CaptureOuterRenderState">
            <summary>
            Set up the render state
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.AtmosphereRenderableObject.RenderSelection(Microsoft.MapPoint.Graphics3D.Types.Material)">
            <summary>
            Called to allow the rendering of the object in the selection queue
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.AtmosphereRenderableObject.InnerFadeFactor">
            <summary>
            The current alpha value from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.AtmosphereRenderableObject.OuterFadeFactor">
            <summary>
            The current alpha value from 0.0 to 1.0
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.AdActions.MAX_AD_DISTANCE">
            <summary>
            The maximum distance that makes an ad clickable.
            Ads further from the viewer than that distance are not clickable.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraControllerState">
             <summary>
             Represents the current camera state from the user's point of view.
            
             One of its usages is to provide the NAV control a way to update their buttons according to the users' actions.
             Note that a Latency value is used to define when an action is no longer being performed. This minimizes flickering.
             </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraControllerState.Update(System.Int64,System.Boolean,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DragRegion)">
            <summary>
            Updated the camera state.
            </summary>
            <param name="tickCount"></param>
            <param name="changingPosition">Whether the camera position and/or orientation is changing in any way</param>
            <param name="moving">Whether the camera is moving in any direction but with a constant local orientation (Actions: Move, Strafe, etc)</param>
            <param name="pivot">Camera speed while pivoting around an anchored position (Left, Right). Zero if not pivoting.</param>
            <param name="tilt">Camera speed while tilting around an anchored position (Up, Down). Zero if not tilting.</param>
            <param name="zoom">Camera speed while zoomming in/out a target (ZoomIn, ZoomOut). Zero if not zoomming.</param>
            <param name="altitude">Camera speed while changing altitude. Zero if not changing altitude.</param>
            <param name="pivotConstrained">Whether the pivot movement was constrained by the ACC</param> 
            <param name="tiltConstrained">Whether the tilt movement was constrained by the ACC</param>
            <param name="dragging"></param>
            <param name="dragRegion"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControlSettingsProvider.ApplicationName">
            <summary>
            Gets or sets the name of the currently running application.
            </summary>
            <remarks>
            A System.String that contains the application's shortened name, which does
            not contain a full path or extension, for example, SimpleAppSettings.
            </remarks>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Notifications">
            <summary>
            Facade for the notification system.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.Display(System.String)">
            <summary>
            Displays a notification to the user.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.Display(System.String,System.String,System.Boolean)">
            <summary>
            Displays a notification to the user.
            </summary>
            <param name="problem">A description of a problem.</param>
            <param name="solution">A possible solution to the problem.</param>
            <param name="autoClose">If true, the notification closes automatically.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.Close">
            <summary>
            Instructs a previous, non-autoClosed notification to close.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Notifications.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Notifications.DisplayEvent">
            <summary>
            Event that is raised when a notification is displayed.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.Notifications.CloseEvent">
            <summary>
            Event that is raised when a notification Close happens.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Notifications.Enabled">
            <summary>
            Gets or sets whether notifications are shown or not.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Notifications.DisplayEventHandler">
            <summary>
            A delegate for handling display of notifications in a custom fashion.
            </summary>
            <param name="problem">A description of the problem, or the message that needs to be show to the user.</param>
            <param name="solution">A proposed solution.</param>
            <param name="autoClose">Whether the notification should go away on its own.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Notifications.CloseEventHandler">
            <summary>
            A delegate for handling the closing of notifications in a custom fashion.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.CameraStep">
            <summary>
            A 3D rendering step that executes the active camera controller and 
            snapshots the resulting camera to the scene state.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.CameraStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.CameraStep"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.CameraStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Implements OnExecute.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.CameraStep.Dispose(System.Boolean)">
            <summary>
            Implements Dispose.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.CameraStep.Camera">
            <summary>
            Gets the camera that is modified by the active camera controller.  
            Warning: accessing this should be avoided in favor of reading the 
            scene state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.CameraStep.CurrentCameraController">
            <summary>
            Gets the active camera controller.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.CommunicationStep">
            <summary>
            Encapsulates processing events from CommunicationManager.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.CommunicationStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.CommunicationStep"/>
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.CommunicationStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Executes the engine events that occurred during this frame.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.EventSourcesStep">
            <summary>
            Encapsulates processing events from bindings.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.EventSourcesStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.EventSourcesStep"/>
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.EventSourcesStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Exectues the events for this frame and updates the event sources.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.InformationStep">
            <summary>
            Step that writes the current trace output to the screen.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.InformationStep"/> class.
            </summary>
            <param name="host"></param>
            <param name="active"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationStep.ToggleInformation(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Executes the step this frame.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationStep.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep">
            <summary>
            A 3D rendering step that displays a notification on the screen 
            containing the specified text.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep.Display(System.String,System.String,System.Boolean)">
            <summary>
            Call to update the text and start a new notification.
            </summary>
            <param name="problem"></param>
            <param name="solution"></param>
            <param name="autoClose"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep.Close">
            <summary>
            Call to force notifications to close now.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep.Initialize">
            <summary>
            Implements OnInitialize.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Implements OnExecute.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep.Dispose(System.Boolean)">
            <summary>
            Implements Dispose.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.NotificationStep.EnableNotifications">
            <summary>
            Enable or disable the notification mechanism
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NavigationControl.OffscreenPointerUIElement">
            <summary>
            Encapsulates the red triangle/red arrow that indicates that the world is not in view.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.UI.UIElement">
            <summary>
            Represents a single UI element, handled by an instance of UIManager. This class must be extended.
            
            When creating a subclass of UIElement, the RenderAndHitPairs property must be set to a valid list (size=0 is OK).
            RenderAndHitPairs must contain a list of renderable/hit-detect pairs managed by the UI Element.
            For instance, if FooUIElement.RenderAndHitPairs contain object ABC, FooUIElement.OnMouseOver() is called when the
            mouse goes over ABC.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIElement.pairs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIElement.isClicked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIElement.gotFocusOpacity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIElement.lostFocusOpacity">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIElement.center">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.SetOpacity(System.Byte)">
            <summary>
            Sets the current Opacity (from 0 to 255), bypassing the fade in/out animations.
            </summary>
            <param name="alpha"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.OnClickDown(Microsoft.MapPoint.Rendering3D.UI.UIHitInfo)">
            <summary>
            This method is called when a mouse click-down occurs when the UIElement is focused.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.OnClickUp(Microsoft.MapPoint.Rendering3D.UI.UIHitInfo)">
            <summary>
            This method is called when a mouse click-up occurs when the UIElement is focused.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.OnGotFocus">
            <summary>
            This method is called when the UIElement receives focus. "Focus" means that the mouse cursor is over one of the renderable objects managed by this UIElement instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.OnLostFocus">
            <summary>
            This method is called when the UIElement loses focus, i.e. when the mouse cursor is no longer over any of the renderable objects managed by this UIElement instance.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.OnMouseOver(Microsoft.MapPoint.Graphics3D.RenderObjects.UIRenderObject)">
            <summary>
            This method is called when the mouse goes over a new UIRenderableObject.
            </summary>
            <param name="obj">the new renderable object under the mouse cursor.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.OnMouseOut(Microsoft.MapPoint.Graphics3D.RenderObjects.UIRenderObject)">
            <summary>
            This method is called when the mouse leaves a UIRenderableObject hit area.
            </summary>
            <param name="obj">the renderable object that no longer has the mouse cursor over.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.OnMouseMove(Microsoft.MapPoint.Rendering3D.UI.UIHitInfo)">
            <summary>
            This method is called when the mouse moves over any UIRenderableObject managed by this element.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIElement.Update(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            This method is called every frame by the render thread.
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIElement.RenderAndHitPairs">
            <summary>
            The list of render/hit objects managed by the UIElement. This list MUST be set to a valid value before this element is used.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIElement.Center">
            <summary>
            The center position [-1,+1] of the element. This property does NOT automatically update the position of the associated renderable objects.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIElement.GotFocusOpacity">
            <summary>
            The Opacity (from 0 to 255) when the element is focused.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIElement.LostFocusOpacity">
            <summary>
            The Opacity (from 0 to 255) when the element is not focused.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIElement.IsClicked">
            <summary>
            Is the control currently clicked?
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.OffscreenPointerUIElement.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.NavigationControl.OffscreenPointerUIElement"/> class.
            </summary>
            <param name="globeControl"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderPoleCapObject.#ctor(System.String,Microsoft.MapPoint.Graphics3D.Graphics3DDevice,Microsoft.MapPoint.Graphics3D.Mesh,Microsoft.MapPoint.Graphics3D.Types.Material,Microsoft.MapPoint.Graphics3D.BaseTexture,System.Int32,System.Int32,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Renderable object for meshes.  Currently assumes only 1 texture and 1 material per pass.
            </summary>
            <param name="name"></param>
            <param name="device"></param>
            <param name="mesh"></param>
            <param name="material"></param>
            <param name="texture"></param>
            <param name="vertexCount"></param>
            <param name="faceCount"></param>
            <param name="localToGlobal"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderPoleCapObject.RenderSelection(Microsoft.MapPoint.Graphics3D.Types.Material)">
            <summary>
            Called to allow the rendering of the object in the selection queue
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.RenderQueuesStep">
            <summary>
            Step in the rendering pipeline that sets up the render queues for each 
            frames and adds them to the scene state.  
            
            The previous frame's queues are available here too.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.RenderQueuesStep.#ctor(Microsoft.MapPoint.Rendering3D.RenderEngine,Microsoft.MapPoint.Graphics3D.GraphicsEngine3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.RenderQueuesStep"/> class.
            </summary>
            <param name="renderEngine"></param>
            <param name="engine"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.RenderQueuesStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Set up the render queues for the next frame and adds them to the scene state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.RenderQueuesStep.PreviousRenderQueues">
            <summary>
            Gets the render queues from the previous frame.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.RenderStep">
            <summary>
            Commits the render queues to the Graphics3D.GraphicsEngine3D.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.RenderStep.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Graphics3D.GraphicsEngine3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.RenderStep"/> class.
            </summary>
            <param name="host"></param>
            <param name="engine"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.RenderStep.ComputeShadowBound(System.Double)">
            <summary>
            Computes the amount of vertical screen space that should be covered by the shadow map.
            </summary>
            <param name="pitch">The camera pitch angle, in radians.</param>
            <returns>A double from 0.0 to 1.0.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.RenderStep.ComputeShadowRadius(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Computes the shadow map radius and center for the current camera viewpoint.
            </summary>
            <param name="host">A valid instance of Host.</param>
            <param name="camera">The current camera.</param>
            
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.RenderStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Fires every frame to render the scene.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep">
            <summary>
            A 3D rendering step that displays copyright info and approximate image scale.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.OnInitialize(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Implements OnInitialize.
            </summary>
            <param name="progress"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.UpdateFontObjects">
            <summary>
            Creates the fonts needed to render the text objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.UpdateCopyrightObject">
            <summary>
            Updates the copyright sting objectgs.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.OnViewResize(System.Int32,System.Int32)">
            <summary>
            Implements OnResize.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Implements OnExecute.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.ReleaseRenderObjects">
            <summary>
            Called when the render thread is shutting down and all graphics resources must be released.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.Dispose(System.Boolean)">
            <summary>
            Implements Dispose.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.IsMetric">
            <summary>
            Gets or sets whether or not to use Metric units for scale display
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.LogoOffset">
            <summary>
            Horizontal offset of the logo
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.ScaleBarOffset">
            <summary>
            Vertical offset of the scale bar.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.LogoHorizontalAlignment">
            <summary>
            Gets or set the logo horizontal alignment.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.LogoVerticalAlignment">
            <summary>
            Gets or sets the logo vertical alignment.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.SafetyMargin">
            <summary>
            Gets or sets whether a safety margin should be used to render the logo and the copyright strings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.AutoResizeLogo">
            <summary>
            Gets or sets whether the logo is automatically resized to keep 
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.CopyrightTextSize">
            <summary>
            Gets or sets the copyright text font size.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.StepEnabled">
            <summary>
            The scale step cannot be disabled.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.WhiteText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.RenderStatusInformation">
            <summary>
            Gets or sets whether the step should display the status information.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.PrimaryCopyrightText">
            <summary>
            Gets or sets the primary copyright text.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.SecondaryCopyrightText">
            <summary>
            Gets or sets the secondary copyright text.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.CopyrightText">
            <summary>
            Gets the final copyright string.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.WeatherDataString">
            <summary>
            Gets or sets the string to use as the weather timestamp.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.ShowScale">
            <summary>
            Gets or sets whether or not the scale bar should appear.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.ShowLocation">
            <summary>
            Gets or sets whether or not the location text should appear.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ScaleStep.NumAccessibleObjects">
            <summary>
            The number of objects we want to expose to Accessibility
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController">
            <summary>
            Encapsulates a camera controller that moves in arcs to get from the 
            source to the destination.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.positionPlaneNormal">
            <summary>
            Normal of the plane containing the starting and ending camera
            location vectors.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.stepOneAltitudeOnlyDistance">
            <summary>
            Distance up to move, in meters, during step one, before entering the arc.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.stepOneArcRadius">
            <summary>
            Radius in meters of the arc to move in during step one.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.stepOneArcDistance">
            <summary>
            Length in meters of the step one arc.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.stepTwoArcRadius">
            <summary>
            Radius in meters of the arc to move in during step two.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.stepTwoArcDistance">
            <summary>
            Length in meters of the step two arc.
            Value is set once per trip.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.stepTwoAltitudeOnlyDistance">
            <summary>
            Distance down to move, in meters, during step two, after the arc.
            Value is set once per trip.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.CalculatePosition(System.Double,System.Double)">
            <summary>
            Gets the position at a specified percentage of the way through the
            animation.
            </summary>
            <param name="percentComplete"></param>
            <param name="distanceFromOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ArcingAnimatedCameraController.InternalMoveTo">
            <summary>
            Sets up this camera to move to a destination.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController">
            <summary>
            Camera controller based on actions.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ElipsoidToSurfaceThreshold">
            <summary>
            The number of meters above the surface of the elipsoid in which we 
            transition from using the radius of the elipsoid to using the 
            surface elevation.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CameraSphereRadius">
            <summary>
             Radius, in meters, of the camera sphere with which to test collisions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.EnableInternal">
            <summary>
            Calls CameraControllers.Enable on this controller and its children.
            Must be called after Host has created CameraControllers!
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CancelChildAnimations">
            <summary>
            Stops any camera movement that is being spawned by this controller.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ArcTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint)">
            <summary>
            Animates by arcing to the specified viewpoint.
            </summary>
            <param name="viewpoint">The final destination</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ArcTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Animates by arcing to the specified viewpoint.
            </summary>
            <param name="viewpoint">The final destination</param>
            <param name="parameters">Optional parameters for fine-tuning the camera motion. May be null.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.SplineTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Animates by using splines to calculate a path to the specified viewpoint.
            </summary>
            <param name="viewpoint">The final destination</param>
            <param name="parameters">Optional parameters for fine-tuning the camera motion. May be null.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DirectMoveTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint)">
            <summary>
            Animates by linearly moving the camera to the specified viewpoint.
            </summary>
            <param name="viewpoint">The final destination</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DirectMoveTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Animates by linearly moving the camera to the specified viewpoint.
            </summary>
            <param name="viewpoint">The final destination</param>
            <param name="parameters">Optional parameters for fine-tuning the camera motion. May be null.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CircularMoveTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,System.Int32)">
            <summary>
            Animates by circling the camera around a center point.
            </summary>
            <param name="viewpoint">the final destination</param>
            <param name="center">the center to circle around.</param>
            <param name="rotationTimes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CircularMoveAround(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,System.Double,Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Rotates around the specified center by the specified angle (where 
            positive is counter clock-wise).  The angle may be more than a full
            rotation.
            </summary>
            <param name="center"></param>
            <param name="angle"></param>
            <param name="parameters">Optional parameters for fine-tuning the camera motion. May be null.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ViewRender">
            <summary>
            Perform any view space rendering.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CalculateRadiusAtPosition(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot)">
            <summary>
            Calculates the radius on the Geoid at the specified position.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TryCalculateHorizonAngle(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,System.Double,System.Double@)">
            <summary>
            Calculates the approximate angle between straight down and the 
            horizon, with the position as the axis.
            </summary>
            <param name="position"></param>
            <param name="radius"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TryCalculateHorizonAngle(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,System.Int32,System.Double@)">
            <summary>
            Calculates the approximate angle between straight down and the 
            horizon, with the position as the axis.
            </summary>
            <param name="host"></param>
            <param name="position"></param>
            <param name="desiredLoDForElevation"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetCoordinateChangeMatrix(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the matrix that is required to move a vector from one lat/lon anchor to another.
            </summary>
            <param name="startLatitude"></param>
            <param name="startLongitude"></param>
            <param name="latitudeDelta"></param>
            <param name="longitudeDelta"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TryGetSmallestPositiveValue(System.Double,System.Double,System.Double@)">
            <summary>
            Gets the smallest positive value of the two specified values.  
            If neither is positive, false is returned.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TryGetPointerOnSurface(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tries to get the position of a pointer cast onto the surface at the
            altitude at which an anchor is.  This is fundamental to anything 
            that needs to move an anchor position to a destination based on a 
            pointer.
            </summary>
            <param name="targetFromCamera"></param>
            <param name="cameraPosition"></param>
            <param name="anchorPosition"></param>
            <param name="pointerOnSurface"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TryGetCenter(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tries to get a point on the ground that is in the center of the screen.
            </summary>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.UpdateCenter">
            <summary>
            Recalculates the haveCenter and center properties based on the current camera.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.UpdateCenter(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot,System.Double)">
            <summary>
            Recalculates the haveCenter property. 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TryGetCenterVector(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates the center of the visible map.  
            Note that the results may be off if the orientation is rolled.
            </summary>
            <param name="position"></param>
            <param name="orientation"></param>
            <param name="fieldOfViewY"></param>
            <param name="centerLookAt"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CalculateLocationDeltas(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,System.Double@,System.Double@)">
            <summary>
            Calculates the lat/lon delta required to get "point" so that it 
            intersects the ray targetFromCamera.
            </summary>
            <param name="point">Source point from which the target will determine the lat/lon delta.</param>
            <param name="targetFromCamera"></param>
            <param name="cameraPosition"></param>
            <param name="latitudeDelta"></param>
            <param name="longitudeDelta"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetPointerPosition(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Extracts the pointer poisition from an event if it contains one or queries the event source if it is not.
            </summary>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetPointerRay(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Extracts the pointer poisition from an event if it contains one or queries the event source if it is not.
            A ray is then constructed from the camera, using the posistion.
            </summary>
            <param name="cause"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ShowSpeedChangedNotification">
            <summary>
            Shows a notification indicating that the speed changed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Reset">
            <summary>
            Moves the camera back to lat/lon 0,0.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ResetOnCenter">
            <summary>
            Reorients the camera to look down with North up.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.NoActiveEvents">
            <summary>
            Called when there are no active events.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.PushAnchor(Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchoringMode)">
            <summary>
            Anchors at the specified position.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.PopAnchor">
            <summary>
            Called when an anchor is removed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchorAtCenter(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchorAtCenter
            Anchors on the center of the screen.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchorAtPointerOnGround(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchorAtPointerOnGround
            Anchors on the current event source's pointer's intersection with the ground.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchorAtPointerOnGroundOrModel(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchorAtPointerOnGroundOrModel
            Anchors on the current event source's pointer's intersection with the ground or models.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchorAtPointer(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchorAtPointer
            Anchors on the first event source's pointer.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TakeScreenshot(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: TakeScreenshot
            Saves the current image as a bmp
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ToggleNavigation(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ToggleNavigation
            Toggles display of 3D navigation tool
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ToggleBuildings(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ToggleBuildings
            Toggles display of buildings
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ToggleBuildingTextures(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ToggleBuildingTextures
            Toggles display of building textures
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ToggleWeather(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ToggleWeather
            Toggles display of weather.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ToggleMapObjects(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ToggleMapObjects
            Toggles display of maps objects such as trees.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Move(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: Move
            Moves the camera forward/up around the globe.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Strafe(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: Strafe
            Moves the camera left/right around the globe.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Ascend(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: Ascend
            Moves the camera up or down.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ApproachTarget(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ApproachTarget
            Moves the camera toward/away from the point in the center.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Turn(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: Turn
            Turns the camera (yaw) around the axis between it and the center of the 
            globe.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Pitch(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: Pitch
            Pitches the camera up or down.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchoredPivot(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchoredPivot
            Pivots the camera laterally around an anchor point.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchoredPivotTo(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchoredPivotTo
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchoredTiltTo(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchoredTiltTo
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchoredTilt(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AnchoredTilt
            Tilts the camera up/down around an anchor point.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.PointerDrag(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: PointerDrag
            Drags the map relative to movements of the mouse in screenspace.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.PointerOrient(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: PointerOrient
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetNorthVectorAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot)">
            <summary>
            Determines the angle to north of the given viewpoint
            </summary>
            <param name="position"></param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetNorthVectorAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Determines the angle to north of the given viewpoint
            </summary>
            <param name="position"></param>
            <param name="orientation"></param>
            <param name="referencePosition">The actual position used to calculate the resulting angle to north</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchoredRotateTo(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: Anchored rotate (anchored)
            Rotates around the anchor point to the yaw angle passed in cause
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GotoPointer(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: GotoPointer (Atomic)
            Moves toward the pointer position.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Reset(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: Reset (Atomic)
            Moves the camera back to lat/lon 0,0.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ResetOnCenter(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: ResetOnCenter (Atomic)
            Reorients the camera to look down with North up.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.SetGravity(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: SetGravity (Atomic)
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AdjustSpeedMultiplier(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: AdjustSpeedMultiplier (Atomic)
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.SetSpeedMultiplier(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: SetSpeedMultiplier (Atomic)
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetValidTiltPivotValues(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double,System.Double@,System.Double@,System.Double@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp@,System.Boolean@)">
            <summary>
            Performs a pivot/tilt/approach target operation. 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetSmoothedHeightAboveDem(System.Double,System.Double)">
            <summary>
            Gets the height of the camera above an average of recent surface elevations.
            </summary>
            <param name="altitude"></param>
            <param name="surfaceElevation"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.ForceOnCameraChangedEvent">
            <summary>
            Fires an OnCameraChanged event even if child animations are running.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.RaiseOnCameraChange">
            <summary>
            Fires an OnCameraChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetDragRegion(System.Int32,System.Int32,System.Double,System.Double,System.Drawing.Size)">
            <summary>
            The map window is divided into 5 regions (top, bottom, left and right margins, and center).
            Dragging with the mouse causes different behaviour depending on which of these regions the
            drag is started in. This method returns the region corresponding to given mouse coordinates
            and some information about the map view.
            </summary>
            <param name="x">X coordinate of the mouse, relative to the map window.</param>
            <param name="y">Y coordinate of the mouse, relative to the map window</param>
            <param name="altitude">Altitude of the camera.</param>
            <param name="pitch">Local pitch of the camera.</param>
            <param name="windowSize">Size of the map window.</param>
            <returns>A value corresponding to the region that the mouse pointer is in. If the mouse
            coordinates are outside of the map window the behaviour is undefined.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.MoveCamera(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Overrides CameraController.NextFrame.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.GetPoleMovementLimitingFactor(System.Boolean,System.Double)">
            <summary>
            Get movement factor to slow down keyboard or compass movement near the poles.
            </summary>
            <param name="strafing">True for sideways movement, false for foward/backward moving.</param>
            <param name="moveDistance">The movement or strafing distance. Only the sign is used.</param>
            <returns>A percentage of normal movement rate.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CameraPositionFromTarget(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPosition,System.Double,Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Returns a camera position given a target, camera altitude and camera orientation.
            </summary>
            <param name="target">the target (screen center)</param>
            <param name="cameraAltitude">the camera altitude</param>
            <param name="cameraRPY">the camera orientation. Roll is ignored</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.TiltCamera(System.Double,System.Boolean,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint)">
            <summary>
            Tilts a viewpoint to the specified value
            </summary>
            <param name="newTilt">the 'final' tilt angle</param>
            <param name="performTilt">whether the current camera should be animated</param>
            <param name="currentViewpoint">the viewpoint to be transformed. If null, the current camera viewpoint is transformed</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.RotateCamera(System.Double,System.Boolean,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint)">
            <summary>
            Rotates the camera to the given yaw.
            </summary>
            <param name="newYaw">the 'final' yaw angle</param>
            <param name="performRotation">whether the current camera should be animated</param>
            <param name="currentViewpoint">the viewpoint to be transformed. If null, the current camera viewpoint is transformed</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.RegisterActions">
            <summary>
            Registers all available actions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Activate">
            <summary>
            Called whenever the system switches to this controller.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Deactivate">
            <summary>
            Called whenever the system switches away from this controller.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.EnableDragRegions">
            <summary>
            If true, the regions on the sides, top, and bottom of the screen can be used for
            changing orientation as well as position.  Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.EnablePitchLeveling">
            <summary>
            If true, when approaching the ground the pitch of the camera will be leveled off so as to face the horizon.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.EnableStickyGround">
            <summary>
            If true, when near the ground the camera will be kept near the ground when moving laterally.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.Anchor">
            <summary>
            Gets the current anchor.  Only valid if the ACC is currently anchored.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.LastReportedViewpoint">
            <summary>
            Gets the last viewpoint reported by the OnCameraChanged script event.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.EnableInertia">
            <summary>
            Indicates whether Earth motion should continue after dragging.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.InertiaDecayFactor">
            <summary>
            The proportion of inertial velocity that is retained after each second elapsed.
            Must be between 0.0 and 1.0 inclusive. Setting it to 0.0 disables inertial motion.
            Setting it to 1.0 causes the motion to continue until stopped manually.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.AnchoringMode">
            <summary>
            Base class from which all anchoring activities are derived.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.CenterAnchoring">
            <summary>
            Encapsulates anchoring by trying to find the center of the visual area.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.PointerAnchoring">
            <summary>
            Encapsulates anchoring by picking the spot on a sphere around the camera that the pointer is on.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.PointerTargetAnchoring">
            <summary>
            Encapsulates anchoring by intersecting the pointer with the ground or buildings.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DragRegion">
            <summary>
            See GetDragRegion. A value corresponding to one of 5 regions which the map
            window is divided into for the purpose of mouse drag operations.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DragRegion.Left">
            <summary>Left margin.</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DragRegion.Top">
            <summary>Top margin</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DragRegion.Right">
            <summary>Right margin</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DragRegion.Bottom">
            <summary>Bottom margin</summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.ActionCameraController.DragRegion.Center">
            <summary>The remaining area inside of all margins.</summary>
        </member>
        <member name="T:Microsoft.MapPoint.Binding.BindingCursor3D">
            <summary>
            Implements a 3D binding cursor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor3D.#ctor(System.String,System.Windows.Forms.Cursor,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Double,Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Binding.BindingCursor"/> class.
            </summary>		
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor3D.Draw(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPosition,System.Double,Microsoft.MapPoint.Rendering3D.GraphicsProxy.RenderQueues)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="distanceToTarget"></param>
            <param name="renderQueues"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor3D.ResetOpacity">
            <summary>
            Resets the opacity to what it was upon creation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Binding.BindingCursor3D.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController">
            <summary>
            Encapsulates a camera controller that moves in a Circular line from the
            source to the destination.
            This controller only works to rotate around a center 
            point where the starting and ending radii from the center of the Earth
            match exactly.  This may cause blips, but more importantly can't 
            compensate for a change in altitude.  This class should take a center 
            point to rotate around (axis should be tangent to elipsoid) and a 
            direction (or possibly continue to take an angle) and should shift up
            and down the cylendar as it goes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.ComputeTotalTransitionTime(System.Double,System.Double)">
            <summary>
            Returns an initial estimate of the time it will take to do the transition.
            </summary>
            <param name="totalDistance"></param>
            <param name="cameraSpeed"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.RotateAround(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,System.Double,Microsoft.MapPoint.Rendering3D.Cameras.CameraController{Microsoft.MapPoint.Rendering3D.Cameras.PredictiveCamera},Microsoft.MapPoint.Rendering3D.Control.CameraParameters)">
            <summary>
            Rotates around the specified center by the specified angle (where 
            positive is counter clockwise).  The angle may be more than a full
            rotation.
            </summary>
            <param name="center"></param>
            <param name="angle"></param>
            <param name="next"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.RotateTo(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,Microsoft.MapPoint.Rendering3D.Utility.Spin,System.Double)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="target"></param>
            <param name="direction">Direction to rotate.</param>
            <param name="moveTime"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.SetValues(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Int32)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="upwardAxis"></param>
            <param name="rotationTimes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.SetValues(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticPositionSnapshot,System.Int32)">
            <summary>
            
            </summary>
            <param name="center"></param>
            <param name="rotationTimes"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.CalculatePosition(System.Double,System.Double)">
            <summary>
            Gets the position at a specified percentage of the way through the
            animation.
            </summary>
            <param name="percentComplete"></param>
            <param name="distanceFromOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.GetViewpoint(System.Double,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,System.Double,System.Boolean)">
            <summary>
            Gets the viewpoint at a specific percent complete.
            </summary>
            <param name="percentComplete"></param>
            <param name="viewpoint"></param>
            <param name="timeSinceLastFrame"></param>
            <param name="checkTransparency"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.InternalMoveTo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.Center">
            <summary>
            Gets the point around which the rotation happens.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.Axis">
            <summary>
            Gets the axis around which the rotations happens.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.CircularAnimatedCameraController.RotationTimes">
            <summary>
            Gets the number of times to rotate past the destination
            where 0 means simply move from the source to the destination
            using the shortest route.  
            -1 means to add -360 to the shortest route.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.DebugActions">
            <summary>
            Class that contains various debug-only actions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.DebugActions"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.Dispose">
            <summary>
            Clean up resources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugJumpToLocation(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugJumpToLocation
            Makes the camera jump to Location.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugJumpToZero(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugJumpToZero
            Makes the camera jump to lat/lon/alt 0/0/3,000,000
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugToggleTileIds(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugToggleTileIds
            Toggles displaying tile-ids on tiles.
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugShoot(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugShoot
            Shoots out several spinning cubes for collision testing.
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugToggleBoundingBoxes(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugToggleBoundingBoxes
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugToggleCenterPoint(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugToggleCenterPoint
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugAnchoredHitTest(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugAnchoredHitTest
            Performs a hit test along the anchor ray, writing out the resulting hits.
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugTransparentTest(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugTransparentTest
            Performs a hit test along the anchor ray, adding all world objects along the ray to the world object alpha list. 
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DebugActions.DebugUpdateQueryRegion(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Action: DebugUpdateQueryRegion
            Retrieves the Query Region for the current view and draws the corresponding polygon.
            </summary>
            <param name="cause">The event cause.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.GreatCircleAnimatedController">
            <summary>
            Encapsulates a camera controller that moves in a direct line from the
            source to the destination.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GreatCircleAnimatedController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.GreatCircleAnimatedController"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GreatCircleAnimatedController.CalculatePosition(System.Double,System.Double)">
            <summary>
            Gets the position at a specified percentage of the way through the
            animation.
            </summary>
            <param name="percentComplete"></param>
            <param name="distanceFromOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GreatCircleAnimatedController.GetViewpoint(System.Double,Microsoft.MapPoint.Rendering3D.Cameras.GeodeticViewpoint,System.Double,System.Boolean)">
            <summary>
            Gets the viewpoint at a specific percent complete.
            </summary>
            <param name="percentComplete"></param>
            <param name="viewpoint"></param>
            <param name="timeSinceLastFrame"></param>
            <param name="checkTransparency"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GreatCircleAnimatedController.InternalMoveTo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.DirectAnimatedCameraController">
            <summary>
            Encapsulates a camera controller that moves in a direct line from the
            source to the destination.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DirectAnimatedCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.DirectAnimatedCameraController"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DirectAnimatedCameraController.CalculatePosition(System.Double,System.Double)">
            <summary>
            Gets the position at a specified percentage of the way through the
            animation.
            </summary>
            <param name="percentComplete"></param>
            <param name="distanceFromOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DirectAnimatedCameraController.InternalMoveTo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource">
            <summary>
            Implementation of an event source for the Navigation Control
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.GetEventData(System.Int32,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.IsModifier(System.Int32)">
            <summary>
            Return whether or not the specified event id is a modifier.  
            Modifiers will not be executed in parallel with other modifiers.
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.CanModify(System.Int32,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            Return whether the specified event id in this event source can modify the 
            other key (possibly in this event source, possibly another).
            </summary>
            <param name="eventId"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavButtonDown(System.String)">
            <summary>
            Called when a NavigationControl button is pressed
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavButtonUp(System.String)">
            <summary>
            Called when a NavigationControl button is released
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavPivotTo(System.Double)">
            <summary>
            Continuous rotation using the ring or N elements
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavTiltTo(System.Double)">
            <summary>
            Continuous tilting using the 'tilt arrow'
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavMove(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Called when the NavigationControl ring is pressed. This method should be called whenever the movement direction changes
            (i.e. whenever the mouse moves over the NAV ring while the mouse is down)
            </summary>
            <param name="direction">The direction to move/strafe. Zero to stop moving.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavZoom(System.Double)">
            <summary>
            Handles when the navigation control zoom button is pressed.
            </summary>
            <param name="zoomFactor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavTilt(System.Double)">
            <summary>
            Handles when the navigation control tilt controls are pressed.
            </summary>
            <param name="tiltFactor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.NavAltitude(System.Double)">
            <summary>
            Handles when the navigation control altitude buttons are pressed.
            </summary>
            <param name="altitudeFactor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.TryGetEventId(System.String,System.Int32@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventId(System.String,System.Int32@)"/>.
            </summary>
            <param name="eventName"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.TryGetEventName(System.Int32,System.String@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventName(System.Int32,System.String@)"/>.
            </summary>
            <param name="eventId"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.NavigationControlEventSource.Name">
            <summary>
            Specify the name used as the pair {Name}.{Event}
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.PresetActions">
            <summary>
            Actions that reset the camera position/orientation to pre-defined values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.PresetActions.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Host"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.PresetActions.TiltPreset(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Tilts the camera to a given angle.
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.PresetActions.OrientationPreset(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Pivots the camera around the center of the screen to match the given orientation.
            If a center position is not available, the camera simply rotates around its 'earth normal' axis to match the requested orientation.
            </summary>
            <param name="cause">Data on the event that caused this action. The data should countain the desired angle between the current position and the North Pole.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.PresetActions.AltitudePreset(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Resets the camera to a given altitude. The orientation is also reset if the new altitude is above a threshold (defined by minAltitudeToResetTilt).
            </summary>
            <param name="cause">Data on the event that caused this action.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource">
            <summary>
            Encapsulates the event source for the XInput controller.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource"/> class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.GetEventData(System.Int32,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.CheckZeroState">
            <summary>
            Returns true if the control is not being used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.Collide">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.NextFrame(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot)">
            <summary>
            Polls the device and submits events for anything active.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.TryGetEventId(System.String,System.Int32@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventId(System.String,System.Int32@)"/>.
            </summary>
            <param name="eventName"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.TryGetEventName(System.Int32,System.String@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventName(System.Int32,System.String@)"/>.
            </summary>
            <param name="eventId"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.IsModifier(System.Int32)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.CanModify(System.Int32,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.GamePadEventSource.Name">
            <summary>
            Gets the name used as the pair {Name}.{Event}
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource">
            <summary>
            Implementation of an event source for the keyboard.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource"/>
            class.
            </summary>
            <param name="actionSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.GetEventData(System.Int32,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.IsModifier(System.Int32)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.CanModify(System.Int32,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.KeyToEventId(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.RemoveModifiers(System.Windows.Forms.Keys)">
            <summary>
            Removes any modifiers from the specified key code.
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.IsKeyUsed(System.Windows.Forms.Keys)">
            <summary>
            Determines if a key is currently in use
            </summary>
            <param name="keyCode"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.KeyDown(System.Windows.Forms.Keys)">
            <summary>
            Handles a keypress by firing off the appropriate event.
            </summary>
            <param name="keyCode"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.KeyUp(System.Windows.Forms.Keys)">
            <summary>
            Handles a keypress by firing off the appropriate event.
            </summary>
            <param name="keyCode"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.HandleModifier(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Fires events based on state changes of a specified modifier.
            </summary>
            <param name="modifier"></param>
            <param name="key"></param>
            <param name="newState"></param>
            <param name="oldState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.HandleModifiers">
            <summary>
            Fires events based on state changes of any of the modifiers.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.NextFrame(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot)">
            <summary>
            Each frame we check to see if some other app has changed only the modifiers.
            This means that modifier events will fire off even if Virtual Earth 3D doesn't have focus.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.TryGetEventId(System.String,System.Int32@)">
            <summary>
            Tries to get the event id for the specified event name.
            </summary>
            <param name="eventName"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.TryGetEventName(System.Int32,System.String@)">
            <summary>
            Tries to get the event name for the specified event id.
            </summary>
            <param name="eventId"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.KeyboardEventSource.Name">
            <summary>
            Gets the name used as the pair {Name}.{Event}
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource">
            <summary>
            Implementation of an event source for the mouse.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.#ctor(Microsoft.MapPoint.Binding.ActionSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.ContributePointerPosition(Microsoft.MapPoint.Binding.EventData)">
            <summary>
            Contributes the current pointer position to the specified <see cref="T:Microsoft.MapPoint.Binding.EventData"/>.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.Registered">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.Unregistering">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.GetEventData(System.Int32,Microsoft.MapPoint.Binding.EventActivateState)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.IsModifier(System.Int32)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.CanModify(System.Int32,Microsoft.MapPoint.Binding.EventKey)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.TryConvertButtonToEvent(System.Windows.Forms.MouseButtons,Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent@)">
            <summary>
            Tries to convert System.Windows.Forms.MouseButtons to a MouseEvent.
            </summary>
            <param name="button"></param>
            <param name="mouseEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.GetKey(Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent)">
            <summary>
            Gets an <see cref="T:Microsoft.MapPoint.Binding.EventKey"/> appropriate for this class.
            </summary>
            <param name="mouseEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.ButtonDown(System.Windows.Forms.MouseButtons)">
            <summary>
            Called when a mouse button is pressed.
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.ButtonUp(System.Windows.Forms.MouseButtons)">
            <summary>
            Called when a mouse button is released.
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.LeftClick">
            <summary>
            Called when the mouse left button is pressed and released without the X or Y changing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.RightClick">
            <summary>
            Called when the mouse right button is pressed and released without the X or Y changing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.DoubleClick">
            <summary>
            Called when the mouse is double clicked.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.Wheel(System.Int32)">
            <summary>
            Called when the mouse wheel changes values.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.Move(System.Int32,System.Int32)">
            <summary>
            Called when the mouse moves.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MoveDelta(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.TryGetEventId(System.String,System.Int32@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventId(System.String,System.Int32@)"/>.
            </summary>
            <param name="eventName"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.TryGetEventName(System.Int32,System.String@)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Binding.EventSource.TryGetEventName(System.Int32,System.String@)"/>.
            </summary>
            <param name="eventId"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.GetPointerDirection(Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Gets the 3D location and direction of the current cursor X,Y.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.NextFrame(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot)">
            <summary>
            
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.Name">
            <summary>
            Gets the name used as the pair {Name}.{Event}
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.Velocity">
            <summary>
            The instantaneous mouse speed for the last frame, in pixels per second.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent">
            <summary>
            The events that the MouseEventSource can handle.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.X">
            <summary>
            Axis event sent for each change in the X axis value.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.Y">
            <summary>
            Axis event sent for each change in the Y axis value.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.Left">
            <summary>
            Activate and deactivate events sent for the left mouse button press and release.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.Middle">
            <summary>
            Activate and deactivate events sent for the middle mouse button press and release.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.Right">
            <summary>
            Activate and deactivate events sent for the right mouse button press and release.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.Wheel">
            <summary>
            Axis event sent for each change to the mouse wheel value.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.LeftClick">
            <summary>
            Event that is sent when the left mouse button has been pressed and released without the X or Y changing.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.RightClick">
            <summary>
            Event that is sent when the right mouse button has been pressed and released without the X or Y changing.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.LeftDoubleClick">
            <summary>
            Event that is sent when the left moue button has been double clicked.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.MouseEventSource.MouseEvent.SmoothWheel">
            <summary>
            Mouse wheel movement.  A smoothing process is applied to inputs for this event.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.TimeStep">
            <summary>
            Rendering step that snapshots time.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.TimeStep.#ctor(Microsoft.MapPoint.Rendering3D.RenderEngine)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.TimeStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.TimeStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Snapshots the current time and adds it to the scene state.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair">
            <summary>
            A RenderAndHitPair is a pair of objects: an object that is used for rendering and an object used for hit detection
            If the hitDetect is NULL, the 'renderable' mesh is used for rendering and hit detection
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.#ctor(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Graphics3D.RenderObjects.UIRenderObject,Microsoft.MapPoint.Graphics3D.RenderObjects.UIRenderObject,Microsoft.MapPoint.Rendering3D.UI.UIRenderGroup)">
            <summary>
            Ctor.
            </summary>
            <param name="host"></param>
            <param name="renderable"></param>
            <param name="hitDetect"></param>
            <param name="group"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.DoDefaultAction">
            <summary>
            Fake a click on a UI element.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Host">
            <summary>
            Gets the main Host object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Renderable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.HitDetect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.RenderDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Group">
            <summary>
            The UIManager only renders and evaluates hit detection if the group is enabled
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Enabled">
            <summary>
            The UIManager only renders and evaluates hit detection if the instance is enabled
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.DefaultAction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Role">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair.Bounds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.UI.UIHitInfo">
            <summary>
            A UIHitInfo structure contains information about a mouse click. It contains:
              p: screen coordinates in pixels
              v: screen coordinantes in the interval [-1,+1]
              obj: object hit by the click
              subsetId: if available, the mesh subset hit by the mouse click
            
            Note that the obj is the object rendered to the screen, not the object used for collision detection (since they can be different)
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIHitInfo.#ctor(System.Drawing.Point,Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Graphics3D.RenderObjects.UIRenderObject,System.Int32)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="v"></param>
            <param name="obj"></param>
            <param name="subsetId"></param>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIHitInfo.HitPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIHitInfo.HitPointV">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIHitInfo.RenderableObject">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.UI.UIHitInfo.RenderObjSubsetId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIHitInfo.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.UI.UIRenderGroup">
            <summary>
            A simple class that should be common to a given group of RenderAndHitPair objects.
            It is used to enable/disable groups of objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIRenderGroup.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIRenderGroup.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIRenderGroup.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.ViewSnapshotStep">
            <summary>
            Acts as the parent to any plug-ins that run inside view space.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ViewSnapshotStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.ViewSnapshotStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ViewSnapshotStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep">
            <summary>
            Step in the rendering pipeline that executes actors.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.#ctor(Microsoft.MapPoint.Rendering3D.RenderEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.AddActor(Microsoft.MapPoint.Rendering3D.Steps.Actors.Actor)">
            <summary>
            Adds an actor to the actor list.
            </summary>
            <param name="actor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.RemoveActor(Microsoft.MapPoint.Rendering3D.Steps.Actors.Actor)">
            <summary>
            Removes the specified actor from the actor list.
            </summary>
            <param name="actor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.Clear">
            <summary>
            Removes all actors.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.AddToRemoveList(Microsoft.MapPoint.Rendering3D.Steps.Actors.Actor)">
            <summary>
            Adds an actor to the list that will have OnRemove called on them.
            </summary>
            <param name="actor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.RemoveActors">
            <summary>
            Calls OnRemove for all actors that have been removed in a background thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Executes Update and Render on all of the actors.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Performs ray intersection testing on all actors.
            </summary>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.Intersects(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList)">
            <summary>
            Performs swept-sphere intersection testing on all actors.
            </summary>
            <param name="sweptSphere"></param>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.Dispose(System.Boolean)">
            <summary>
            Disposes all of the actors.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.ActorsStep.Actors">
            <summary>
            Get all the actors in the step.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor">
            <summary>
            Actor that is a line made up of multiple segments.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.#ctor(System.String,System.Boolean,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor"/> class.
            </summary>
            <param name="name"></param>
            <param name="useZBuffer"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.#ctor(System.String,System.Boolean,Microsoft.MapPoint.Geometry.VectorMath.Vector3D[],System.Drawing.Color,Microsoft.MapPoint.Binding.BindingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor"/> class.
            </summary>
            <param name="name"></param>
            <param name="useZBuffer"></param>
            <param name="points"></param>
            <param name="color"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.ChangeLine(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3F[],System.Drawing.Color)">
            <summary>
            Update the line data for this Actor.
            </summary>
            <param name="origin"></param>
            <param name="points"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.ChangeLine(Microsoft.MapPoint.Geometry.VectorMath.Vector3D[],System.Drawing.Color)">
            <summary>
            Update the line data for this Actor.
            </summary>
            <param name="points"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.ChangeLine(Microsoft.MapPoint.Geometry.VectorMath.Vector3D[],System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Update the line data for this Actor.
            </summary>
            <param name="points"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.ChangeLine(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3F[],System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Update the line data for this Actor.
            </summary>
            <param name="origin"></param>
            <param name="points"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.Render(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Renders this actor.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.Color">
            <summary>
            The color of the line.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.Width">
            <summary>
            The width of the line.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.Actors.LineActor.Mode">
            <summary>
            Gets or sets whether the input is in screen coordinates or world coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.DebugCenterPointStep">
            <summary>
            Debug plug-in to display a center point.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DebugCenterPointStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.DebugCenterPointStep"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.DebugBoundingBoxStep">
            <summary>
            Debug plug-in to display tile-ids on top of the tiles.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DebugBoundingBoxStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.DebugBoundingBoxStep"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.DebugCollisionTestStep">
            <summary>
            Step for displaying collisions.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DebugCollisionTestStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.DebugCollisionTestStep"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DebugCollisionTestStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.DebugCollisionTestStep.Active">
            <summary>
            Gets or sets the active state.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.DebugTileIdStep">
            <summary>
            Debug plug-in to display tile-ids on top of the tiles.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.DebugTileIdStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.DebugTileIdStep"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.PointerStep">
            <summary>
            A 3D rendering step that displays the appropriate cursor according to 
            the ActionCameraController. 
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.OverrideValidWindowsCursor(System.Windows.Forms.Cursor)">
            <summary>
            Gets the current cursor that is being rendered.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.#ctor(Microsoft.MapPoint.Rendering3D.Scene.StepManager,Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Binding.PointerEventSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.PointerStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.UpdatePointer(System.Int32,System.Int32)">
            <summary>
            Updates the pointer position.  This should be called from the UI thread.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.InvokeSetCursor(System.Windows.Forms.Cursor)">
            <summary>
            Sets the windows cursor.  All cursor sets should go through this 
            method so that this plug-in can keep track of the state.
            </summary>
            <param name="cursor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Implements OnExecute.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.ProcessHover(Microsoft.MapPoint.Rendering3D.State.TimeSnapshot,Microsoft.MapPoint.Rendering3D.WorldMemoryDataStore.WorldMemoryPrimitive,Microsoft.MapPoint.Rendering3D.Utility.WorldGeometry)">
            <summary>
            Process the Hover and HoverEnd events.
            </summary>
            <param name="time"></param>
            <param name="possibleHoverPrim"></param>
            <param name="possibleHoverGeom"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.Dispose(System.Boolean)">
            <summary>
            Implements Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.PointerWorldPosition">
            <summary>
            Get the pointer position on the surface, or null.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.PointerObjectWorldPosition">
            <summary>
            Get the pointer position on an object, the surface, or null.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.MouseOnTerrain">
            <summary>
            Flag indicating whether the current mouse position is on the terrain.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.MouseOnBuilding">
            <summary>
            Flag indicating whether the current mouse position is on a building.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.MouseOnAd">
            <summary>
            Flag indicating whether the current mouse position is on a ad.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.MouseOnPushpin">
            <summary>
            Flag indicating whether the current mouse position is on a pushpin
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.PointerPosition">
            <summary>
            Gets the position of the pointer on the screen.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.PointerClicked">
            <summary>
            Gets whether the pointer is clicked.
            NOTE: This is not very detailed... what is clicked?  Do we care?
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.CurrentCursor">
            <summary>
            Gets the current cursor that is being rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.Visible">
            <summary>
            Gets or sets whether the pointer should be drawn.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.PointerStep.CurrentWindowsCursor">
            <summary>
            Gets the current windows cursor.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener">
            <summary>
            Singleton trace listener that composites trace output into a fixed number of lines.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.LineCount">
            <summary>
            The number of lines supported in this listener.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.Instance">
            <summary>
            Gets or sets the singleton instance of this object.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.addedToListeners">
            <summary>
            True if the singleton instance has been added to the trace listeners.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.lines">
            <summary>
            The strings to display.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.variables">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.topLine">
            <summary>
            The index of the top most line in lines.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.Need">
            <summary>
            If an application wants to use this listener, it should call this.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.#ctor">
            <summary>
            Private constructor since the singleton instance should be used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.Write(System.String)">
            <summary>
            Implements TraceListener.Write.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.WriteLine(System.String)">
            <summary>
            Implements TraceListener.WriteLine.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.Write(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.Write(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.WriteLine(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.WriteLine(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.InformationTraceListener.ToString">
            <summary>
            Implements Object.ToString.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlStep">
            <summary>
             3D plug-in that is responsible for the 3D navigation control
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlStep"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlStep.ReleaseRenderObjects">
            <summary>
            Called when the render thread is shutting down and all graphics resources must be released.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlStep.UpdateNavigationControlObjects(System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Updated the position of all navigation control objects.
            </summary>
            <param name="scale">The new scale for the control [0,+1]</param>
            <param name="position">The position in screen coordinates [-1,+1]</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlStep.Enabled">
            <summary>
            Gets or sets whether the navigation control is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlUIElement">
            <summary>
            When any navigation control receives focus, all navigation control elements should light up (max opacity).
            This behavior is reflected in this class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlTiltRotateElement.UpdateRotation(Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Updates the navigation control rotation, making sure it is always pointing North
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.NavigationControl.NavigationControlTiltRotateElement.UpdateTilt(Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Updates the Navigation Control tilt to match the terrain orientation. To keep the control usable [clickable],
            a max tilt angle is used.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep">
            <summary>
            A 3D rendering step that adds the sky.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep.CreateAtmosphere">
            <summary>
            Creates the atmosphere renderable.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Implements OnExecute.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep.Dispose(System.Boolean)">
            <summary>
            Implements Dispose.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep.Cleanup">
            <summary>
            Called to release graphics resources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Atmospherics.SkyStep.ReleaseRenderObjects">
            <summary>
            Called when the render thread is shutting down and all graphics resources must be released.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.UI.UIStep">
            <summary>
            This class is responsible for managing UI elements and its interaction with the user.
            
            To create a new UI component, the following has to be done:
            
            1. Load a mesh with LoadRenderableObjects(). Make sure to pass a valid scaling transformation matrix so the object is properly scaled.
                To create a scale matrix, you can use the GetScaleToScreenMatrix() method.
            2. If applicable, repeat (1) and load a mesh that will be used for hit detection.
            3. Add a RenderAndHitPair to the UIManager, using the AddRenderAndHitPair() method.
            4. Create a class that extends the UIElement class and override any applicable methods.
                For instance, you can override the Update() method which is called by the Render Thread every frame;
                You can override the OnClickDown() to perform an operation when the mouse is clicked over the UI element.
                For more info on how to create a UIElement class, please see the UIElement documentation.
            5. Add an instance of the newly created UIElement to the UIManager, using AddElement()
            
                To update the state of any renderable object, modify the properties exposed by UIRenderableObject.
                 Properties include (but are not limited to) color information, position in camera space and screen space.
                 For a list of properties, see the UIRenderableObject documentation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.#ctor(Microsoft.MapPoint.Rendering3D.Scene.StepManager,Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Creates a new instance of UIManager
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.GetRenderableObjectByName(System.String)">
            <summary>
            Returns an object that is rendered to the screen, given its name
            </summary>
            <param name="name">The object's name</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.GetHitDetectObjectByName(System.String)">
            <summary>
            Returns an object that is rendered to an off-screen buffer, used only for hit-detect purposes.
            </summary>
            <param name="name">The related 'renderable' object's name, used to identify a render/hit pair.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.GetRenderAndHitPairByName(System.String)">
            <summary>
            Returns a RenderAndHitPair given the 'renderable' object's name.
            </summary>
            <param name="name">The renderable object's name</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.LoadObject(System.String,Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Loads a mesh from the default location for data files.
            </summary>
            <param name="name">The file name, also used to identify the object after its creation. The .x extension does not have to be specified.</param>
            <param name="device"></param>
            <returns>A UIRenderableObject containing the loaded mesh</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.GetScaleToScreenMatrix(System.String,System.Double,Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Given an object's name and its desired scale relative to the screen, returns the corresponding scaling matrix.
            </summary>
            <param name="obj">The file name, also used to identify the object after its creation. The .x extension does not have to be specified.</param>
            <param name="screenScale">a scale value (1.0 means the object should be as big as the screen)</param>
            <param name="device"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.GetScaleToScreenMatrix(Microsoft.MapPoint.Graphics3D.RenderObjects.UIRenderObject,System.Double)">
            <summary>
            Given a reference object and its desired screen size, returns the corresponding scale matrix.
            </summary>
            <param name="obj">The reference object used to calculate the scale matrix</param>
            <param name="screenXSize">The desired object's width in pixels</param>
            <returns>The scale matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.LoadRenderableObjects(System.String[],Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Graphics3D.Graphics3DDevice)">
            <summary>
            Loads multiple meshes, applying a scale and translation transformation.
            </summary>
            <param name="names">The list of filenames to load (the .x extension does not have to be specified). Each name is used to identify each UIRenderableObject.</param>
            <param name="scaleMatrix">The scaling matrix to be applied</param>
            <param name="control"></param>
            <param name="device"></param>
            <returns>A List of newly created UIRenderableObject. None of the objects are automatically added to the UIManager internal lists</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.AddRenderAndHitPair(Microsoft.MapPoint.Rendering3D.UI.RenderAndHitPair)">
            <summary>
            Adds a render/hit pair to the UIManager.
            </summary>
            <param name="pair">A RenderAndHitPair object.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.OnViewResize(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.OnMouseMove(Microsoft.MapPoint.Rendering3D.Utility.MouseEvent)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.OnMouseLeave">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.UpdateFocusState(Microsoft.MapPoint.Rendering3D.UI.UIElement)">
            <summary>
            UIElements are focused when one of its associated renderable objects are under the mouse cursor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.UpdateHoverState(Microsoft.MapPoint.Rendering3D.UI.UIElement,Microsoft.MapPoint.Rendering3D.UI.UIHitInfo)">
            <summary>
            Individual UIRenderableObjects have a hover state (mouse in/out), so individual UIRenderableObjects can be high ed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.OnMouseDown(Microsoft.MapPoint.Rendering3D.Utility.MouseEvent)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.OnMouseUp(Microsoft.MapPoint.Rendering3D.Utility.MouseEvent)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.OnMouseDoubleClick(Microsoft.MapPoint.Rendering3D.Utility.MouseEvent)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.AddElement(Microsoft.MapPoint.Rendering3D.UI.UIElement)">
            <summary>
            Adds a new UIElement to be managed by the UIManager
            </summary>
            <param name="element">A valid UIElement instance</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.RemoveElement(Microsoft.MapPoint.Rendering3D.UI.UIElement)">
            <summary>
            Removes a UIElement from the UIManager.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.UI.UIStep.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIStep.Host">
            <summary>
            
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.UI.UIStep.MouseMoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIStep.NumPairs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIStep.UpdateUI">
            <summary>
            Whether the UI should be updated (react to mouse events)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIStep.IsUIFocused">
            <summary>
            Whether the mouse pointer is currently on top of any UI element
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.UI.UIStep.Cursor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.UI.UIStep.MouseMovedDelegate">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.QueryRegion">
            <summary>
            Represents a region (a 4-point polygon in lat-long space) that should be used when searching for POIs with the viewpoint defined by the current globe control.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.QueryRegion.centerCandidateOffsets">
            <summary>
            When a query region can't be calculated using the 'virtual camera', a region is created around one of the center points defined by these offsets.
            Each offset is a Y-offset in screen coordinates [from 0 to 1].
            For instance, 0.5 = center of the screen; 0.99 = bottom of the screen
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.QueryRegion.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.QueryRegion.Create(Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.State.TimeSnapshot,Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Returns the QueryRegion for the current view.
            </summary>
            <returns>A QueryRegion instance</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.QueryRegion.RegionGivenCenterCandidates(System.Drawing.Point[],Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Given a list of screen-points candidates, returns a bounding-box centered around the first point in the candidates list that corresponds to
            a valid lat-lon value (when the given point 'hits' the globe).
            This method does not fail: if none of the candidates intersect the globe, the current camera lat/lon (at ground level) position is used.
            </summary>
            <param name="candidates">The list of screen coordinates to be used a center point. The first valid point is used.</param>
            <param name="host"></param>
            <param name="cameraData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.QueryRegion.RegionGivenCenter(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.Double)">
            <summary>
            Returns an axis-aligned (north up) lat-lon box around a given center point
            </summary>
            <param name="center">the bounding box center</param>
            <param name="cameraAltitude"></param>
            <returns>an array with 4 LatLonAlt instances, in clockwise order, starting from the top-left point.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.QueryRegion.LatLonAltFromScreenPosition(System.Int32,System.Int32,Microsoft.MapPoint.Rendering3D.Host,Microsoft.MapPoint.Rendering3D.State.CameraData)">
            <summary>
            Returns the Lat/Lon/Alt for a given screen position, given a virtual camera
            </summary>
            <param name="x">the screen X position</param>
            <param name="y">the screen Y position</param>
            <param name="host">trol</param>
            <param name="cameraData"></param>
            <returns>A LaLonAlt instance, null if not found.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.QueryRegion.RegionAroundCenter">
            <summary>
            True if the region is not directly calculated from the current view, but rather is just a region around the screen center.
            This may happen if the ground is not completely in view.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.QueryRegion.Points">
            <summary>
            The points defining the current query view.  Clockwise order starting with the upper left corner of the region.
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.QueryRegion.Center">
            <summary>
            The center of the query region.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CommunicationManager">
            <summary>
            Handles various events that are raised and handled throughout the engine.
            Can handle events, methods, and messages.  
            Events are asynchronous, and are fired and handled by user code.
            Methods are synchronous, and are fired and handled by user code.
            Messages are Windows Message Pump messages, and are handled by user code but raised by the pump.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.AttachToEvent(System.Guid,System.String,System.String,Microsoft.MapPoint.Rendering3D.CommunicationManager.EngineEvent)">
            <summary>
            Add an event handler. Multiple handlers may be attached to the same event, as long
            as they have unique names.  Returns false if the event already has a handler with that name.
            Look at the events specified in <see cref="T:Microsoft.MapPoint.Rendering3D.EngineEvents"/> for some valid eventIds.  By specifying new
            guids and eventIds, new event types may be created.
            </summary>
            <param name="guid">The grouping for the event.</param>
            <param name="eventId">The unique identifier for the event.</param>
            <param name="functionName">The string that will get passed back to the register.</param>
            <param name="function">The handler.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.AttachToMethod(System.Guid,System.String,Microsoft.MapPoint.Rendering3D.CommunicationManager.EngineMethod)">
            <summary>
            Add a method handler. Multiple handlers may be attached to the same method, as long
            as they have unique names.  Returns false if the method already has a handler with that name.
            </summary>
            <param name="guid">The grouping for the method.</param>
            <param name="methodName">The unique identifier for the method.</param>
            <param name="engineMethod">The handler.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.AttachToMessage(System.Int32,Microsoft.MapPoint.Rendering3D.CommunicationManager.WindowsMessagePumpProc)">
            <summary>
            Attach a handler for a Windows message pump message.
            </summary>
            <param name="msg">Message to listen for.</param>
            <param name="proc">Delegate to call.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.DetachFromEvent(System.Guid,System.String,System.String)">
            <summary>
            Remove an event handler.  Returns false if the event did not have a handler with this name.
            </summary>
            <param name="guid">The grouping for the event.</param>
            <param name="eventId">The unique identifier for the event.</param>
            <param name="functionName">Name of the function to be removed from the list of handlers for this event</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.DetachFromMethod(System.Guid,System.String)">
            <summary>
            Remove a method handler.  Returns false if the method did not have a handler with this name.
            </summary>
            <param name="guid"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.DetachFromMessage(System.Int32,Microsoft.MapPoint.Rendering3D.CommunicationManager.WindowsMessagePumpProc)">
            <summary>
            Remove a handler for a Windows message pump message.  Returns false if the message did not have this handler.
            </summary>
            <param name="msg">Message Id.</param>
            <param name="proc">Delegate to remove.</param>
            <returns>Whether a delegate was removed.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.FireEvent(System.Guid,System.String)">
            <summary>
            Fire an event.  Events are executed asynchronously.  Return false if no handler exists.
            </summary>
            <param name="guid">The grouping for the event.</param>
            <param name="eventId">The unique identifier for the event.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.FireEvent(System.Guid,System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameterSet)">
            <summary>
            Fire an event.  Events are executed asynchronously.  Return false if no handler exists.
            </summary>
            <param name="guid">The grouping for the event.</param>
            <param name="eventId">The unique identifier for the event.</param>
            <param name="eventInfo">Object containing any information that needs to be passed to the event handler.  
            The set is wrapped in an unnamed CommunicationParameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.FireEvent(System.Guid,System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Fire an event.  Events are executed asynchronously.  Return false if no handler exists.
            </summary>
            <param name="guid">The grouping for the event.</param>
            <param name="eventId">The unique identifier for the event.</param>
            <param name="eventInfo">Object containing any information that needs to be passed to the event handler.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.FireEventInternal(System.Guid,System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Fire an event.  Events are executed asynchronously.  Return false if no handler exists.
            </summary>
            <param name="guid">The grouping for the event.</param>
            <param name="eventId">The unique identifier for the event.</param>
            <param name="eventInfo">Object containing any information that needs to be passed to the event handler.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.InvokeMethod(System.Guid,System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameterSet)">
            <summary>
            Invoke a method.  Methods are executed synchronously, and may have return values.
            </summary>
            <param name="guid">The grouping for the method.</param>
            <param name="methodId">The unique identifier for the method.</param>
            <param name="param">Object containing any information that needs to be passed to the method handler.  
            The set is wrapped in an unnamed CommunicationParameter.</param>
            <returns>An object containing information returned from the method handler.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.InvokeMethod(System.Guid,System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Invoke a method.  Methods are executed synchronously, and may have return values.
            </summary>
            <param name="guid">The grouping for the method.</param>
            <param name="methodId">The unique identifier for the method.</param>
            <param name="param">Object containing any information that needs to be passed to the method handler.</param>
            <returns>An object containing information returned from the method handler.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.GetSingleEvent(System.Guid,System.String)">
            <summary>
            Gets the event data for a single event.
            </summary>
            <param name="guid"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.RemoveSingleEvent(System.Guid,System.String)">
            <summary>
            Removes a single event.
            </summary>
            <param name="guid"></param>
            <param name="eventId"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.DetachAll">
            <summary>
            Removes all event, message, and method handlers.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CommunicationManager.WindowsMessagePumpProc">
            <summary>
            Delegate for handling windows messages.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="msg">Message identifier.</param>
            <param name="wParam">WParam.</param>
            <param name="lParam">LParam.</param>
            <param name="result">Result.</param>
            <returns>Whether or not this message is handled and the result should be returned to the pump.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CommunicationManager.EngineEvent">
            <summary>
            Delegate for handling asynchronous events from the CommunicationManager.
            </summary>
            <param name="functionName">The name that this handler was given when attached.</param>
            <param name="param">An object specified by the firer of the event.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CommunicationManager.EngineMethod">
            <summary>
            Delegate for handling synchronous method calls from the CommunicationManager.
            </summary>
            <param name="param">An object specified by the invoker of the method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet">
            <summary>
            A set of named parameters to pass to a CommunicationsManager event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet"/>
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet"/>
            </summary>
            <param name="capacity">Specifies the initial number of parameters this set will contain.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(Microsoft.MapPoint.Rendering3D.CommunicationParameter)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="parameter">The parameter to add.  Must be named.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(System.String,Microsoft.MapPoint.Rendering3D.Utility.TileId)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(System.String,Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(System.String,Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(System.String,System.Boolean)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(System.String,System.Int32)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(System.String,System.Double)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Add(System.String,System.String)">
            <summary>
            Add a new named parameter to the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Contains(System.String)">
            <summary>
            Determines whether the set contains a parameter with this name.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Remove(System.String)">
            <summary>
            Removes a named parameter from the set.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.TryGetValue(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameter@)">
            <summary>
            Retrieves the value of a named parameter.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.GetEnumerator">
            <summary>
            Get all parameters in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get all parameters in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.ToString">
            <summary>
            ToString();
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Names">
            <summary>
            Returns all names in the set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Values">
            <summary>
            Returns all the parameter values in the set.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CommunicationParameterSet.Item(System.String)">
            <summary>
            Add or retrieve a named parameter.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter">
            <summary>
            A single parameter for a CommunicationsManager event or method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,Microsoft.MapPoint.Rendering3D.Utility.TileId)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,Microsoft.MapPoint.Rendering3D.LatLonAlt)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,System.Double)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.#ctor(System.String,Microsoft.MapPoint.Rendering3D.CommunicationParameterSet)">
            <summary>
            Constructs a new <see cref="T:Microsoft.MapPoint.Rendering3D.CommunicationParameter"/>.
            </summary>
            <param name="name">The name of the parameter.  May be null to indicate it is nameless.</param>
            <param name="set">A set of parameters.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.CommunicationParameter.ToString">
            <summary>
            ToString.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CommunicationParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.CommunicationParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController">
            <summary>
            A camera controller that moves directly from one point to another.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.DefaultSpeed">
            <summary>
            Arbitrarily picked 12 seconds to get around the globe at the default altitude.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.MoveCamera(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Performs the operations necessary for the next frame.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.KeyDown(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.KeyUp(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.Speed">
            <summary>
            Gets the speed in meters/second at the default altitude.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.MovementForward">
            <summary>
            Gets and sets a multiplier of speed that defines forward and 
            backward motion.  1 means forward, 0 means no motion, -1 means
            backward.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.MovementRight">
            <summary>
            Gets and sets a multiplier of speed that defines left and right
            motion.  1 means right, 0 means no motion, -1 means left.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.MovementIn">
            <summary>
            Gets and sets a multiplier of speed that defines zooming in
            and out motion.  1 means zoom in, 0 means no motion, -1 means out.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.TiltageUp">
            <summary>
            Gets and sets a multiplier of speed that defines tilting
            up toward the horizon and back down at the earth.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Control.DirectCameraController.RotationRight">
            <summary>
            Gets and sets a multiplier of speed that defines rotation.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep">
            <summary>
            3D step that adds a globe to the scene.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.OnInitialize(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Initializes the elements in this step.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Draws the elements in this step.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Derived steps may override this method to perform ray intersection testing.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.Intersects(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList)">
            <summary>
            Derived steps may override this method to perform swept-sphere intersection testing.
            </summary>
            <param name="sweptSphere"></param>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.ReleaseRenderObjects">
            <summary>
            Called when the render thread is shutting down and all graphics resources must be released.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.Dispose(System.Boolean)">
            <summary>
            Derived classes may override this if they have members that need to be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.GlobeStep.RenderingBlueMarble">
            <summary>
            Flag indicating whether the blue marble texture is being rendered.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.LightingStep">
            <summary>
            3D plug-in that handles lighting the scene.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.LightingStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.LightingStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.LightingStep.OnRestore">
            <summary>
            Restores the elements in this step.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.LightingStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Draws the elements in this step.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.LightingStep.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color to use.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.LightingStep.DiffuseLightColor">
            <summary>
            Gets or sets the diffuse light color to use.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.Steps.LightingStep.SpecularLightColor">
            <summary>
            Gets or sets the diffuse light color to use.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.ScreenStep">
            <summary>
            Acts as the parent to any plug-ins that run inside screen space.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScreenStep.#ctor(Microsoft.MapPoint.Rendering3D.Scene.StepManager,Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.ScreenStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScreenStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Sets up the view matrix and calls the children.
            </summary>
            <param name="sceneState"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScreenStep.ReleaseRenderObjects">
            <summary>
            Called when the render thread is shutting down and all graphics resources must be released.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ScreenStep.Dispose(System.Boolean)">
            <summary>
            Derived classes may override this if they have members that need to be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Steps.ViewStep">
            <summary>
            Acts as the parent to any plug-ins that run inside view space.
            </summary>
            <TODO>
            TODO: DBuerer: View step does very little and should probably be gotten rid of so that it isn't wasting time.
            </TODO>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ViewStep.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.Steps.ViewStep"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.Steps.ViewStep.OnExecute(Microsoft.MapPoint.Rendering3D.Scene.SceneState)">
            <summary>
            Sets up the view matrix and calls the children.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.CameraParameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.TransitionTime">
            <summary>
            Total length of time this flight should take in seconds.  This value may be modified slightly by the 
            acceleration and deceleration properties.  If this value is specified, <see cref="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.Speed"/> is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.Speed">
            <summary>
            Transition speed as a fraction of the maximum.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.AccelPeriod">
            <summary>
            Length of acceleration phase as a fraction of the total flight distance.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.DecelPeriod">
            <summary>
            Length of deceleration phase as a fraction of the total flight distance.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.MinAccelSpeed">
            <summary>
            Speed at at start of acceleration phase as percent of the speed at the end of the acceleration phase.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.MinDecelSpeed">
            <summary>
            Speed at at end of deceleration phase as percent of the speed at the start of the deceleration phase.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.TourMode">
            <summary>
            Sets various camera parameters to values suitable for the tours feature.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.Event">
            <summary>
            If defined, fire a script event (OnFlyToEnd) when the camera movement ends. The value assigned to Event will be passed in the event data.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.PoiLatitude">
            <summary>
            Along with PoiLongitude, this specifies in degrees a 'point of interest' near the destination of the flight
            which may be used when TourMode=true to help determine where the camera should look during the flight. 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.CameraParameters.PoiLongitude">
            <summary>
            See PoiLatitude.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.Control.OnFlyToEndStatus">
            <summary>
            Status codes for OnFlyToEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.OnFlyToEndStatus.Collided">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.OnFlyToEndStatus.Cancelled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.OnFlyToEndStatus.Arrived">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.Control.OnFlyToEndStatus.AlreadyThere">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.RenderEngine">
            <summary>
            The 3D render engine owns all of the state for rendering in 3D.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.CapabilitiesChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the graphics device changes capabilities
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.GetControlStateForReload(System.Drawing.Size@,System.Drawing.Point@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Gets the current control state variables in a single operation.  Should only be called when
            reloading the control on the render thread.
            </summary>
            <param name="size">The size of the viewport.</param>
            <param name="position">The top left corner of the control in screen coordinates.</param>
            <param name="handle">The handle of the Host's immediate control.</param>
            <param name="topLevelHandle">The process's top-level handle.</param>
            <returns>True if the size changed since the last time this function was called.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.GetTick">
            <summary>
            Gets the current timer tick in .NET Framework ticks which are each 
            100 nanosecond ticks. 
            Note that it is better to use the SceneState's TimeSnapshot
            since it will provide consistent time with the rest of the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.BeginTraceEvent(Microsoft.MapPoint.Graphics3D.RenderThreadTraceEventType)">
            <summary>
            Begin tracing an event that has a duration.  Logged interactively.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.BeginTraceEvent(Microsoft.MapPoint.Graphics3D.RenderThreadTraceEventType,System.Int64)">
            <summary>
            Begin tracing an event that has a duration and a value.  Logged interactively.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.EndTraceEvent(Microsoft.MapPoint.Graphics3D.RenderThreadTraceEventType)">
            <summary>
            Stop tracing an event that has a duration.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.RenderEngine"/> class.
            </summary>
            <param name="host">A valid instance of Host.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.Reset(System.Boolean)">
            <summary>
            Clear state stored in the render engine.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.InitializeDeviceObjects(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Called when any objects related to the specified device should be initialized.
            </summary>
            <param name="progress">Expecting to be in its own progress area.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.RestoreDeviceObjects">
            <summary>
            Called when any objects related to the specific device should be reloaded.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.AddInvoke(Microsoft.MapPoint.Rendering3D.InvokeHelper)">
            <summary>
            Add a method to be executed on the render thread.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.StartRenderThread">
            <summary>
            Called to force creation of the render thread if it hasn't already been loaded.
            This will have no effect if the render thread has already begun.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.ShutDownRenderThread">
            <summary>
            Shuts down the render thread.  This may be called before calling GlobeControl.Dispose, but it is not neccessary to
            and is otherwise not recommended.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.ManuallyInitializeRender">
            <summary>
            Manually initializes rendering rather than using the built-in render thread.
            After initializing this way, each frame must be rendered with ManuallyRenderNextFrame.
            The method StartRenderThread should not be used with this method.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.ManuallyUninitializeRender">
            <summary>
            Manually unitializes rendering after it has been set up with ManuallyInitializeRender.
            Should not be used with StartRenderThread or ShutDownRenderThread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.ManuallyRenderNextFrame">
            <summary>
            Manually renders the next frame rather than letting the built-in render thread handle it.
            This should be called after a call to ManuallyInitializeRender, and should not be
            used in conjunction with StartRenderThread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.Render">
            <summary>
            Called when the frame is happening.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.RenderInternal">
            <summary>
            Called when the frame is happening.
            </summary>
            <returns>True if the frame was actually rendered.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.OnResize(System.Drawing.Size)">
            <summary>
            Performs any resize related steps and raises the Resize event.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.OnResized(System.Drawing.Size)">
            <summary>
            Performs any resize related steps and raises the Resize event.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.ReacquireHandle">
            <summary>
            Tries to get the top-level window handle from CurrentProcess.MainWindowHandle.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.FireOnFirstFrameRendered">
            <summary>
            Raises the FirstFrameRendered event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.FireOnInitialized">
            <summary>
            Raises the Initialized event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.FireOnControlReset">
            <summary>
            Raises the ControlReset event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.FireOnHardwareCapabilitiesChanged(System.EventArgs)">
            <summary>
            Raises the HardwareCapabilitiesChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.RenderEngine.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.RenderEngine.Resize">
            <summary>
            Occurs after the view resizes.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.RenderEngine.FirstFrameRendered">
            <summary>
            Occurs on the render thread after the first frame has been 
            rendered.  This is important for initialization that depends on 
            values that are set up during the first frame render.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.RenderEngine.Initialized">
            <summary>
            Occurs when the control is fully set up and ready to use.  Fires on the render thread.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.RenderEngine.ControlReset">
            <summary>
            Occurs on the render thread when the Host's control is reset.  
            This happens if GlobeControl.ResetControl is called or if the 
            hardware classification changes.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Rendering3D.RenderEngine.HardwareCapabilitiesChanged">
            <summary>
            Occurs when the hardware capabilities or classification change.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.StepManager">
            <summary>
            Gets the plug-in manager that holds all of the steps that will be called on a frame.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.SupportsAdvancedRenderFeatures">
            <summary>
            Returns a flag indicating whether advanced render features should be used.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.PreviousSceneState">
            <summary>
            Gets the scene state of the previous frame.  The scene state will 
            only be swapped into this position once the frame is complete.  
            Note that if a SceneState looks at its RenderEngine's 
            PreviousSceneState, it will not see itself.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.Graphics">
            <summary>
            Gets the graphics engine proxy that exposes lower-level graphics properties and methods.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.GotHardwareDevice">
            <summary>
            Gets whether or not we have a hardware device.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.HardwareClassification">
            <summary>
            Gets or sets the hardware classification for this machine.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.Position">
            <summary>
            Gets the top left corner of the view in screen coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.Size">
            <summary>
            Gets the size of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.TopLevelHandle">
            <summary>
            The handle of this process's top-level window.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.ControlHandle">
            <summary>
            The handle of the Host's immediate control.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.IsFirstFrameRendered">
            <summary>
            Gets whether or not the first frame has been rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.FirstRun">
            <summary>
            This is a flag indicating whether the control is being loaded from the default user config
            settings or from a loaded config file.  It keys off of the hardware classification setting.
            If the hardware classification is Unknown this flag is set to true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.UseEpitomeTextures">
            <summary>
            Indicates whether this machine supports epitome.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.RenderEngine.MemoryCacheSizeBytes">
            <summary>
            Returns the memory cache size.  Passing in a nonpositive value will cause the system
            to automatically calculate a value based on physical memory.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.RenderEngine.ResizeHandler">
            <summary>
            Delegate to handle when the view is resized.
            </summary>
            <param name="size"></param>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GlobeControl">
            <summary>
            Control for a 3D globe.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GlobeControl.alreadyLoadedScreen">
            <summary>
            A bitmap that should be displayed if the control has already been loaded in this process.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.GlobeControl"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.#ctor(Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.GlobeControl"/> class.
            </summary>
            <param name="initializationOptions">The structure containing options to use for control creation.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.GetSetting(System.String)">
            <summary>
            Gets a setting value. Used by derived classes to store user settings with globe control.
            </summary>
            <param name="settingName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.SetSetting(System.String,System.Object)">
            <summary>
            Sets a setting value. Used by derived classes to store user settings with globe control.
            </summary>
            <param name="settingName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.SetHostUIThreadYieldCallback">
            <summary>
            Called when the globe control needs to set the callback on Host.UIThreadYield
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.SetTimerCallback">
            <summary>
            If this is displaying an error message the text cannot be set until the timer
            callback has happened. This gives the control's host time to set the control 
            in print mode if needed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.TimerCallback(System.Object)">
            <summary>
            Tells the control it is ok to start using the error message and
            invalidates the control so that another paint message can be
            processes
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnUIThreadYield(System.Int32)">
            <summary>
            Called when the time should be yielded to the UI thread.
            </summary>
            <param name="timeoutInMilliseconds"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnHandleCreated(System.EventArgs)">
            <summary>
            Raised when the window handle is created.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnCreateControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnReadyToPaint">
            <summary>
            Received after the control is ready for painting.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.ManualInitialize">
            <summary>
            Can be called to manually force initialization rather than waiting for the first paint event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.Initialize">
            <summary>
            Initialize the state of the GlobeControl.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.HostCaptureScreenshot">
            <summary>
            Captures a screenshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.PickupGeometry(System.String,System.String)">
            <summary>
            Picks up the specified geometry for movement.
            </summary>
            <param name="layerId"></param>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.CheckIfVersionUpdated">
            <summary>
            Checks to see if the currently running GlobeControl is a newer version than the one 
            last run. This allows the control to clean up old resources.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.DoVersionUpdate(System.Version)">
            <summary>
            Called when the user runs the control after it has been updated to a new version
            </summary>
            <param name="lastRunVersion">The last version of the control that has been run by the user</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.ResourceLoadError">
            <summary>
            Displays the resource load error dialog
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.InitializeToolTips">
            <summary>
            Initialize tooltip support.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.Uninitialize">
            <summary>
            Called when the control needs to dispose all the resources it owns.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.LoadStartingCameraValues">
            <summary>
            Loads any set starting camera values and set them.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.SaveSettings">
            <summary>
            Saves current settings to a config file
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.ResetControl">
            <summary>
            Called when the control needs to reset without being reinstantiated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.Dispose(System.Boolean)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.HandleUnrecoverableError(System.String,System.String)">
            <summary>
            Handles an event inside the UI thread.
            </summary>
            <param name="error"></param>
            <param name="details"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.InvokeHandleUnrecoverableError(System.String,System.String)">
            <summary>
            Invokes event handling back to the UI thread.
            </summary>
            <param name="error"></param>
            <param name="details"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.UpdateTooltipActiveState(System.Boolean)">
            <summary>
            Updates the state of tooltips.
            </summary>
            <param name="state">Whether tooltips should be active.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.UpdateTooltip(System.String,System.String)">
            <summary>
            Displays a tooltip at the current cursor position.
            </summary>
            <param name="title">The tooltip title.</param>
            <param name="description">The tooltip text.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.SetText(System.Globalization.CultureInfo)">
            <summary>
            Propagates information about the culture to parts of the globe control
            </summary>
            <param name="currentCulture"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.AttachMessageHandler(System.Int32)">
            <summary>
            Attach a messag handler
            </summary>
            <param name="msg">Message to listen for</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.DetachMessageHandler(System.Int32)">
            <summary>
            Remove a message handler
            </summary>
            <param name="msg">Message Id</param>
            <returns>Whether the last one was removed</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.DestroyHandle">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.DestroyHandle"/>.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.CreateAccessibilityInstance">
            <summary>
            Overridden to return the custom AccessibleObject 
            for the entire chart.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Prevents screen repaint flicker
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.ForcePaint">
            <summary>
            Forces an immediate call to OnPaint.  Will fail if the client size is not yet set.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.SetAlreadyLoaded(System.Drawing.Bitmap)">
            <summary>
            Marks the control as already having been loaded.  A static bitmap is provided as the background.
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnPaintPrint(System.Windows.Forms.PaintEventArgs,System.String)">
            <summary>
            Derived classes may overload this method to change the behavior of 
            what the control does when it gets loaded multiple times.  Default 
            behavior is to copy the active instance's screen with warning text 
            about not being able to have multiple instances.
            </summary>
            <param name="e"></param>
            <param name="text"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnPaintLoading(System.Windows.Forms.PaintEventArgs,System.String,Microsoft.MapPoint.Rendering3D.GlobeControl.PaintLoadingFlags,System.Single,System.String)">
            <summary>
            Derived classes may override this method to implement their own loading 
            screen.  
            </summary>
            <param name="e"></param>
            <param name="text">Primary informative text about the loading process.</param>
            <param name="flags">Flags defining how the loading screen should be drawn.</param>
            <param name="progressPercent">0-1 for percentage of loading progress.</param>
            <param name="progessMessage">Message to go along with loading progress.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the control is told to paint.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnPrint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when the control is told to print.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.CopyBitmap(System.Drawing.Bitmap)">
            <summary>
            Copies a bitmap across appdomains.
            </summary>
            <param name="bitmapToCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnParentChanged(System.EventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)"/>.
            </summary>
            <remarks>We need to know when the parent form has moved on the 
            screen so that we can create owned windows if we want to.  To 
            handle this we hook into the parent form's Move event so we have 
            to switch if the parent form switches.</remarks>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnResize(System.EventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseRawRelative(Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs)">
            <summary>
            Overrides <see cref="M:Microsoft.MapPoint.Rendering3D.Control.RawInputControl.OnMouseRawRelative(Microsoft.MapPoint.Rendering3D.Control.RawMouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseEnter(System.EventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnMouseLeave(System.EventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnGotFocus(System.EventArgs)">
            <summary>
            Called when the control gets focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.OnLostFocus(System.EventArgs)">
            <summary>
            Called when the control loses focus.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.Error(System.String)">
            <summary>
            Called to handle an error that must be relayed to the user.
            </summary>
            <param name="errorMessage"></param>        
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.ShowPermissionsForm(System.Uri[],System.Security.Cryptography.X509Certificates.X509Certificate,Microsoft.MapPoint.Rendering3D.Security.CustomFormClosed)">
            <summary>
            Shows the permission form. This needs to be done in the same app domain as the GlobeControl
            or we will get an exception on closing if we're hosted in a WinForms control.
            </summary>
            <param name="uris">The uris to request permission for</param>
            <param name="certificate">The certificate associated with this request, if any</param>
            <param name="customFormClosed">Called when the form closes</param>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.Host">
            <summary>
            Returns the interactive object for the Virtual Earth 3D system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.HostDomain">
            <summary>
            Returns the AppDomain that the Host object resides in.  This is generally either the primary
            AppDomain or the AppDomain passed into the GlobeControl constructor.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.UseDefaultConfiguration">
            <summary>
            Gets or sets a flag indicating whether the control should use the default the user configuration settings.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.SaveUserSettings">
            <summary>
            Gets or sets a flag indicating whether the control should write out a user configuration file on shutdown.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.HostLoadFailed">
            <summary>
            Gets whether the graphics engine failed to instantiate.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.HostValid">
            <summary>
            Flag indicating whether the map control is was created correctly, that is, it was not previously
            loaded into this process, and the graphics engine did not fail on creation.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.HostAlreadyLoaded">
            <summary>
            Gets whether the Host is already loaded in this process or not.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.HardwareAccelerationEnabled">
            <summary>
            Gets whether a hardware grahics device was obtained.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.RaiseLatLongEventOnMouseDown">
            <summary>
            Gets whether we should raise a lat/long selection event on next mouse down.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.PersistentCacheFileSize">
            <summary>
            Gets size of the cache file.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.PersistentCacheIsFullAccess">
            <summary>
            Gets whether we have full access to the cache.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.ActiveHost">
            <summary>
            The currently active host object.  This will refererence the 
            first host that is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.IsWebBased">
            <summary>
            Flag indicating whether the control is hosted in a web page.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GeometryPickedUp">
            <summary>
            Gets whether any geometry is picked up.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.FixedView">
            <summary>
            Gets or sets whether the globe can be interacted with or not.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.FirstFrameRendered">
            <summary>
            Gets whether or not the first frame has been rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.VersionUpdated">
            <summary>
            Returns whether this is the first run for the current user after a new version has been installed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.PrintingMode">
            <summary>
            Flag indicating whether the map control is being used in VE's 'custom printing' mode.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.StartLatitude">
            <summary>
            Camera start latitude in degrees, only functional if assigned before control is created
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.StartLongitude">
            <summary>
            Camera start longitude in degrees, only functional if assigned before control is created
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.ForceStartAltitudeToAboveGround">
            <summary>
            If true, the StartAltitude will be interpreted as a distance from the ground, and will be maintained
            as data loads until the user gives input.  This is only functional if assigned before control is created.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.StartAltitude">
            <summary>
            Camera start altitude in meters, only functional if assigned before control is created
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.StartPitch">
            <summary>
            Camera start pitch in degrees, only functional if assigned before control is created
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.StartHeading">
            <summary>
            Camera start heading in degrees, only functional if assigned before control is created
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.BuildDescription">
            <summary>
            The AssemblyConfiguration attribute value for this assembly.
            Returns an empty string if not set.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GlobeControl.PaintLoadingFlags">
            <summary>
            Flags defining how OnPaintLoading should draw.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GlobeControl.PaintLoadingFlags.None">
            <summary>
            No special commands for paint loading.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GlobeControl.PaintLoadingFlags.TextIsError">
            <summary>
            Included if the text being passed in is error text.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Rendering3D.GlobeControl.PaintLoadingFlags.ClearOnly">
            <summary>
            Included if the control should just be cleared and no loading or error information should be displayed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions">
            <summary>
            A set of parameters than can be used to define how the GlobeControl is created.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.#ctor(System.AppDomain)">
            <summary>
            Constructor sets <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.UseReferenceDevice"/> == false,
            <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.DelayRenderThreadCreation"/> == false;
            <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.UseMultithreadedDevice"/> == false;
            <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.AllowImmersiveAds"/> == true;
            and <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.PersistentCachePath"/> == null;
            </summary>
            <param name="hostDomain">Initializes <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.HostDomain"/></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.#ctor">
            <summary>
            Constructor sets <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.HostDomain"/> == null, 
            <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.UseReferenceDevice"/> == false,
            <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.DelayRenderThreadCreation"/> == false;
            <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.UseMultithreadedDevice"/> == false;
            <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.AllowImmersiveAds"/> == true;
            and <see cref="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.PersistentCachePath"/> == null;
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.HostDomain">
            <summary>
            An AppDomain that the control's Host object and PlugIns will be loaded into.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.UseReferenceDevice">
            <summary>
            A boolean flag indicating whether the globe control should 
            create a render engine using a reference device.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.UseMultithreadedDevice">
            <summary>
            A boolean flag indicating whether the globe control should 
            create a render engine using a device that allows multithreaded 
            access.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.AllowImmersiveAds">
            <summary>
            A boolean flag indicating whether the control should
            allow the display of ads.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.DelayRenderThreadCreation">
            <summary>
            A boolean flag indication whether the control's host should delay
            the render thread creation until it receives an explicit call to 
            Host.StartRenderThread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GlobeControl.GlobeControlInitializationOptions.PersistentCachePath">
            <summary>
            A string that indicates where the cache should live.  If null, the system uses the default.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.GeometryManager">
            <summary>
            Creates and maintains geometry, including polylines, polygons, labels, and pushpins.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Ctor.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.AddGeometry(Microsoft.MapPoint.Rendering3D.Utility.WorldGeometry)">
            <summary>
            Adds a WorldGeometry item, for example a pushpin or polyline, to the manager.
            </summary>
            <param name="geometry">PushpinGeometry, PolylineGeometry, LabelGeometry, or PolygonGeometry.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.RemoveGeometry(System.String,System.String)">
            <summary>
            Removes WorldGeometry
            </summary>
            <param name="layerId">Layer Id</param>
            <param name="id">Geometry Id</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.GetGeometry(System.String,System.String)">
            <summary>
            Gets a geometry object.
            </summary>
            <param name="layerId">Layer Id</param>
            <param name="id">Geometry Id</param>
            <returns>WorldGeometry Object (may be marshalled and should be considered readonly)</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.GetGeometry(System.String)">
            <summary>
            Gets all the geometry objects in a layer.
            </summary>
            <param name="layerId">Layer Id</param>
            <returns>Enumerable of WorldGeometry Objects (may be marshalled and should be considered readonly)</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.GetGeometry">
            <summary>
            Gets all the geometry objects in the manager.
            </summary>
            <returns>Enumerable of WorldGeometry Objects (may be marshalled and should be considered readonly)</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.ContainsGeometry(System.String,System.String)">
            <summary>
            Tests whether a geometry exists or not
            </summary>
            <param name="layerId"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.Clear">
            <summary>
            Removes all geometry.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.AddLayer(System.String)">
            <summary>
            Adds a layer to the manager.
            </summary>
            <param name="layerId">Layer to add</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.RemoveLayer(System.String)">
            <summary>
            Removes a layer (and all contained geometry).
            </summary>
            <param name="layerId">Layer to remove</param>
            <returns>If a layer was removed</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.SetLayerZIndex(System.String,System.Int32)">
            <summary>
            Sets a layer's zIndex.
            </summary>
            <param name="layerId">Layer to change</param>
            <param name="zIndex">zIndex</param>
            <returns>If a layer was updated</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.ContainsLayer(System.String)">
            <summary>
            Finds a layer by id.
            </summary>
            <param name="layerId">Id of layer to find</param>
            <returns>Layer being managed, or null</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.ClearLayer(System.String)">
            <summary>
            removes all geometry from a layer, but leaves the layer.
            </summary>
            <param name="layerId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.GetGeometry(Microsoft.MapPoint.Geometry.Geometry2.Box2,System.Byte)">
            <summary>
            Retrieves previously added geometry within the specified box at the specified zoom level.
            </summary>
            <param name="latLonBox">A box in WGS84 lat/long degrees specifying a ground extent to search.</param>
            <param name="zoomLevel">The zoom level to search.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.SetGeometrySelected(System.String,System.String,System.Boolean)">
            <summary>
            Sets the indicated geometry to the given selected state.
            </summary>
            <param name="layerId"></param>
            <param name="id"></param>
            <param name="selected">If true, geometry will be set to selected, and unselected if false.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.GeometryManager.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.GeometryManager.IsBusy">
            <summary>
            Returns true if the manager is currently processing previous requests.  The user need not wait for this to be false,
            but if it is true previous requests may not be finished.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Rendering3D.WorldEngine">
            <summary>
            Manages interaction with settings, the world, and objects in it.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.#ctor(Microsoft.MapPoint.Rendering3D.Host)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Rendering3D.WorldEngine"/> class.
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetTimeSnapshot">
            <summary>
            Gets the timestamp of the last scene rendered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.AddProgressProvider(Microsoft.MapPoint.Rendering3D.IDataProgress)">
            <summary>
            Adds the plugIn to the list of plugInsthat will be checked for data load progress.
            </summary>
            <param name="progressProvider"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.RemoveProgressProvider(Microsoft.MapPoint.Rendering3D.IDataProgress)">
            <summary>
            Removes the plugIn from the list of plugIns that should be checked for 
            data download progress.
            </summary>
            <param name="progressProvider"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.CancelLoadEverything">
            <summary>
            Cancels a LoadEverything call currently being executed.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.LoadEverything">
            <summary>
            Makes sure all the data for the previous camera position is loaded.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.LoadEverything(System.Boolean)">
            <summary>
            Makes sure all the data for the previous camera position is loaded.
            </summary>
            <param name="returnIfStillLoading">This method will cancel the current busy-wait and return false if the control is positively loading data.</param>
            <returns>A LoadEverythingEnum value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ReleaseMemory">
            <summary>
            Attempts to free up system resources.  Will not release memory that is being used, so
            depending on the current view and state more or less resources may be freed.  Calling this
            function again after a period of time may free additional resources.  Calling this function 
            unnecessarily may impair performance.  Working set may not be directly affected.
            </summary>
            <remarks>Working set is determined by the operating system, and represents the amount of
            physical memory that the operating system thinks the process may need now or in the future.  
            It does not necessarily reflect actual memory usage at any given time, especially if the 
            system is not under memory pressure, and may not be reduced by calling this function.</remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.AttachWorldDateTimeToNow">
            <summary>
            Attaches the world date/time to the current date/time.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.OverrideValidWindowsCursor(System.Windows.Forms.Cursor)">
            <summary>
            Sets the default 2d cursor to use for when the pointer is in a valid state.  Pass null to stop overriding.
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetWindowsCursor">
            <summary>
            Gets the current system cursor for the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.SetWindowsCursor(System.Windows.Forms.Cursor)">
            <summary>
            Sets the current system cursor for the control.
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.SetCursor(System.Windows.Forms.Cursor)">
            <summary>
            Sets the cursor on the control.
            Note that if the cursor is null, it will be hidden.
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.UpdateClip(System.Double,System.Boolean,Microsoft.MapPoint.Rendering3D.Cameras.Camera)">
            <summary>
            Updates the near and far clip planes.
            </summary>
            <param name="cameraAltitude"></param>
            <param name="useElevation"></param>
            <param name="camera"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.UpdateClip(Microsoft.MapPoint.Rendering3D.Cameras.GeodeticCamera)">
            <summary>
            
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetLatLongStrings(Microsoft.MapPoint.Rendering3D.LatLonAlt,System.String@,System.String@)">
            <summary>
            Get localized degrees/minutes/seconds.
            </summary>
            <param name="lla"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.DecomposeAngle(System.Double,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Converts an angle in radians into its component degrees, minutes, seconds
            </summary>
            <param name="angle"></param>
            <param name="degrees"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.DecomposeAngle(System.Double,System.Double@)">
            <summary>
            Converts an angle in radians to it's degree representation.
            </summary>
            <param name="angle"></param>
            <param name="degrees"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExecuteOnUIThread(System.Windows.Forms.MethodInvoker)">
            <summary>
            Adds a function that must be executed on the UI thread.  Returns immediately; the delegate will
            be executed at the next opportunity on the UI thread.
            </summary>
            <param name="method">Delegate to be executed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExecuteOnUIThread(Microsoft.MapPoint.Rendering3D.MethodParameterInvoker,System.Object)">
            <summary>
            Adds a function that must be executed on the UI thread.  Returns immediately; the delegate will
            be executed at the next opportunity on the UI thread.
            </summary>
            <param name="method">Delegate to be executed.</param>
            <param name="parameter">An argument to the delegate.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExecuteOnUIThreadSynchronously(System.Windows.Forms.MethodInvoker)">
            <summary>
            Executes a function on the UI thread and waits for the function to complete.
            </summary>
            <param name="method">Delegate to be executed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExecuteOnUIThreadSynchronously(Microsoft.MapPoint.Rendering3D.MethodParameterInvoker,System.Object)">
            <summary>
            Executes a function on the UI thread and waits for the function to complete.
            </summary>
            <param name="method">Delegate to be executed.</param>
            <param name="parameter">An argument to the delegate.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExecuteOnRenderThread(System.Windows.Forms.MethodInvoker)">
            <summary>
            Adds a function that must be executed on the render thread.  Returns immediately; the delegate will
            be executed at the beginning of the next frame.
            </summary>
            <param name="method">Delegate to be executed.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExecuteOnRenderThread(Microsoft.MapPoint.Rendering3D.MethodParameterInvoker,System.Object)">
            <summary>
            Adds a function that must be executed on the render thread.  Returns immediately; the delegate will
            be executed at the beginning of the next frame.
            </summary>
            <param name="method">Delegate to be executed.</param>
            <param name="parameter">An argument to the delegate.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.IsRunningOnRenderThread">
            <summary>
            Returns true if the current thread is the render thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetSurfaceElevation(Microsoft.MapPoint.Rendering3D.LatLon)">
            <summary>
            Gets the elevation of the ground at the given point.
            </summary>
            <param name="latLon">The point to get elevation for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetSurfaceElevation(System.Int32,Microsoft.MapPoint.Rendering3D.LatLon)">
            <summary>
            Gets the elevation of the ground at the given point.
            </summary>
            <param name="lod">The LOD to start looking at.</param>
            <param name="latLon">The point to get elevation for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetHighestVisibleLod(Microsoft.MapPoint.Rendering3D.Cameras.Camera)">
            <summary>
            Gets the highest currently displayed LOD.
            </summary>
            <param name="cam"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetHighestLoadedLod(Microsoft.MapPoint.Rendering3D.LatLon)">
            <summary>
            Gets the highest level of detail that we have terrain data loaded for at this point.
            This can be useful for estimating the accuracy of calls to <see cref="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetSurfaceElevation(Microsoft.MapPoint.Rendering3D.LatLon)"/>.
            Higher LOD values will generally have more accurate elevation information.
            </summary>
            <param name="latLon">The point to get LOD information for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.AddLocationListener(Microsoft.MapPoint.Rendering3D.Utility.Types.ILocationListener)">
            <summary>
            Add an object that will be notified when data changes at a given location.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.RemoveLocationListener(Microsoft.MapPoint.Rendering3D.Utility.Types.ILocationListener)">
            <summary>
            Stop listening to changes at this location.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.UpdateLocationListener(Microsoft.MapPoint.Rendering3D.Utility.Types.ILocationListener)">
            <summary>
            Force this particular listener to be checked again.  If it is currently in view it will have its location rechecked,
            even if the data in that area has not changed.  If it is not currently in view this call is ignored.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Calculates which objects intersect with the specified segment and sorts them by distance.
            Also fulfills IRayIntersect.
            </summary>
            <param name="intersections">List of intersections to append to with
            new intersections.</param>
            <returns>True if any intersections occurred.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.IntersectsGround(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates whether the specified segment intersects the ground or not.
            </summary>
            <param name="ray">Origin and direction of the test.</param>
            <param name="length">Length in meters from the origin to include in the test.</param>
            <param name="position"></param>
            <returns>True if the segment intersects anything.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.IntersectsSolid(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates whether the specified segment intersects anything that reports itself as solid.
            </summary>
            <param name="ray">Origin and direction of the test.</param>
            <param name="length">Length in meters from the origin to include in the test.</param>
            <param name="position"></param>
            <returns>True if the segment intersects anything.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.Intersects(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList)">
            <summary>
            Calculates which objects intersect with the specified swept sphere and sorts them by distance.
            </summary>
            <param name="sweptSphere"></param>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.IntersectsGround(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates whether the specified swept sphere intersects the ground or not.
            </summary>
            <param name="sweptSphere"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.IntersectsSolid(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates whether the specified swept sphere intersects an item that defines itself as solid.
            </summary>
            <param name="sweptSphere"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetValidResultOfSweptSphere(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tests the specified swept sphere against all of the geometry, 
            deflecting and sliding it to the appropriate destination to 
            avoid entering it.
            </summary>
            <param name="sweptSphere"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetValidResultOfSweptSphere(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Collections.Generic.List{Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection})">
            <summary>
            Tests the specified swept sphere against all of the geometry, 
            deflecting and sliding it to the appropriate destination to 
            avoid entering it.  Also populates a list of all the deflections
            that were performed.
            </summary>
            <param name="sweptSphere"></param>
            <param name="destination"></param>
            <param name="deflections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.AddWorldObjectHighlight(System.UInt64,System.Drawing.Color)">
            <summary>
            Specifies the id of an object to highlight.
            </summary>
            <param name="id">The id to highlight.</param>
            <param name="color">The color to use to highlight the object.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.RemoveWorldObjectHighlight(System.UInt64)">
            <summary>
            Removes a single object from the list of highlighted objects.
            </summary>
            <param name="id">The id of the object to remove from the highlight list.</param>
            <returns>Returns true if the object is removed from the highlight list.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ClearWorldObjectHighlights">
            <summary>
            Clears the list of highlighted objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.SetHightlightColor(System.UInt64,System.Drawing.Color)">
            <summary>
            Sets the highlight color of an object.  This object must already be highlighted.
            </summary>
            <param name="id">The id of the object to change the color on.</param>
            <param name="color">The color to use for the highlight.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetHightlightColor(System.UInt64)">
            <summary>
            Retrieves the highlight color of an object. This object must already be highlighted.
            </summary>
            <param name="id">The id of the object to change the color on.</param>
            <returns>The current color being used to highlight the object.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.IsHighlighted(System.UInt64)">
            <summary>
            Determines if the object specified by id is currently highlighted.
            </summary>
            <param name="id">The id to check for highlighting.</param>
            <returns>Returns true if the object is highlighted.</returns>[System.Security.SecurityTreatAsSafe]
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExcludeObjectSingleFrame(Microsoft.MapPoint.Rendering3D.Utility.ModelTag,System.Int32)">
            <summary>
            Marks a specific subset to *not* be drawn this frame, but still work for intersections.
            </summary>
            <param name="modelTag"></param>
            <param name="faceIndex"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.IsModelDisabled(System.UInt64)">
            <summary>
            Checks to see if a particular id has been disabled for this frame.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetNextSuppressionId">
            <summary>
            Returns the next valid suppression Id to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.MakeWorldObjectsTransparentAlongRay(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Casts a ray for the specified length making all world objects along
            the ray transparent.
            </summary>
            <param name="ray">Origin and direction to make transparent</param>
            <param name="length">Length of the ray to apply</param>
            <param name="doOutsideCheck">Check to see if the ray intersects a model</param>
            <param name="doInsideCheck">Check to see if the origin of the ray is inside a model</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ClearTransparentWorldObjectList">
            <summary>
            Clears the transparent object list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.AddWorldObjectExclusionArea(System.String,Microsoft.MapPoint.Geometry.Geometry2.Box2,System.Boolean)">
            <summary>
            Excludes or includes models from specified bounding box.
            </summary>
            <param name="name">The name of the exclusion area.</param>
            <param name="bounds">The bounding box to exclude latitude/longitude in degrees.</param>
            <param name="exclusion">True if this is an exclusion, false if this is an explicit inclusion that overrides a separate exclusion.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.AddWorldObjectExclusionPolygon(System.String,Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],System.Boolean)">
            <summary>
            Excludes or includes models from specified bounding polygon.
            </summary>
            <param name="name">The name of the exclusion area.</param>
            <param name="bounds">The points describing the bounds to exclude latitude/longitude in degrees.</param>
            <param name="exclusion">True if this is an exclusion, false if this is an explicit inclusion that overrides a separate exclusion.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.PolygonContainsId(System.UInt64,Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Returns a bool indicating whether the tile identified by id is contained
            in the polygon described in bounds.  This will add an extra line to connect
            the first and last points of the polygon.  Note:  This method only checks
            the center point of a tile to see if it is included in the polygon.
            </summary>
            <param name="id">The id of the tile in question.</param>
            <param name="bounds">The list of points to use to describe the bounding polygon.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.AddWorldObjectExclusionId(System.String,System.UInt64,System.Boolean)">
            <summary>
            Excludes a specific model Id.
            </summary>
            <param name="name"></param>
            <param name="modelId"></param>
            <param name="exclusion">true if this is an exclusion, false if this is an explicit inclusion that overrides a separate exclusion</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.ExcludeBoundingArea(System.String,Microsoft.MapPoint.Geometry.Geometry2.Box2,System.Boolean)">
            <summary>
            Generates the range of tiles to exclude based on the the lat/lon specified
            in the bounding box.
            </summary>
            <param name="name"></param>
            <param name="boundingBox"></param>
            <param name="exclusion">true if this is an exclusion, false if the models are to be included</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.RemoveWorldObjectExclusionArea(System.String)">
            <summary>
            Removes a named world object exclusion area.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetInclusionList">
            <summary>
            Gets a range of values that represent the level 20 tile ids of explicity included values that 
            should override any values defined in the ExcludedList set.  This value may null.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.GetExclusionList">
            <summary>
            Gets a range of values that represent the level 20 tile ids of explicity excluded values.  
            This value may null.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.CaptureScreenShot">
            <summary>
            Captures the currently rendering frame as a bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.InitializeSelfUI">
            <summary>
            Perform any initialization that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.InitializeSelfRender(Microsoft.MapPoint.Utility.Progress)">
            <summary>
            Perform any initialization that must occur on the Render thread.
            </summary>
            <param name="progress">Allows progress to be tracked.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.TearDownSelfUI">
            <summary>
            Perform any teardown that must occur on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Rendering3D.WorldEngine.TearDownSelfRender">
            <summary>
            Perform any teardown that must occur on the Render thread.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.HasProgressProviders">
            <summary>
            Flag indicating whether or not there is additional data progress information available.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ProgressProvidersProgress">
            <summary>
            Gets the download progress for all registered plug-ins.  It assumes
            all plug-ins are equal and combines the returned values into a single 
            value from 0.0 to 1.0.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.AllTilesLoaded">
            <summary>
            Gets whether or not all tiles have been fully loaded for the current view, including added progress providers.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.AllProgressProvidersLoaded">
            <summary>
            Gets whether or not all added progress providers are reporting themselves as completely loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.RenderTilesLoaded">
            <summary>
            Gets whether nor not all immediately needed tiles have been loaded 
            for the current view.
            Some background tiles or user data may still need to be loaded.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.LoadProgress">
            <summary>
            Returns the current loading progress as a percentage, from 0.0 to 100.0.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.SuppressZoomGestures">
            <summary>
            On Windows 7 or higher, the OS provides built-in gesture support.  Setting this to true
            prevents the OS from providing zoom gestures.  True by default.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.SuppressPanGestures">
            <summary>
            On Windows 7 or higher, the OS provides built-in gesture support.  Setting this to true
            prevents the OS from providing pan gestures.  True by default.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.EnableScreenDragRegions">
            <summary>
            If true, the regions on the sides, top, and bottom of the screen can be used for
            changing orientation as well as position, if the Current camera controller is the Default one.  
            Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.EnableStreetLevelPitchAdjustment">
            <summary>
            If true, when approaching the ground, the pitch will be changed to face the horizon if the Current 
            camera controller is the Default one.  Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.EnableStreetLevelAltitudeAdjustment">
            <summary>
            If true, when near the ground the camera will be kept near it when moving laterally if the Current 
            camera controller is the Default one.  Default is true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.BuildingCulling">
            <summary>
            A value used when determining if a building is too far away to render.  Lower values increase culling; a value less than
            or equal to zero will allow no buildings.  A value greater than or equal to 100 will display all buildings.  The size
            of the building is also accounted for when comparing against this value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.WorldDateTimeIsNow">
            <summary>
            Gets whether the current world date/time is attached to now, or is
            a custom value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.WorldDateTime">
            <summary>
            Gets the date/time for the rendered world.  This may be used for 
            sun position, star positions, etc.  If you set the world date/time
            here, WorldDateTimeIsNow will be set to false.  You can use 
            AttachWorldDateTimeToNow to use real time again.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.Environment">
            <summary>
            Gets the environment manager.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowLatLongAsDegreesMinutesSeconds">
            <summary>
            Gets or sets a flag indicating whether displayed latitude and longitude should be shown as degrees, 
            minutes, seconds (true) or as decimal degrees (false).
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.UseMetric">
            <summary>
            If true, text output will be in metric.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowNavigationControl">
            <summary>
            Enable or disable the navigation control.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.Culture">
            <summary>
            Sets the locale for text output.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowImmersiveAdvertising">
            <summary>
            Gets/Sets Advertising on/off
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowBuildings">
            <summary>
            Gets/Sets buildings on/off
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.AllowFrameRender">
            <summary>
            Flag indicating whether the current frame should be rendered.
            This value will be reset to true after each frame.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.EnableInertia">
            <summary>
            Indicates whether Earth motion should continue after dragging.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.InertiaDecayFactor">
            <summary>
            The proportion of inertial velocity that is retained after each second elapsed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowUI">
            <summary>
            Gets or sets whether any UI should draw itself.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ScaleRanges">
            <summary>
            Gets the mapping from scale values to levels of detail used by the engine.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.CollideModels">
            <summary>
            Turn on/off model collision with 3d objects
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowBuildingTextures">
            <summary>
            Gets/Sets textures on building models on/off
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.UseLoadingAnimations">
            <summary>
            If true, any supported animations for loading, such as buildings fading into view, will be used.  Some animations may
            depend on other system settings or capabilities.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.DisplayTileInformation">
            <summary>
            Displays terrain tile boundaries and identifiers, useful for debugging.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowMapObjects">
            <summary>
            Gets or sets a flag turning map objects on or off.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowScale">
            <summary>
            Gets/Sets scale bar on/off
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowLocation">
            <summary>
            Gets or sets whether the lat/lon/alt is displayed at the botton right.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.CopyrightText">
            <summary>
            Gets the text displayed for the copyright.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.BaseCopyrightText">
            <summary>
            Gets/Sets the base lines of text displayed for the copyright.  This is only for the first
            lines of the string -- if the system needs to add more for display it will do so automatically.
            The full string can be gotten through <see cref="P:Microsoft.MapPoint.Rendering3D.WorldEngine.CopyrightText"/>.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.MinElevationScaling">
            <summary>
            The value to scale elevations when zoomed in as far as possible
            Scaling will be interpolated between min and max values at intermediate zooms
            1.0 means no scaling, 2.0 means terrain will be shown at twice the height it really is
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.MaxElevationScaling">
            <summary>
            The value to scale elevations when zoomed out as far as possible
            Scaling will be interpolated between min and max values at intermediate zooms
            1.0 means no scaling, 2.0 means terrain will be shown at twice the height it really is
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowLoadingFeedback">
            <summary>
            Enable or disable the loading feedback.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowLoadingErrorFeedback">
            <summary>
            Enable or disable user feedback when errors are encountered while loading data.
            To display feedback, <see cref="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowLoadingFeedback"/> must also be true.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.UIHasFocus">
            <summary>
            Whether the mouse cursor is currently over an UI element.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.EnableInput">
            <summary>
            Gets or sets whether mouse and keyboard events are handled.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.OperatingSystem">
            <summary>
            Gets information about the current operating system.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.IsWebBased">
            <summary>
            Returns true if the control is web based.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.Display3DCursor">
            <summary>
            Enable or disable the 3d cursor.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.Display3DCursorOpacity">
            <summary>
            Set the opacity on the cursor.  Clamped to values between -1 and 255.  -1 means that the system will adjust it as appropriate.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.WindowsCursorHidden">
            <summary>
            Gets whether or	not	the	Windows	cursor is visible.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ShowCursorLocationInformation">
            <summary>
            Gets/Sets scale	location information on	the	scale bar on/off
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.LocaleManager">
            <summary>
            Gets the locale manager.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.IntersectExcludedObjects">
            <summary>
            Sets a flag indicating whether the intersection test should test excluded objects.
            If this is false it will override the settings on the individual objects.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ExcludedPrimitiveCount">
            <summary>
            Get the number of primitives that were excluded using 
            the intersection routines.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.DisplayOnlyIncludedModels">
            <summary>
            Gets or sets a flag indicating that only world objects that are explicitly  included will be
            rendered.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ExclusionList">
            <summary>
            Gets a range of values that represent the level 20 tileid's that should be excluded based on
            the location of user created models.  This value may null.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.ExclusionListChanged">
            <summary>
            Gets a flag indicating whether the exclusion list has changed.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Rendering3D.WorldEngine.InclusionList">
            <summary>
            Gets a range of values that represent the level 20 tile ids of explicity included values that 
            should override any values defined in the ExcludedList set.  This value may null.
            </summary>
        </member>
    </members>
</doc>
