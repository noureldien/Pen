<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.MapPoint.Geometry</name>
    </assembly>
    <members>
        <member name="T:Microsoft.MapPoint.Geometry.LocalValidate">
            <summary>
            Provides methods for validating parameters in consistent fashion.
            All methods return void, and throw exceptions if the requisite
            conditions are not met.
            Local copy to avoid function call across assembly boundary.  See
            Utility.Validate for main class
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.LocalValidate.IsNotNull(System.Object,System.String)">
            <summary>
            Validates that the argument is not null.
            </summary>
            <param name="argument">The argument to validate.</param>
            <param name="argumentName">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the argument is null.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.LocalValidate.GetArgumentNullException(System.String)">
            <summary>
            Returns an argument null exception.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.AbstractGeometry">
            <summary>
            Abstract geometry.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometry.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            cstor.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometry.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.AbstractGeometry.CoordinateReferenceSystem">
            <summary>
            returns the coordinate reference system this geometry is in.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.AbstractGeometry.CoordinateType">
            <summary>
            Returns the type of the vertex
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.AbstractGeometryCollection">
            <summary>
            A read-only collection of AbstractGeometry objects.
            </summary>
            <summary>
            A read-only collection of AbstractGeometry objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.CreateWrapper(Microsoft.MapPoint.Geometry.AbstractGeometry[])">
            <summary>
            Create a lightweight AbstractGeometryCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.#ctor(Microsoft.MapPoint.Geometry.AbstractGeometry[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.CopyTo(Microsoft.MapPoint.Geometry.AbstractGeometry[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.CoordinateReferenceSystem">
            <summary>
            Gets the coordinate reference system for the collection.
            Will return null for an empty collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>AbstractGeometry object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.AbstractGeometryCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection">
            <remarks>
            A writeable collection of AbstractGeometry objects.
            </remarks>
            <remarks>
            A writeable collection of AbstractGeometry objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.ValidateItem(Microsoft.MapPoint.Geometry.AbstractGeometry,System.String)">
            <summary>
            Verify that an item is valid for adding to the collection.
            </summary>
            <param name="item"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.Add(Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.Remove(Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight AbstractGeometryWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.CopyTo(Microsoft.MapPoint.Geometry.AbstractGeometry[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.CoordinateReferenceSystem">
            <summary>
            Gets the coordinate reference system for the collection.
            Will return null for an empty collection.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>AbstractGeometry object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.AbstractGeometryWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.AngleHelper">
            <summary>
            Class with a bunch of helper functions for angle related operations.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.WrapAngle(System.Double)">
            <summary>
            Calculates the equivalent of an angle in radians that is greater 
            than or equal to 0 and less than 2*PI.  
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.WrapAnglePlusMinusPi(System.Double)">
            <summary>
            Calculates the equivalent of an angle in radians that is greater 
            than or equal to -PI and less than PI.  
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.LimitHalfAngle(System.Double)">
            <summary>
            Limits an angle to inclusively between -PI/2 and PI/2.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.GetAngleDelta(System.Double,System.Double)">
            <summary>
            Gets the smallest angle between the two angles.  
            </summary>
            <param name="startAngle"></param>
            <param name="endAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.GetAnglePosition(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates from a starting angle to and ending angle 
            taking the shortest path around the circle.
            </summary>
            <param name="startAngle"></param>
            <param name="endAngle"></param>
            <param name="percentComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Moves from current to desired by a maximum of a specified amount.
            </summary>
            <param name="current"></param>
            <param name="desired"></param>
            <param name="maxDelta"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.TryGetRoots(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Use the Quadratic Formula:
              x = (-b +/- Sqrt(b^2 - 4*a*c)) / (2*a)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="root1"></param>
            <param name="root2"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.TryGetSmallestRoot(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Use the Quadratic Formula (taking the smaller of the two roots):
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.TryAngleSideSide(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            In a triangle ABC, this calculates the length of the side b given the angle A and sides a and c.
            </summary>
            <param name="angleA"></param>
            <param name="sideA"></param>
            <param name="sideC"></param>
            <param name="sideB1"></param>
            <param name="sideB2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.AngleHelper.CapAngle(System.Double,System.Double)">
            <summary>
            Caps an angle to a maximum, ignoring sign.
            </summary>
            <param name="angle"></param>
            <param name="maximum"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem">
            <summary>
            Coordinate Reference System for Cartesian 3D coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem">
            <summary>
            CoordinateReferenceSystem.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemElement">
            <summary>
            A ReferenceSystemElement is an element that has a reference system identifier.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemElement.#ctor(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            cstor.
            </summary>
            <param name="referenceSystemIdentifier"></param>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemElement.ReferenceSystemIdentifier">
            <summary>
            returns the reference system identifier.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.#ctor(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            cstor.
            </summary>
            <param name="referenceSystemIdentifier"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="coordinate"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(System.Double,System.Double,System.Double)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.IsValid(System.Double,System.Double,System.Double)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.AssertValid(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.AssertValid(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.CreateCoordinate(System.Double,System.Double,System.Double)">
            <summary>
            Creates a Coordinate3D from the specified x and y values.
            Throws if they are invalid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="coordinate"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(System.Double,System.Double)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.IsValid(System.Double,System.Double)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.AssertValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.AssertValid(System.Double,System.Double)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.CreateCoordinate(System.Double,System.Double)">
            <summary>
            Creates a Coordinate2D from the specified x and y values.
            Throws if they are invalid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="coordinate"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.String)">
            <summary>
            Validate the specified coordinate as an argument.
            </summary>
            <param name="coordinate"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.String,System.Int32,System.String)">
            <summary>
            Validate the specified coordinate as an indexed argument.
            </summary>
            <param name="coordinate"></param>
            <param name="argumentName"></param>
            <param name="argumentIndex"></param>
            <param name="suffix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Validate(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.IsValid(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.AssertValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.AssertValid(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.CreateCoordinate(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Creates a Coordinate2D from the specified x and y values.
            Throws if they are invalid.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.GetSpatialOperations">
            <summary>
            returns the spatial operations that this CRS supports.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Equals(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Determines whether another object is equal to this one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.GetHashCode">
            <summary>
            returns the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.ToString">
            <summary>
            Override ToString.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem.CoordinateSystem">
            <summary>
            returns the coordinate system of this coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.GetSpatialOperations">
            <summary>
            Returns the spatial operations for this CRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.Instance">
            <summary>
            Gets the instance of the coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateReferenceSystem.CoordinateSystem">
            <summary>
            Returns the coordinate system of this coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem">
            <summary>
            Coordinate Reference System for Cartesian 2D coordinates.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.GetSpatialOperations">
            <summary>
            Returns the spatial operations for this CRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.Instance">
            <summary>
            Gets the instance of the coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateReferenceSystem.CoordinateSystem">
            <summary>
            Returns the coordinate system of this coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.Line2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Line2D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="dir"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Line2D.Intersect(Microsoft.MapPoint.Geometry.Geometry2D.Line2D,Microsoft.MapPoint.Geometry.Geometry2D.Line2D)">
            <summary>
            
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Line2D.p">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Line2D.direction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateSystem">
            <summary>
            Coordinate System for 2D Cartesian coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.EllipsoidalCoordinateSystem">
            <summary>
            Summary description for EllipsoidalCoordinateSystem.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.CoordinateSystem">
            <summary>
            CoordinateSystem.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.CoordinateSystem.#ctor(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            cstor.
            </summary>
            <param name="referenceSystemIdentifier"></param>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.CoordinateSystem.CoordinateType">
            <summary>
            returns the CoordinateType used in this coordinate system.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.EllipsoidalCoordinateSystem.#ctor(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            cstor.
            </summary>
            <param name="referenceSystemIdentifier"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateSystem.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateSystem"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Cartesian2DCoordinateSystem.CoordinateType">
            <summary>
            returns the CoordinateType used in this coordinate system.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateSystem">
            <summary>
            Coordinate System for 3D Cartesian coordinates.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateSystem.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateSystem"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Cartesian3DCoordinateSystem.CoordinateType">
            <summary>
            returns the CoordinateType used in this coordinate system.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Coordinate2D">
            <summary>
            Coordinate2D.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.SizeInBytes">
            <summary>
            Size of this struct.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Coordinate2DType">
            <summary>
            The coordinate2DType type.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.MinValue">
            <summary>
            A Coordinate2D with minimum values for X and Y.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.MaxValue">
            <summary>
            A Coordinate2D with maximum values for X and Y.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Cross(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Calculates the cross product of two 2D coordinates.
            </summary>
            <param name="right">The right hand side of the expression.  
            The object "this" is the left handle side of the expression.</param>
            <returns>The cross product of left and right.
            If the result is less than 0, then right is clockwise from
            left. If the result is greater than 0, right is counter-clockwise 
            from left, and if the result equals 0, both coordinates have the 
            same slope.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Dot(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Calculates the dot product of two 2D coordinates.
            </summary>
            <param name="right">The right hand side of the expression.
            The object "this" is the left hand side of the expression</param>
            <returns>The dot product of left and right.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Normalize(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            returns a normalized version of a 2D coordinate/vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Normalize">
            <summary>
            Modify the object by normalizing THIS 2D coordinate/vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Length">
            <summary>
            Length(i.e. size or norm) of a 2D coordinate/vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.DistanceTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Distance from this coordinate to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.op_Addition(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            add two 2D coordinates together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Add(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            add two 2D coordinates together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.op_Subtraction(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Substract the second 2D coordinate from the first 2D coordinate.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Subtract(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Substract the second 2D coordinate from the first 2D coordinate.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.op_Multiply(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            Multiply a scalar and a 2D coordinate.
            </summary>
            <param name="coordinate"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Multiply(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            Multiply a scalar and a 2D coordinate.
            </summary>
            <param name="coordinate"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.op_Division(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            Divide a 2D coordinate by a scalar.
            </summary>
            <param name="coordinate"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Divide(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            Divide a 2D coordinate by a scalar.
            </summary>
            <param name="coordinate"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.op_Equality(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.op_Inequality(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.X">
            <summary>
            returns the X member.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Coordinate2D.Y">
            <summary>
            returns the Y member.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate2DCollection">
            <summary>
            A read-only collection of Coordinate2D objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Coordinate2DCollection.MinVertexCountForBoundingBox">
            <summary>
            If the count of vertexes is greater than this number, the last two coordinates in the
            collection are in fact the bounding box coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Coordinate2DCollection.BoundingBoxCountBloat">
            <summary>
            The increase in size that occurs when a bounding box is used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.CreateUnsafe(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <remarks>
            This method creates a Coordinate2DTwoVerticesCollection
            or Coordinate2DMultipleVerticesCollection, as appropriate
            based on the number of vertices in the array passed in. This method
            is provided as a convenience to make the existence of those two
            subclass collection less obtrusive in the API.  For the sake of performance,
            however, if a caller happens to have just two vertices, it's more
            performant to construct a Coordinate2DTwoVerticesCollection
            directly instead of creating an array of two vertices and then calling
            this method.
            </remarks>
            <param name="valuesArray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2D@,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.IncludeBoundingBox(System.Int32)">
            <summary>
            Returns whether a particular count of vertices should have an extra min and max
            coordinate assigned to the end when creating a collection.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DCollection.Microsoft#MapPoint#Utility#IManagedSize#CalculateSizeInBytes">
            <summary>
            Calculates the managed size of this object in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DCollection.Empty">
            <summary>
            Gets a read-only empty instance of the class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection">
            <summary>
            Coordinate collection implementation for number of vertices other than 2.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CreateUnsafe(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CreateUnsafeWithBoundingBox(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            
            If the number of coordinates is greater than BoundingBoxMinVertexCount,
            the last two entries in the array must be the min and max values for the
            collection.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CreateWrapper(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Create a lightweight wrapper around an existing array, which may or may not
            include bounding-box information.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Private constructor.
            </summary>
            <param name="valuesArray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CalculateMinMaxCoordinates(System.Collections.ArrayList,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@)">
            <summary>
            Runs through the provided collection of coordinates and returns the min and max values for the collection.
            </summary>
            <param name="coordinates"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CalculateMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],Microsoft.MapPoint.CoordinateSystems.Coordinate2D@,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@)">
            <summary>
            Runs through the provided collection of coordinates and returns the min and max values for the collection.
            </summary>
            <param name="coordinates"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.TrackMaxMin(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@)">
            <summary>
            If either component of point is more extreme than the max and/or min, updates max and/or min with the extreme value.
            </summary>
            <param name="point"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.SetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Sets the min and max coordinates of of the array.
            </summary>
            <param name="array"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2D@,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CalculateMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2D@,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@)">
            <summary>
            Runs through the collection's values and returns the min and max coordinates.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.GetHashCode">
            <summary>
            Overrides GetHashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.Equals(System.Object)">
            <summary>
            Compare this collection of coordinates to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the size of this version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DMultipleVerticesCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection">
            <summary>
            Implementation of coordinate collection that's specialized to handle
            the two-vertex case efficiently.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Constructor.
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2D@,Microsoft.MapPoint.CoordinateSystems.Coordinate2D@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.CheckCoordinatesMatch(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines if the supplied coordinates match this two vertex line
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.GetHashCode">
            <summary>
            Overrides GetHashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.Equals(System.Object)">
            <summary>
            Compare this collection of coordinates to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the size of this version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DTwoVerticesCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection">
            <remarks>
            A writeable collection of Coordinate2D objects.
            </remarks>
            <remarks>
            A writeable collection of Coordinate2D objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.Add(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.Remove(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight Coordinate2DWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint">
            <summary>
            A fixed-point 2D coordinate.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.BaseCoordinateSize">
            <summary>
            Size in bytes of this struct.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.MinValue">
            <summary>
            A Coordinate2DFixedPoint with minimum values for X and Y.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.MaxValue">
            <summary>
            A Coordinate2DFixedPoint with maximum values for X and Y.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.#ctor(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint"/> class.
            </summary>
            <param name="x">Fixed point integer with matching multiplier.</param>
            <param name="y">Fixed point integer with matching multiplier.</param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint"/> class.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint"/> class.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.ToCoordinate2D">
            <summary>
            Gets this coordinate as a <see cref="T:Microsoft.MapPoint.CoordinateSystems.Coordinate2D"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.op_Equality(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.op_Inequality(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.Equals(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Type specific equality.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.ToString(System.IFormatProvider)">
            <summary>
            Gets a string representation of this object.
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.X">
            <summary>
            Gets and sets a the X part of the coordinate as a fixed point value.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint.Y">
            <summary>
            Gets and sets a the Y part of the coordinate as a fixed point value.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection">
            <summary>
            A read-only collection of Coordinate2DFixedPoint objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.MinVertexCountForBoundingBox">
            <summary>
            If the count of vertexes is greater than this number, the last two coordinates in the
            collection are in fact the bounding box coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.BoundingBoxCountBloat">
            <summary>
            The increase in size that occurs when a bounding box is used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.CreateUnsafe(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <remarks>
            This method creates a Coordinate2DFixedPointTwoVerticesCollection
            or Coordinate2DFixedPointMultipleVerticesCollection, as appropriate
            based on the number of vertices in the array passed in. This method
            is provided as a convenience to make the existence of those two
            subclass collection less obtrusive in the API.  For the sake of performance,
            however, if a caller happens to have just two vertices, it's more
            performant to construct a Coordinate2DFixedPointTwoVerticesCollection
            directly instead of creating an array of two vertices and then calling
            this method.
            </remarks>
            <param name="valuesArray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.ToCoordinate2DCollection">
            <summary>
            Gets this collection as a <see cref="T:Microsoft.MapPoint.Geometry.Coordinate2DCollection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.IncludeBoundingBox(System.Int32)">
            <summary>
            Returns whether a particular count of vertices should have an extra min and max
            coordinate assigned to the end when creating a collection.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.Microsoft#MapPoint#Utility#IManagedSize#CalculateSizeInBytes">
            <summary>
            Calculates the managed size of this object in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.Empty">
            <summary>
            Gets a read-only empty instance of the class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2DFixedPoint object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection">
            <summary>
            Coordinate collection implementation for number of vertices other than 2.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CreateUnsafe(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CreateUnsafeWithBoundingBox(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            
            If the number of coordinates is greater than BoundingBoxMinVertexCount,
            the last two entries in the array must be the min and max values for the
            collection.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CreateWrapper(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[])">
            <summary>
            Create a lightweight wrapper around an existing array, which may or may not
            include bounding-box information.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[])">
            <summary>
            Private constructor.
            </summary>
            <param name="valuesArray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CalculateMinMaxCoordinates(System.Collections.ArrayList,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@)">
            <summary>
            Runs through the provided collection of coordinates and returns the min and max values for the collection.
            </summary>
            <param name="coordinates"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CalculateMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[],Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@)">
            <summary>
            Runs through the provided collection of coordinates and returns the min and max values for the collection.
            </summary>
            <param name="coordinates"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.TrackMaxMin(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@)">
            <summary>
            If either component of point is more extreme than the max and/or min, updates max and/or min with the extreme value.
            </summary>
            <param name="point"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.SetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[],Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Sets the min and max coordinates of of the array.
            </summary>
            <param name="array"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CalculateMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@)">
            <summary>
            Runs through the collection's values and returns the min and max coordinates.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.ToCoordinate2DCollection">
            <summary>
            Gets this collection as a <see cref="T:Microsoft.MapPoint.Geometry.Coordinate2DCollection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.GetHashCode">
            <summary>
            Overrides GetHashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.Equals(System.Object)">
            <summary>
            Compare this collection of coordinates to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the size of this version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2DFixedPoint object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointMultipleVerticesCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection">
            <summary>
            Implementation of coordinate collection that's specialized to handle
            the two-vertex case efficiently.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Constructor.
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.CheckCoordinatesMatch(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines if the supplied coordinates match this two vertex line
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.ToCoordinate2DCollection">
            <summary>
            Gets this collection as a <see cref="T:Microsoft.MapPoint.Geometry.Coordinate2DCollection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.GetHashCode">
            <summary>
            Overrides GetHashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.Equals(System.Object)">
            <summary>
            Compare this collection of coordinates to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the size of this version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2DFixedPoint object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate2DFixedPointTwoVerticesCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection">
            <remarks>
            A writeable collection of Coordinate2D objects.
            </remarks>
            <remarks>
            A writeable collection of Coordinate2DFixedPoint objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.Add(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.Remove(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight Coordinate2DFixedPointWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate2DFixedPoint object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate2DFixedPointWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Coordinate3D">
            <summary>
            Coordinate3D.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.SizeInBytes">
            <summary>
            Size in bytes of this struct
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Coordinate3DType">
            <summary>
            The coordinate2DType type.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.MinValue">
            <summary>
            A Coordinate2D with minimum values for X and Y.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.MaxValue">
            <summary>
            A Coordinate2D with maximum values for X and Y.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Cross(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Calculates the cross product of two 3D coordinates.
            </summary>
            <param name="right">The right hand side of the expression.  
            The object "this" is the left hand side of the expression.</param>
            <returns>The cross product of left and right.
            The result is a vector that is perpendicular to the plane that is
            defined by left and right.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Dot(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Calculates the dot product of two 3D coordinates.
            </summary>
            <param name="right">The right hand side of the expression.
            The object "this" is the left hand side of the expression.</param>
            <returns>The dot product of left and right.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Normalize(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            returns a normalized version of a 3D coordinate/vector.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Normalize">
            <summary>
            Modify the object by normalizing THIS 3D coordinate/vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Length">
            <summary>
            Length(i.e. size or norm) of a 3D coordinate/vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.op_Addition(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            add two 3D coordinates together.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Add(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Modify the object by adding a 3D coordinate to THIS object.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.op_Subtraction(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Substract the second 3D coordinate from the first 3D coordinate.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Subtract(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Modify the object by subtracting a 3D coordinate from THIS object.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.op_Multiply(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,System.Double)">
            <summary>
            Multiply a scalar and a 3D coordinate.
            </summary>
            <param name="coordinate"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Multiply(System.Double)">
            <summary>
            Modify the object by multipling a scalar to THIS object.
            </summary>
            <param name="multiplier"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.op_Division(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,System.Double)">
            <summary>
            Divide a 3D coordinate by a scalar.
            </summary>
            <param name="coordinate"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Divide(System.Double)">
            <summary>
            Modify the object by dividing THIS object by a scalar .
            </summary>
            <param name="divisor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.op_Equality(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.op_Inequality(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Angle(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Calculate the angle between two unit vectors with respect to the 
            origin.  The results will be incorrect if the vectors are not 
            normalized.
            </summary>
            <param name="other">Normalized vector to compare to.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.GreatCircleDistance(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Calculate the great circle distance, in meters, between two unit 
            vectors.  The results will be incorrect if the vectors are not 
            normalized.
            </summary>
            <param name="other">Normalized vector to compare to.</param>
            <returns>Distance in meters.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.GreatCircleDistanceThresholded(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,System.Double,System.Double@)">
            <summary>
            Calculate the great circle distance, in meters, between two unit 
            vectors.  The results will be incorrect if the vectors are not 
            normalized.
            </summary>
            <param name="other">Normalized vector to compare to.</param>
            <param name="dotProductThreshold">The minimum value that the dot product of the vectors must have.</param>
            <param name="distance">The distance in meters.</param>
            <returns>False if the dot product is too small (vectors point too far away from each other).</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.ChordLengthSquared(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Calculates the chord distance between this coordinate and
            another, squared.
            </summary>
            <param name="other">Other end of the chord.</param>
            <returns>The chord length squared.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.X">
            <summary>
            access the X component.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Y">
            <summary>
            access the Y component.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Coordinate3D.Z">
            <summary>
            access the Z component.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.CoordinateConversion">
            <summary>
            CoordinateConversion.
            This is an abstract class.  A specific coordinate conversion implementation should be derived
            from this class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.CoordinateConversion.FromCoordinateReferenceSystem">
            <summary>
            Gets the coordinate system from which we convert.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.CoordinateConversion.ToCoordinateReferenceSystem">
            <summary>
            Gets the coordinate reference system to which we convert.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate3DCollection">
            <summary>
            A read-only collection of Coordinate3D objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Coordinate3DCollection.MinVertexCountForBoundingBox">
            <summary>
            If the count of vertexes is greater than this number, the last two coordinates in the
            collection are in fact the bounding box coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Coordinate3DCollection.BoundingBoxCountBloat">
            <summary>
            The increase in size that occurs when a bounding box is used.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.CreateUnsafe(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <remarks>
            This method creates a Coordinate3DTwoVerticesCollection
            or Coordinate3DMultipleVerticesCollection, as appropriate
            based on the number of vertices in the array passed in. This method
            is provided as a convenience to make the existence of those two
            subclass collection less obtrusive in the API.  For the sake of performance,
            however, if a caller happens to have just two vertices, it's more
            performant to construct a Coordinate3DTwoVerticesCollection
            directly instead of creating an array of two vertices and then calling
            this method.
            </remarks>
            <param name="valuesArray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate3D@,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.IncludeBoundingBox(System.Int32)">
            <summary>
            Returns whether a particular count of vertices should have an extra min and max
            coordinate assigned to the end when creating a collection.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DCollection.Microsoft#MapPoint#Utility#IManagedSize#CalculateSizeInBytes">
            <summary>
            Calculates the managed size of this object in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DCollection.Empty">
            <summary>
            Gets a read-only empty instance of the class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate3D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection">
            <summary>
            Coordinate collection implementation for number of vertices other than 2.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CreateUnsafe(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CreateUnsafeWithBoundingBox(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            
            If the number of coordinates is greater than BoundingBoxMinVertexCount,
            the last two entries in the array must be the min and max values for the
            collection.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CreateWrapper(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[])">
            <summary>
            Create a lightweight wrapper around an existing array, which may or may not
            include bounding-box information.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[])">
            <summary>
            Private constructor.
            </summary>
            <param name="valuesArray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CalculateMinMaxCoordinates(System.Collections.ArrayList,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@)">
            <summary>
            Runs through the provided collection of coordinates and returns the min and max values for the collection.
            </summary>
            <param name="coordinates"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CalculateMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[],Microsoft.MapPoint.CoordinateSystems.Coordinate3D@,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@)">
            <summary>
            Runs through the provided collection of coordinates and returns the min and max values for the collection.
            </summary>
            <param name="coordinates"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.TrackMaxMin(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@)">
            <summary>
            If either component of point is more extreme than the max and/or min, updates max and/or min with the extreme value.
            </summary>
            <param name="point"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.SetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[],Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Sets the min and max coordinates of of the array.
            </summary>
            <param name="array"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate3D@,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CalculateMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate3D@,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@)">
            <summary>
            Runs through the collection's values and returns the min and max coordinates.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.GetHashCode">
            <summary>
            Overrides GetHashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.Equals(System.Object)">
            <summary>
            Compare this collection of coordinates to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the size of this version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate3D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DMultipleVerticesCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection">
            <summary>
            Implementation of coordinate collection that's specialized to handle
            the two-vertex case efficiently.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Constructor.
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.GetMinMaxCoordinates(Microsoft.MapPoint.CoordinateSystems.Coordinate3D@,Microsoft.MapPoint.CoordinateSystems.Coordinate3D@)">
            <summary>
            Returns the maximum and minimum X and Y values that appear in the collection.
            </summary>
            <param name="min">The largest X and Y values that appear.</param>
            <param name="max">The smallest X and Y values that appear.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.CheckCoordinatesMatch(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines if the supplied coordinates match this two vertex line
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.GetHashCode">
            <summary>
            Overrides GetHashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.Equals(System.Object)">
            <summary>
            Compare this collection of coordinates to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.ICollectionCopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the size of this version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate3D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Coordinate3DTwoVerticesCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection">
            <remarks>
            A writeable collection of Coordinate3D objects.
            </remarks>
            <remarks>
            A writeable collection of Coordinate3D objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.Add(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.Remove(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight Coordinate3DWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.CopyTo(Microsoft.MapPoint.CoordinateSystems.Coordinate3D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Coordinate3D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Coordinate3DWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.IDatum">
            <summary>
            Datum interface transforms local spherical coordinates into global cartesian coordinates and vice versa.
            
            A datum is a best fit spherical coordinate system that varies according to geopolitical entities.
            
            WGS84 is the internationally accepted datum that best describes the entire surface of the earth.
            
            An ellipsoid is a simpler approximation of the earth's shape that captures flattening at the poles.
            
            A sphere is an even simpler approximation of the earth's shape that is uniformly round.
            </summary>
            <TODO>
            Returning values with outs is ugly. Eliminate out returns with function return of 
            Vector3D or LLA as appropriate when these get defined.
            </TODO>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.IDatum.ToGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>Transform local spherical coordinates to global cartesian coordinates</summary>
            <param name="latitude">Latitude in local coodinates</param>
            <param name="longitude">Longitude in local coordinates</param>
            <param name="altitude">Altitude in local coordinates</param>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.IDatum.FromGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>Transform global cartesian coordinates to local spherical coordinates</summary>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
            <param name="latitude">Latitude in local coodinates</param>
            <param name="longitude">Longitude in local coordinates</param>
            <param name="altitude">Altitude in local coordinates</param>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.DatumSphere">
            <summary>
            Datum for a sphere
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.DatumSphere.Radius">
            <summary>
            Equatorial radius in meters
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumSphere.ToGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>Transform local spherical coordinates to global cartesian coordinates</summary>
            <param name="latitude">Latitude in local coodinates</param>
            <param name="longitude">Longitude in local coordinates</param>
            <param name="altitude">Altitude in local coordinates</param>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumSphere.FromGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>Transform global cartesian coordinates to local spherical coordinates</summary>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
            <param name="latitude">Latitude in local coodinates</param>
            <param name="longitude">Longitude in local coordinates</param>
            <param name="altitude">Altitude in local coordinates</param>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.DatumSphere.Instance">
            <summary>Instance for Singleton</summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.DatumEllipsoid">
            <summary>
            Datum for an ellipsoid that has flattened poles
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.DatumEllipsoid.Radius">
            <summary>
            Equatorial radius in meters
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.DatumEllipsoid.Flattening">
            <summary>
            Polar flattening
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumEllipsoid.ToGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>Transform local spherical coordinates to global cartesian coordinates</summary>
            <param name="latitude">Latitude in local coodinates</param>
            <param name="longitude">Longitude in local coordinates</param>
            <param name="altitude">Altitude in local coordinates</param>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumEllipsoid.FromGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>Transform global cartesian coordinates to local spherical coordinates</summary>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
            <param name="latitude">Latitude in local coodinates</param>
            <param name="longitude">Longitude in local coordinates</param>
            <param name="altitude">Altitude in local coordinates</param>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.DatumEllipsoid.Instance">
            <summary>Instance for Singleton</summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.DatumWGS84">
            <summary>
            Datum for WGS84.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.Radius">
            <summary>
            Equatorial radius in meters
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.Flattening">
            <summary>
            Polar flattening semi-minor radius = (1-flattening)*semi-major radius
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.GetNormalVector(System.Double,System.Double)">
            <summary>
            Get normal vector in global XYZ coordinate system at the specified point.
            </summary>
            <param name="latitude">Latitude in local coodinates units: RADIANS</param>
            <param name="longitude">Longitude in local coordinates units: RADIANS</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.GetNormalRay(System.Double,System.Double)">
            <summary>
            Get ray that is a normal vector in global XYZ coordinate system at the specified point.
            </summary>
            <param name="latitude">Latitude in local coodinates units: RADIANS</param>
            <param name="longitude">Longitude in local coordinates units: RADIANS</param>
            <returns>A ray that has an origin on the datum, and a direction that is normal to the datum.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.GetDownwardNormalRay(System.Double,System.Double,System.Double)">
            <summary>
            Get ray that has its origin at the specified location, and whose ray points straight down, that is, is opposite to the
            surface normal.  Note that in general, this ray does not point at the center of the earth.
            </summary>
            <param name="latitude">Latitude in local coodinates units: RADIANS</param>
            <param name="longitude">Longitude in local coordinates units: RADIANS</param>
            <param name="altitude">Altitude in local coordinates</param>
            <returns>A ray that has an origin at the specified location, and a direction that is opposite to the normal to the datum.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.ToGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Transform local spherical coordinates to global cartesian coordinates
            Helmert's forward formula from
            http://www.wgs84.com/files/wgsman24.pdf
            </summary>
            <param name="latitude">Latitude in local coodinates units: RADIANS</param>
            <param name="longitude">Longitude in local coordinates units: RADIANS</param>
            <param name="altitude">Altitude in local coordinates</param>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.ToGlobalFast(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Transform local spherical coordinates to global cartesian coordinates
            Helmert's forward formula from
            http://www.wgs84.com/files/wgsman24.pdf
            </summary>
            <param name="sinLat">The sine of the latitude</param>
            <param name="cosLat">The cosine of the latitude</param>
            <param name="sinLon">The sine of the longitude</param>
            <param name="cosLon">The cosine of the longitude</param>
            
            <param name="altitude">Altitude in local coordinates</param>
            <param name="x">X coordinate in global coordinates</param>
            <param name="y">Y coordinate in global coordinates</param>
            <param name="z">Z coordinate in global coordinates</param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.FromGlobal(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Transform global cartesian coordinates to local spherical coordinates
            Helmert's inverse formula from
            http://www.wgs84.com/files/wgsman24.pdf
            Page 82.
            Algorithm is iterative that converges on solution.
            Initial iteration computed assuming pure ellipsoid.
            Subsequent iterations refine.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.DatumWGS84.Instance">
            <summary>Instance for Singleton</summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.GeocentricWgs84CartesianCoordinateReferenceSystem">
            <summary>
            Class for a geocentric coordinate systems, with 3D coordinates
            that lie on the WGS84 ellipsoid.  A local transform matrix
            transforms the coordinates into geocentric ones
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.GeographicCoordinateReferenceSystem">
            <summary>
            GeographicCoordinateReferenceSystem.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.GeographicCoordinateReferenceSystem.#ctor(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.EllipsoidalCoordinateSystem,Microsoft.MapPoint.CoordinateSystems.GeodeticDatum)">
            <summary>
            constructor.
            </summary>
            <param name="referenceSystemIdentifier"></param>
            <param name="ellipsoidalCoordinateSystem"></param>
            <param name="geodeticDatum">Can be null.</param>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.GeographicCoordinateReferenceSystem.EllipsoidalCoordinateSystem">
            <summary>
            returns the ellipsoidal coordinate system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.GeographicCoordinateReferenceSystem.GeodeticDatum">
            <summary>
            returns the geodetic datum
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.GeocentricWgs84CartesianCoordinateReferenceSystem.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.CoordinateSystems.GeocentricWgs84CartesianCoordinateReferenceSystem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.GeocentricWgs84CartesianCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Tests whether the specified coordinate is a valid Proto-Miller coordinate.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.GeocentricWgs84CartesianCoordinateReferenceSystem.GetSpatialOperations">
            <summary>
            Returns the spatial operations for this CRS.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.GeocentricWgs84CartesianCoordinateReferenceSystem.LocalTransform">
            <summary>
            Gets the local transform for this CRS
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.GeocentricWgs84CartesianCoordinateReferenceSystem.CoordinateSystem">
            <summary>
            returns the coordinate system of this coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem">
            <summary>
            Coordinate Reference System for Mercator coordinates.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.RadiusInMeters">
            <summary>
            Semi-major axis of the earth in meters in this crs.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.flattening">
            <summary>
            flattening ratio
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.GetSpatialOperations">
            <summary>
            Returns the spatial operations for this CRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.Instance">
            <summary>
            Gets the instance of the coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.CoordinateSystem">
            <summary>
            Returns the coordinate system of this coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.MercatorCoordinateReferenceSystem.Datum">
            <summary>
            Returns the datum of this coordinate reference system.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.UnitSphereToWgs84Conversion">
            <summary>
            Class to convert from Unit Sphere 3D coordinates to WGS84 LatLongs.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.UnitSphereToWgs84Conversion.StaticConvert(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Converts a 3D coordinate in left-handed, North=Y+, unit sphere space to a WGS84 LatLong.
            </summary>
            <param name="from">3D coordinate in left-handed, North=Y+, unit sphere space.</param>
            <returns>A WGS84 LatLong.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.UnitSphereToWgs84Conversion.Convert(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Converts a WGS84 LatLong to a 3D coordinate in left-handed, North=Y+, unit sphere space.
            </summary>
            <param name="from">A WGS84 LatLong.</param>
            <returns>3D coordinate in left-handed, North=Y+, unit sphere space.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.UnitSphereToWgs84Conversion.#ctor">
            <summary>
            People should reference the instance.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.UnitSphereToWgs84Conversion.Instance">
            <summary>
            Gets the instance of this singleton.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.UnitSphereToWgs84Conversion.FromCoordinateReferenceSystem">
            <summary>
            Gets the coordinate system from which we convert.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.UnitSphereToWgs84Conversion.ToCoordinateReferenceSystem">
            <summary>
            Gets the coordinate system to which we convert.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum">
            <summary>
            Summary description for SphericalEarthDatum.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.GeodeticDatum">
            <summary>
            a geodetic datum.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Datum">
            <summary>
            Summary description for Datum.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Datum.#ctor(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            cstor.
            </summary>
            <param name="referenceSystemIdentifier"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.GeodeticDatum.#ctor(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            ctor.
            </summary>
            <param name="referenceSystemIdentifier"></param>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum.RadiusInMeters">
            <summary>
            Earth's radius in meters.  This is the equal-area radius based on GRS80. 
            This is the radius of a sphere of equal area. The number listed by Synder
            in his last book is 6371.007 km.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum.CircumferenceInMeters">
            <summary>
            Equal area circumference of the earth in meters.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum.EquatorialMetersPerDegree">
            <summary>
            Number of meters in a degree at the equator.
            </summary>
            <value></value>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum.EquatorialDegreesPerMeter">
            <summary>
            Number of degrees at the equator in a meter.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum.#ctor">
            <summary>
            Initialize new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.SphericalEarthDatum.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations">
            <summary>
            Spatial operations for the WGS 84 Coordinate Reference System.
            The coordinate type is latlong represented in a Coordinate2D.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.SpatialOperations">
            <summary>
            SpatialOperations.
            
            Many, if not most, spatial operations depend on the type of CRS. At a minimum, 
            for instance, are lines interpolated linearly (engineering CRS) or 
            geodesically (geographic CRS). Because of this, the geometry classes 
            themselves can not implement most spatial operations. They must
            delegate this to the CRS.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.Buffer(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D,System.Double)">
            <summary>
            Buffers an input geometry object the specified distance.
            </summary>
            <param name="geometry"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.CalculateArea(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D)">
            <summary>
            Calculates the area of an input polygon based on that polygon's CRS.
            </summary>
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.CalculateArea(Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D)">
            <summary>
            Calculates the area of an input polygon based on that polygon's CRS.
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.CalculateDistance(Microsoft.MapPoint.Geometry.Geometry2D.Point2D,Microsoft.MapPoint.Geometry.Geometry2D.Point2D)">
            <summary>
            Calculates the distance between the input points using the input point's CRS’s.  
            Both input points must be in the same CRS.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.CalculateDistance(Microsoft.MapPoint.Geometry.Geometry2D.Point2D,Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Calculates the distance between the input point and geometry using the input point's CRS’s.  
            Both the point and geometry must be in the same CRS.
            </summary>
            <param name="point"></param>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.GetBoundingBox(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Returns the minimum bounding rectangle MinXY, MaxXY coordinates as a BoundingRectangle object.
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.GetVertexDistances(Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection)">
            <summary>
            Returns the pairwise vertex distance of all coordinates in the 
            input geometry.  For example, if a Polyline has 3 vertices A,B,C
            then an array with two elements is returned.  The first value is
            for the distance A-B, the second value for the distance B-C.  There
            will always be one less value than there are vertices.  If a zero 
            dimensional geometry is submitted (i.e. a point) the method will 
            return a one element array with a value of 0.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.GetVertexDistances(Microsoft.MapPoint.Geometry.Coordinate2DCollection)">
            <summary>
            Returns the pairwise vertex distance of all coordinates in the 
            input geometry.  For example, if a Polyline has 3 vertices A,B,C
            then an array with two elements is returned.  The first value is
            for the distance A-B, the second value for the distance B-C.  There
            will always be one less value than there are vertices.  If a zero 
            dimensional geometry is submitted (i.e. a point) the method will 
            return a one element array with a value of 0.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.GetVertexDistances(Microsoft.MapPoint.Geometry.Coordinate3DCollection)">
            <summary>
            Returns the pairwise vertex distance of all coordinates in the 
            input geometry.  For example, if a Polyline has 3 vertices A,B,C
            then an array with two elements is returned.  The first value is
            for the distance A-B, the second value for the distance B-C.  There
            will always be one less value than there are vertices.  If a zero 
            dimensional geometry is submitted (i.e. a point) the method will 
            return a one element array with a value of 0.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.GetLength(Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection)">
            <summary>
            Returns the total length of the line defined by a list of coordinates.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.GetLength(Microsoft.MapPoint.Geometry.Coordinate2DCollection)">
            <summary>
            Returns the total length of the line defined by a list of coordinates.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.GetLength(Microsoft.MapPoint.Geometry.Coordinate3DCollection)">
            <summary>
            Returns the total length of the line defined by a list of coordinates.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.Intersection(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D,Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Intersects like geometry types.  Faults if input geometries are not of the same type.
            </summary>
            <param name="geometry1"></param>
            <param name="geometry2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.Intersects(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D,Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Intersects like geometry types and returns True if the intersect, False if they don't.  
            Throws if input geometries are not of the same type.  Used for hit detection.
            </summary>
            <param name="geometry1"></param>
            <param name="geometry2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.Intersects(Microsoft.MapPoint.Geometry.AbstractGeometry,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Intersects like geometry types and returns True if the intersect, False if they don't.  
            Throws if input geometries are not of the same type.  Used for hit detection.
            </summary>
            <param name="geometry1"></param>
            <param name="geometry2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.CalculateRelativePoint(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Double)">
            <summary>
            Calculates a point a fraction along the chord specified by start and finish.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.SpatialOperations.CalculateRelativePoint(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            Calculates a point a fraction along the chord specified by start and finish.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.Buffer(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D,System.Double)">
            <summary>
            Implements SpatialOperations.Buffer.
            </summary>
            <param name="geometry"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.CalculateArea(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D)">
            <summary>
            Calculate the area of a polygon
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.CalculateArea(Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D)">
            <summary>
            Calculate the area of a polygon
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.CalculateDistance(Microsoft.MapPoint.Geometry.Geometry2D.Point2D,Microsoft.MapPoint.Geometry.Geometry2D.Point2D)">
            <summary>
            Implements "SpatialOperations.CalculateDistance".
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.CalculateDistance(Microsoft.MapPoint.Geometry.Geometry2D.Point2D,Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Implements "SpatialOperations.CalculateDistance".
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.CalculateDistanceThresholded(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.Geometry.AbstractGeometry,System.Double,System.Double@)">
            <summary>
            Implements "SpatialOperations.CalculateDistance".
            Assumes a unit sphere coordinate3D and a WGS84 2D geometry.
            If the dot product between the point and geometry is less than a certain value,
            returns false.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.GetBoundingBox(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Implements "SpatialOperations.GetBoundingBox".
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.GetBoundingBox(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Double)">
            <summary>
            Get a lat/long bounding box around a geometry defined by a lat/long point and a radius in meters.
            Rough estimate only.
            </summary>
            <param name="centerLatLong"></param>
            <param name="radiusMeters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.GetVertexDistances(Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection)">
            <summary>
            Implements SpatialOperations.GetVertexDistances.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.GetVertexDistances(Microsoft.MapPoint.Geometry.Coordinate2DCollection)">
            <summary>
            Implements SpatialOperations.GetVertexDistances.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.GetVertexDistances(Microsoft.MapPoint.Geometry.Coordinate3DCollection)">
            <summary>
            Implements SpatialOperations.GetVertexDistances.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.ProjectToGround(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Project a 3-d wsg84 lat/long/alt onto the datum.
            </summary>
            <param name="longLatAlt"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.Intersection(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D,Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Implements SpatialOperations.Intersection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.Intersects(Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D,Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D)">
            <summary>
            Implements SpatialOperations.Intersects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.Intersects(Microsoft.MapPoint.Geometry.AbstractGeometry,Microsoft.MapPoint.Geometry.AbstractGeometry)">
            <summary>
            Implements SpatialOperations.Intersects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.CalculateRelativePoint(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Double)">
            <summary>
            Based on two coordinates and a fraction between them on the globe, calculate a point.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84SpatialOperations.CalculateRelativePoint(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            Based on two coordinates and a fraction between them on the globe, calculate a point.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.DecimalDegreesCoordinateSystem">
            <summary>
            Decimal Degrees Coordinate System providing EPSG 6405.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.DecimalDegreesCoordinateSystem.#ctor">
            <summary>
            cstor.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.DecimalDegreesCoordinateSystem.CoordinateType">
            <summary>
            returns the CoordinateType used in this coordinate system.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Wgs84ToUnitSphereConversion">
            <summary>
            Class to convert from WGS84 LatLongs to Unit Sphere 3D coordinates.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84ToUnitSphereConversion.StaticConvert(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Converts a WGS84 LatLong to a 3D coordinate in left-handed, North=Y+, unit sphere space.
            </summary>
            <param name="from">A WGS84 LatLong.</param>
            <returns>3D coordinate in left-handed, North=Y+, unit sphere space.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84ToUnitSphereConversion.Convert(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Converts a WGS84 LatLong to a 3D coordinate in left-handed, North=Y+, unit sphere space.
            </summary>
            <param name="from">A WGS84 LatLong.</param>
            <returns>3D coordinate in left-handed, North=Y+, unit sphere space.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84ToUnitSphereConversion.#ctor">
            <summary>
            People should reference the instance.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Wgs84ToUnitSphereConversion.Instance">
            <summary>
            Gets the instance of this singleton.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Wgs84ToUnitSphereConversion.FromCoordinateReferenceSystem">
            <summary>
            Gets the coordinate system from which we convert.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Wgs84ToUnitSphereConversion.ToCoordinateReferenceSystem">
            <summary>
            Gets the coordinate system to which we convert.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VertexFormats">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Position">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Diffuse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Specular">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture1_3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture2_3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture3_3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Texture4_3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionBlendInt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionColored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionDiffuseSpecular">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionColoredTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionNormalColored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionNormalColoredTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionNormalTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionNormalTexTex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionNormalTexturedTex1Tex2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionNormalTex0Tex1Tex2Tex3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.PositionTexTex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.Transformed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.TransformedColored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.TransformedColoredTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.TransformedTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VertexFormats.AnimatedPositionNormalTextured">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.Box2D">
            <summary>
            A Box - bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D">
            <summary>
            Base generic geometry class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="N:Microsoft.MapPoint.Geometry"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.GetBoundingBox">
            <summary>
            Gets the bounding box for this geometry.
            </summary>
            <returns>The bounding box for this geometry.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Derived classes must implement this method to determine whether the bounding box of the geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.CalculateRelativePoint(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,System.Double)">
            <summary>
            Calculates a relative point.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.Microsoft#MapPoint#Utility#IManagedSize#CalculateSizeInBytes">
            <summary>
            Calculates the managed size of this object in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.SpatialOperations">
            <summary>
            Gets the spatial operations class for this geometry using its CRS.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.AbstractGeometry2D.CoordinateType">
            <summary>
            Returns the type of the vertex
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            default cstor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Constructor
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal constructor, no validation.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.MinCoordinate">
            <summary>
            The minimum coordinate for the box
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Box2D.MaxCoordinate">
            <summary>
            The maximum coordinate for the box.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.Curve2D">
            <summary>
            A curve contains a sequence of coordinates.  We use it as a base class
            to model our polyline type, and in the future, splines and Beizer curves.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Curve2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            cstor.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Curve2D.CalculateLength">
            <summary>
            returns the length of this curve.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper">
            <remarks>
            Helper functions and constants to process/validate Coodinate2DFixedPoint coordinates as LatLongs.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.threeSixtyDegrees">
            <summary>
            A constant for the Int32FixedPoint value 360.0;
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.MinimumLatitude">
            <summary>
            The minimum valid latitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.MaximumLatitude">
            <summary>
            The maximum valid latitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.MinimumLongitude">
            <summary>
            The minimum valid longitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.MaximumLongitude">
            <summary>
            The maximum valid longitude.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.LimitLatitude(Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Takes a latitude value and constrains it to a valid one if it is
            out of range.
            </summary>
            <param name="latitude">Unconstrained latitude value.</param>
            <returns>Constrained latitude value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.GreatCircleDistance(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Calculates the great circle distance between 2 coordinates.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>The great circle distance in meters.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.UnwrapLongitude(Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Takes a longitude value and unwraps it to a valid one if it is out
            of range.
            </summary>
            <param name="longitude">Unconstrained longitude value.</param>
            <returns>Unwrapped longitude value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.Validate(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="coordinate"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.Validate(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.IsValid(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.AssertValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.AssertValid(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.CreateCoordinate(Microsoft.MapPoint.Utility.Int32FixedPoint,Microsoft.MapPoint.Utility.Int32FixedPoint)">
            <summary>
            Creates a Coordinate2D from the specified latitude and longitude values.
            Throws if they are invalid.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongFixedPointHelper.CreateCoordinate(System.Double,System.Double)">
            <summary>
            Creates a Coordinate2D from the specified latitude and longitude values.
            Throws if they are invalid.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper">
            <remarks>
            Helper functions and constants to process/validate Coodinate2D coordinates as LatLongs.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.MinimumLatitude">
            <summary>
            The minimum valid latitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.MaximumLatitude">
            <summary>
            The maximum valid latitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.MinimumLongitude">
            <summary>
            The minimum valid longitude.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.MaximumLongitude">
            <summary>
            The maximum valid longitude.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.LimitLatitude(System.Double)">
            <summary>
            Takes a latitude value and constrains it to a valid one if it is
            out of range.
            </summary>
            <param name="latitude">Unconstrained latitude value.</param>
            <returns>Constrained latitude value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.LimitLongitude(System.Double)">
            <summary>
            Constrains a longitude value to a valid range.
            </summary>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.LimitCoordinate(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Constrains a coordinate to a valid value.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.GreatCircleDistance(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Calculates the great circle distance between 2 coordinates.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>The great circle distance in meters.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.UnwrapLongitude(System.Double)">
            <summary>
            Takes a longitude value and unwraps it to a valid one if it is out
            of range.
            </summary>
            <param name="longitude">Unconstrained longitude value.</param>
            <returns>Unwrapped longitude value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.Validate(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="coordinate"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.Validate(System.Double,System.Double)">
            <summary>
            Validate the specified coordinate.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.IsValid(System.Double,System.Double)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.AssertValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.AssertValid(System.Double,System.Double)">
            <summary>
            Asserts that the specified coordinate is valid.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.LatLongHelper.CreateCoordinate(System.Double,System.Double)">
            <summary>
            Creates a Coordinate2D from the specified latitude and longitude values.
            Throws if they are invalid.
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the coordinate is invalid.</exception>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.Point2D">
            <summary>
            Point.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            cstor.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinate"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.GetBoundingBox">
            <summary>
            Gets the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Point2D.Coordinate">
            <summary>
            returns the coordinate of this point.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Geometry2D.Ring2D,Microsoft.MapPoint.Geometry.Ring2DCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="exteriorRing"></param>
            <param name="interiorRings"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.#ctor(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="exteriorRing"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Geometry2D.Ring2D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="exteriorRing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.ValidateRing(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D,System.String)">
            <summary>
            Validates that a ring is an acceptable polygon component.
            </summary>
            <param name="ring"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.CalculatePerimeter">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.ExteriorRing">
            <summary>
            Gets the exterior ring of this polygon.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Polygon2D.InteriorRings">
            <summary>
            Gets the interior rings of this polygon.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.#ctor(Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinates"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.CalculateLength">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.GetVertexDistances">
            <summary>
            Gets the distances between each of the vertices.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Polyline2D.Coordinates">
            <summary>
            Gets the coordinates for this geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D">
            <summary>
            Ring.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D"/> class 
            that is empty.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.#ctor(Microsoft.MapPoint.Geometry.Coordinate2DFixedPointCollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinates"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.CalculatePerimeter">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.Clone">
            <summary>
            Deep clones this ring.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint,Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2D.Ring2D.Coordinates">
            <summary>
            Gets the coordinates for this geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Ring2DCollection">
            <summary>
            A read-only collection of Ring2D objects.
            </summary>
            <summary>
            A read-only collection of Ring2D objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.CreateUnsafe(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Ring2DCollection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.CreateWrapper(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D[])">
            <summary>
            Create a lightweight Ring2DCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.#ctor(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.CopyTo(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2DCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2DCollection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Ring2D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2DCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2DCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2DCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier">
            <summary>
            the identifier for a reference system.
            TODO: we should remove IComparable since we don't intend to do any sorting on this class.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.EpsgCodeSpace">
            <summary>
            CodeSpace string for EPSG.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.code">
            <summary>
            the code for the reference system
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.Null">
            <summary>
            No identifier.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="codeSpace"></param>
            <param name="code"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.op_Equality(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            The equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.op_Inequality(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            The inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.op_LessThan(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            Overloads the less-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.op_GreaterThan(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            Overloads the greater-than operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.op_LessThanOrEqual(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            Overloads the less-than-or-equal-to operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.op_GreaterThanOrEqual(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            Overloads the greater-than-or-equal-to operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.Compare(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier,Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            Compares two ReferenceSystemIdentifiers, returning their sorting relationship to one another.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.GetHashCode">
            <summary>
            returns the hash code.
            This needs to be implemented since we're overriding operators != and ==.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.Equals(Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier)">
            <summary>
            Determines whether another object is equal to this one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            This needs to be implemented since we're overriding operators != and ==.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.ToString">
            <summary>
            Overrides ToString.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.CompareTo(System.Object)">
            <summary>
            compare two ReferenceSystemIdentifier's.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.CodeSpace">
            <summary>
            The CodeSpace.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.Code">
            <summary>
            The Code.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.ReferenceSystemIdentifier.IsNull">
            <summary>
            Gets whether or not this identifier is null.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection">
            <remarks>
            A writeable collection of Ring2D objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.Add(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Geometry.Geometry2D.Ring2D)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.Remove(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight Ring2DWriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.ValidateItem(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.CopyTo(Microsoft.MapPoint.Geometry.Geometry2D.Ring2D[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Ring2D object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2DWriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Bezier2">
            <summary>
            An approximating polynomial spline in two dimensions.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Spline2">
            <summary>
            A polynomial curve defined by control points.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Curve2">
            <summary>
            A curve contains a sequence of coordinates.  We use it as a base class
            to model our polyline type, and in the future, splines and Beizer curves.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2">
            <summary>
            Base generic geometry class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="N:Microsoft.MapPoint.Geometry"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.GetBoundingBox">
            <summary>
            Gets the bounding box for this geometry.
            </summary>
            <returns>The bounding box for this geometry.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Derived classes must implement this method to determine whether the bounding box of the geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.CalculateRelativePoint(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            Calculates a relative point.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.Microsoft#MapPoint#Utility#IManagedSize#CalculateSizeInBytes">
            <summary>
            Calculates the managed size of this object in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.SpatialOperations">
            <summary>
            Gets the spatial operations class for this geometry using its CRS.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2.CoordinateType">
            <summary>
            Returns the type of the vertex
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Curve2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            cstor.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Curve2.CalculateLength">
            <summary>
            returns the length of this curve.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Spline2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Spline2.GetPoint(System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance along the spline.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Spline2.GetPolyline(System.Int32)">
            <summary>
            Generates a polyline by approximating the spline with the given number of line segments.
            </summary>
            <param name="segments">The number of line segments to use.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Spline2.GetPolyline(System.Double)">
            <summary>
            Generates a polyline by recursively subdividing.
            </summary>
            <param name="tolerance">The error that an approximated point may have, in terms of linear distance within this curve's CoordinateReferenceSystem.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Spline2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.  Doesn't make direct sense for splines because
            only the approximation of the curve will have a vertex count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Spline2.CalculateLength">
            <summary>
            Gets the approximate length of the spline with arbitrary error.  Error can be controlled
            by using GetPolyline and calling CalculateLength on the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.GetControlPoints">
            <summary>
            Gets the control points for this curve.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Generates a cubic Bezier curve using the supplied control points.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Generates a Bezier curve using the supplied control points of order one less 
            than the number of points.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.GetPoint(System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance along the spline.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.Equals(Microsoft.MapPoint.Geometry.Geometry2.Bezier2)">
            <summary>
            Equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Bezier2.CalculateAdditionalSizeInBytes">
            <summary>
            Get Size
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Box2">
            <summary>
            A Box - bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            default cstor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Constructor
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal constructor, no validation.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Box2.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Box2.MinCoordinate">
            <summary>
            The minimum coordinate for the box
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Box2.MaxCoordinate">
            <summary>
            The maximum coordinate for the box.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2">
            <summary>
            Cardinal Spline.  An interpolating piecewise cubic spline.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.GetControlPoints">
            <summary>
            Gets the control points for this curve.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2D[])">
            <summary>
            Generates a cardinal spline curve using the supplied control points.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="points">Control Points.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2D[],System.Double)">
            <summary>
            Generates a cardinal spline curve using the supplied control points and tension.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="points">Control Points.</param>
            <param name="tension">A value that determines how closely the curve will fit the points.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.GetPoint(System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance along the spline.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.GetBoundingBox">
            <summary>
            Provides an approximate bounding box with arbitrary error.  Error can be controlled
            by using GetPolyline and calling GetBoundingBox on the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Provides an approximate bounding box check with arbitrary error.  Error can be controlled
            by using GetPolyline and calling BoundingBoxOverlaps on the result.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.Equals(Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2)">
            <summary>
            Equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.CalculateAdditionalSizeInBytes">
            <summary>
            Get Size.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.CardinalSpline2.Tension">
            <summary>
            Gets the tension value for this curve.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture">
            <summary>
            Represents a 2D raster area
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.#ctor(System.Byte[],Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Constructs the texture
            </summary>
            <param name="patchData"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mipLevels"></param>
            <param name="stride"></param>
            <param name="textureId"></param>
            <param name="textureName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.#ctor(System.IO.Stream,Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Constructs the texture
            </summary>
            <param name="patchStream"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="mipLevels"></param>
            <param name="height"></param>
            <param name="textureId"></param>
            <param name="textureName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.#ctor(System.Int32,System.Int32,Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.String)">
            <summary>
            Constructor for making a new raster patch
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <param name="textureId"></param>
            <param name="textureName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.ValidateParameters(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Does basic validation of constructor parameters
            </summary>
            <param name="patchData"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.AllocateSourceBitmap(Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32)">
            <summary>
            Allocates the storage and initializes the patch
            </summary>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.GetPixelBitSize">
            <summary>
            Gets the size per pixel in bits
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.GetSourceBytes">
            <summary>
            Gets the source data for the texture as a byte
            array.  May be null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.GetSourceStream">
            <summary>
            Gets the texture as a stream.  May be null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.TextureName">
            <summary>
            The name of the texture (may be null)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.PixelFormat">
            <summary>
            Gets the pixel format
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.Width">
            <summary>
            Width of the patch in pixels
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.Height">
            <summary>
            Height of the patch in pixels
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.MipLevels">
            <summary>
            The number of MipLevels in the texture
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.TextureId">
            <summary>
            The identifier for the texture
            Generally associated with the mesh subset
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.SizeInBytes">
            <summary>
            Gets the size of the image in bytes
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.GeometryTexture.Stride">
            <summary>
            The number of bytes in each row of the bitmap.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Mesh">
            <summary>
            A common base class for generic surfaces
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Mesh.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Creates a new mesh
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Mesh.GetTexture(System.Int32)">
            <summary>
            Gets the texture to apply to the surface
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Mesh.GetBoundingRegion">
            <summary>
            Gets the bounding region for this surface
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Mesh.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Mesh.TextureCount">
            <summary>
            The number of textures applied to this surface
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription">
            <summary>
            Describes one face of the polygonal mesh
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <param name="index3"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.Equals(Microsoft.MapPoint.Geometry.Geometry2.FaceDescription)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.op_Equality(Microsoft.MapPoint.Geometry.Geometry2.FaceDescription,Microsoft.MapPoint.Geometry.Geometry2.FaceDescription)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.op_Inequality(Microsoft.MapPoint.Geometry.Geometry2.FaceDescription,Microsoft.MapPoint.Geometry.Geometry2.FaceDescription)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.TriangleIndex1">
            <summary>
            The index of vertex 1 of the triangle
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.TriangleIndex2">
            <summary>
            The index of vertex 2 of the triangle
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.FaceDescription.TriangleIndex3">
            <summary>
            The index of vertex 3 of the triangle
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.PolygonalMesh`1">
            <summary>
            Placeholder class for 3D mesh types
            </summary>
            <typeparam name="VertexType"></typeparam>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PolygonalMesh`1.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Creates a new mesh
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PolygonalMesh`1.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.PolygonalMesh`1.Vertices">
            <summary>
            The set of vertices for this mesh
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.PolygonalMesh`1.Faces">
            <summary>
            The faces of the mesh
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Point2">
            <summary>
            A Box - bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            default cstor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Constructor
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal constructor, no validation.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Point2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Point2.Coordinate">
            <summary>
            The coordinate for the point
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2">
            <summary>
            Point.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double)">
            <summary>
            cstor.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinate"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,System.Double,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinate"></param>
            <param name="coordinateReferenceSystem"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.GetBoundingBox">
            <summary>
            Gets the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.Coordinate">
            <summary>
            returns the coordinate of this point.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.PointRadius2.Radius">
            <summary>
            returns the radius
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Polygon2">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Geometry2.Ring2,Microsoft.MapPoint.Geometry.Ring2Collection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Polygon2"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="exteriorRing"></param>
            <param name="interiorRings"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.Ring2,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Polygon2"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="exteriorRing"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Geometry2.Ring2)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Polygon2"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="exteriorRing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.ValidateRing(Microsoft.MapPoint.Geometry.Geometry2.Ring2,System.String)">
            <summary>
            Validates that a ring is an acceptable polygon component.
            </summary>
            <param name="ring"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.CalculatePerimeter">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.ExteriorRing">
            <summary>
            Gets the exterior ring of this polygon.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Polygon2.InteriorRings">
            <summary>
            Gets the interior rings of this polygon.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Polyline2">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Coordinate2DCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Polyline2"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.#ctor(Microsoft.MapPoint.Geometry.Coordinate2DCollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Polyline2"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinates"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.CalculateLength">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.GetVertexDistances">
            <summary>
            Gets the distances between each of the vertices.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Polyline2.Coordinates">
            <summary>
            Gets the coordinates for this geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat">
            <summary>
            The available pixel formats
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format16bppGrayscale">
            <summary>
            16bit single sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format32bppGrayscale">
            <summary>
            32bit single integer sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format16bppRgb555">
            <summary>
            5bit triple sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format16bppRgb565">
            <summary>
            5/6/5bit triple sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format24bppRgb">
            <summary>
            8bit triple sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format32bppRgb">
            <summary>
            8bit quad sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format32bppArgb">
            <summary>
            8bit quad sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format64bppArgb">
            <summary>
            16bit quad sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format8bppGrayscale">
            <summary>
            8bit single sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format96bppRgb">
            <summary>
            32bit triple sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format128bppArgb">
            <summary>
            32bit quad sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format128bppArgbf">
            <summary>
            32bit floating point quad sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatDxt1">
            <summary>
            The bytes are DXT1 compressed
            Note the byte array may contain the data for multiple
            MIP levels.  Use the width/height properties to determine
            the number of levels and the data in each.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.Format32bppFloat">
            <summary>
            32bit single floating-point sample
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatWMP">
            <summary>
            Image is Windows Media Photo encoded
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatJpg">
            <summary>
            Image is Jpg encoded
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatPng">
            <summary>
            Image is PNG encoded
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatDxt1Compressed">
            <summary>
            Image is Compressed Dxt1
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatEpitome">
            <summary>
            Image is in compressed epitome format.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatEpitomeParsed">
            <summary>
            Image is in epitome format with the individual image components already decoded.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat.FormatUnknown">
            <summary>
            Format is not specified
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor">
            <summary>
            Struct for representing byte color values
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.Equals(Microsoft.MapPoint.Geometry.Geometry2.SimpleColor)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.op_Equality(Microsoft.MapPoint.Geometry.Geometry2.SimpleColor,Microsoft.MapPoint.Geometry.Geometry2.SimpleColor)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.op_Inequality(Microsoft.MapPoint.Geometry.Geometry2.SimpleColor,Microsoft.MapPoint.Geometry.Geometry2.SimpleColor)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.Alpha">
            <summary>
            The opacity 0 = transparent
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.Red">
            <summary>
            The red component
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.Green">
            <summary>
            The green component
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.SimpleColor.Blue">
            <summary>
            The blue component
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.HighColor">
            <summary>
            Struct for representing integer color values
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.HighColor.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.HighColor.Equals(Microsoft.MapPoint.Geometry.Geometry2.HighColor)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.HighColor.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.HighColor.op_Equality(Microsoft.MapPoint.Geometry.Geometry2.HighColor,Microsoft.MapPoint.Geometry.Geometry2.HighColor)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.HighColor.op_Inequality(Microsoft.MapPoint.Geometry.Geometry2.HighColor,Microsoft.MapPoint.Geometry.Geometry2.HighColor)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.HighColor.Alpha">
            <summary>
            The opacity 0 = transparent
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.HighColor.Red">
            <summary>
            The red component
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.HighColor.Green">
            <summary>
            The green component
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.HighColor.Blue">
            <summary>
            The blue component
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.FloatColor">
            <summary>
            Struct for representing float color values
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.Equals(Microsoft.MapPoint.Geometry.Geometry2.FloatColor)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.op_Equality(Microsoft.MapPoint.Geometry.Geometry2.FloatColor,Microsoft.MapPoint.Geometry.Geometry2.FloatColor)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.op_Inequality(Microsoft.MapPoint.Geometry.Geometry2.FloatColor,Microsoft.MapPoint.Geometry.Geometry2.FloatColor)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.Alpha">
            <summary>
            The opacity 0 = transparent
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.Red">
            <summary>
            The red component
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.Green">
            <summary>
            The green component
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.FloatColor.Blue">
            <summary>
            The blue component
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2">
            <summary>
            Represents a 2D raster area
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Byte[],Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32,System.Int32,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Constructs the raster patch
            </summary>
            <param name="patchBounds"></param>
            <param name="patchData"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Int32[],Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32,System.Int32,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Constructs the raster patch
            </summary>
            <param name="patchBounds"></param>
            <param name="patchData"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Single[],Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32,System.Int32,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Constructs the raster patch
            </summary>
            <param name="patchBounds"></param>
            <param name="patchData"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Int16[],Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32,System.Int32,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Constructs the raster patch
            </summary>
            <param name="patchBounds"></param>
            <param name="patchData"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.ValidateParameters(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Object,System.Int32,System.Int32,System.Int32,System.Single,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Does basic validation of constructor parameters
            </summary>
            <param name="patchBounds"></param>
            <param name="patchData"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="pixelSize"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Int32,System.Int32,Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Constructor for making a new raster patch
            </summary>
            <param name="patchBounds"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Drawing.Bitmap,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Constructor for making a new raster patch.  Does not take ownership of the Bitmap.
            </summary>
            <param name="patchBounds"></param>
            <param name="image"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.#ctor(Microsoft.MapPoint.Geometry.Geometry2.AbstractGeometry2,System.Drawing.Bitmap,System.Drawing.Rectangle,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Constructor for making a new raster patch.  Does not take ownership of the Bitmap.
            </summary>
            <param name="patchBounds"></param>
            <param name="image"></param>
            <param name="rect"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetPixelSize(Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat)">
            <summary>
            Gets the size in bytes for one pixel of the given pixel format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.AllocateSourceBitmap(Microsoft.MapPoint.Geometry.Geometry2.PatchPixelFormat,System.Int32,System.Int32)">
            <summary>
            Allocates the storage and initializes the patch
            </summary>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetBoundingBox">
            <summary>
            Gets the bounding box for this geometry.
            </summary>
            <returns>The bounding box for this geometry.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Gets the pixel at the specified x,y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.ScaleToHighRange(System.Byte)">
            <summary>
            Scale pixel values to the range used by the HighColor type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.ScaleToHighRange(System.Int16)">
            <summary>
            Scale pixel values to the range used by the HighColor type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.ScaleToHighRange(System.Single)">
            <summary>
            Scale pixel values to the range used by the HighColor type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetPixelHighColor(System.Int32,System.Int32)">
            <summary>
            Gets the pixel at the specified x,y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.ScaleToFloatRange(System.Byte)">
            <summary>
            Scale pixel values to the range used by the FloatColor type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.ScaleToFloatRange(System.Int16)">
            <summary>
            Scale pixel values to the range used by the FloatColor type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.ScaleToFloatRange(System.Int32)">
            <summary>
            Scale pixel values to the range used by the FloatColor type.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetPixelFloatColor(System.Int32,System.Int32)">
            <summary>
            Gets the pixel at the specified x,y
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetSourceBytes">
            <summary>
            Gets the source data for byte based samples
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetSourceShorts">
            <summary>
            Gets the source data for short based samples
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetSourceInts">
            <summary>
            Gets the source data for int based samples
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.GetSourceFloats">
            <summary>
            Gets the source data for float based samples
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.PatchBounds">
            <summary>
            Returns the bounding region for this patch
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.PixelFormat">
            <summary>
            Gets the pixel format
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.Width">
            <summary>
            Width of the patch in pixels
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.Height">
            <summary>
            Height of the patch in pixels
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.RasterPatch2.Stride">
            <summary>
            The number of bytes in each row of the bitmap.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry2.Ring2">
            <summary>
            Ring.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Ring2"/> class 
            that is empty.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Coordinate2DCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Ring2"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.#ctor(Microsoft.MapPoint.Geometry.Coordinate2DCollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry2.Ring2"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinates"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.CalculatePerimeter">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.Clone">
            <summary>
            Deep clones this ring.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate2D,Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry2.Ring2.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry2.Ring2.Coordinates">
            <summary>
            Gets the coordinates for this geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Ring2Collection">
            <summary>
            A read-only collection of Ring2D objects.
            </summary>
            <summary>
            A read-only collection of Ring2 objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.CreateUnsafe(Microsoft.MapPoint.Geometry.Geometry2.Ring2[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Ring2Collection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.CreateWrapper(Microsoft.MapPoint.Geometry.Geometry2.Ring2[])">
            <summary>
            Create a lightweight Ring2Collection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.#ctor(Microsoft.MapPoint.Geometry.Geometry2.Ring2[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.CopyTo(Microsoft.MapPoint.Geometry.Geometry2.Ring2[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring2Collection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2Collection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Ring2 object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2Collection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2Collection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring2Collection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection">
            <remarks>
            A writeable collection of Ring2 objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.Add(Microsoft.MapPoint.Geometry.Geometry2.Ring2)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Geometry.Geometry2.Ring2)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.Remove(Microsoft.MapPoint.Geometry.Geometry2.Ring2)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight Ring2WriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.ValidateItem(Microsoft.MapPoint.Geometry.Geometry2.Ring2,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.CopyTo(Microsoft.MapPoint.Geometry.Geometry2.Ring2[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Ring2 object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring2WriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Bezier3">
            <summary>
            An approximating polynomial spline in three dimensions.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Spline3">
            <summary>
            A polynomial curve defined by control points.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Curve3">
            <summary>
            A curve contains a sequence of coordinates.  We use it as a base class
            to model our polyline type, and in the future, splines and Beizer curves.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3">
            <summary>
            Base generic geometry class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="N:Microsoft.MapPoint.Geometry"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.GetBoundingBox">
            <summary>
            Gets the bounding box for this geometry.
            </summary>
            <returns>The bounding box for this geometry.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Derived classes must implement this method to determine whether the bounding box of the geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.CalculateRelativePoint(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D,System.Double)">
            <summary>
            Calculates a relative point.
            </summary>
            <param name="start"></param>
            <param name="finish"></param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by a derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.Microsoft#MapPoint#Utility#IManagedSize#CalculateSizeInBytes">
            <summary>
            Calculates the managed size of this object in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.SpatialOperations">
            <summary>
            Gets the spatial operations class for this geometry using its CRS.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.AbstractGeometry3.CoordinateType">
            <summary>
            Returns the type of the vertex
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Curve3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            cstor.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Curve3.CalculateLength">
            <summary>
            returns the length of this curve.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Spline3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Spline3.GetPoint(System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance along the spline.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Spline3.GetPolyline(System.Int32)">
            <summary>
            Generates a polyline by approximating the spline with the given number of line segments.
            </summary>
            <param name="segments">The number of line segments to use.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Spline3.GetPolyline(System.Double)">
            <summary>
            Generates a polyline by recursively subdividing.
            </summary>
            <param name="tolerance">The error that an approximated point may have, in terms of linear distance within this curve's CoordinateReferenceSystem.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Spline3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.  Doesn't make direct sense for splines because
            only the approximation of the curve will have a vertex count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Spline3.CalculateLength">
            <summary>
            Gets the approximate length of the spline with arbitrary error.  Error can be controlled
            by using GetPolyline and calling CalculateLength on the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.GetControlPoints">
            <summary>
            Gets the control points for this curve.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Generates a cubic Bezier curve using the supplied control points.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D[])">
            <summary>
            Generates a Bezier curve using the supplied control points of order one less 
            than the number of points.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.GetPoint(System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance along the spline.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.Equals(Microsoft.MapPoint.Geometry.Geometry3.Bezier3)">
            <summary>
            Equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Bezier3.CalculateAdditionalSizeInBytes">
            <summary>
            Get Size
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3">
            <summary>
            An approximating polynomial spline surface.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3">
            <summary>
            A polynomial surface defined by control points.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3.GetPoint(System.Double,System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance across the spline surface.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3.GetOutline(System.Double)">
            <summary>
            Returns a polygon that approximates the boundary of the surface.
            </summary>
            <param name="tolerance">The error that an approximated point may have, in terms of linear distance within this curve's CoordinateReferenceSystem.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3.GetLattice(System.Double,System.Int32)">
            <summary>
            Gets a set of polylines that approximate the surface in a lattice layout.
            </summary>
            <param name="tolerance">The error that an approximated point may have, in terms of linear distance within this curve's CoordinateReferenceSystem.</param>
            <param name="divisions">The number of lines to use along each edge of the lattice.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3.Triangulate(System.Double)">
            <summary>
            Returns a set of points that define triangles approximating the surface.  Returns an array of points
            where every three points defines an independent triangle.
            </summary>
            <param name="tolerance">The error that an approximated point may have, in terms of linear distance within this curve's CoordinateReferenceSystem.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3.GetPolyline(System.Double,System.Double,System.Boolean)">
            <summary>
            Generates a polyline by recursively subdividing.
            </summary>
            <param name="tolerance">The error that an approximated point may have.</param>
            <param name="val"></param>
            <param name="acrossU"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.SplineSurface3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.  Doesn't make direct sense for spline surfaces because
            only the approximation of the surface will have a vertex count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.GetControlPoints">
            <summary>
            Gets the control points for this surface.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D[][])">
            <summary>
            Generates a Bezier curve using the supplied control points of order one less 
            than the number of points.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.GetPoint(System.Double,System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance along the spline.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.Equals(Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3)">
            <summary>
            Equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.BezierSurface3.CalculateAdditionalSizeInBytes">
            <summary>
            Get size
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Box3">
            <summary>
            A Box - bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            default cstor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Constructor
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal constructor, no validation.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Box3.ToString">
            <summary>
            Gets a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.Box3.MinCoordinate">
            <summary>
            The minimum coordinate for the box
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.Box3.MaxCoordinate">
            <summary>
            The maximum coordinate for the box.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3">
            <summary>
            Cardinal Spline.  An interpolating piecewise cubic spline.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.GetControlPoints">
            <summary>
            Gets the control points for this curve.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D[])">
            <summary>
            Generates a cardinal spline curve using the supplied control points.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="points">Control Points.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D[],System.Double)">
            <summary>
            Generates a cardinal spline curve using the supplied control points and tension.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="points">Control Points.</param>
            <param name="tension">A value that determines how closely the curve will fit the points.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.GetPoint(System.Double)">
            <summary>
            Gets a point that lies a specified parameterized distance along the spline.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.GetBoundingBox">
            <summary>
            Provides an approximate bounding box with arbitrary error.  Error can be controlled
            by using GetPolyline and calling GetBoundingBox on the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Provides an approximate bounding box check with arbitrary error.  Error can be controlled
            by using GetPolyline and calling BoundingBoxOverlaps on the result.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.Equals(Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3)">
            <summary>
            Equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.CalculateAdditionalSizeInBytes">
            <summary>
            Get Size
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.CardinalSpline3.Tension">
            <summary>
            Gets the tension value for this curve.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.IVertex">
            <summary>
            Defines a geometry vertex, such as used in a 3D model.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.IVertex.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            Writes this vertex out in binary serialized form.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.IVertex.BinaryRead(System.IO.BinaryReader)">
            <summary>
            Reads this vertex from binary serialized form.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.IVertex.Format">
            <summary>
            The types of elements the vertex contains, such as positions, texture coordinates, etc.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.IVertex.Stride">
            <summary>
            The serialized size in bytes of a single vertex.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.IPositionVertex">
            <summary>
            Defines a geometry vertex that supports a set of 3D position coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.IPositionVertex.X">
            <summary>
            The X component of the vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.IPositionVertex.Y">
            <summary>
            The Y component of the vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.IPositionVertex.Z">
            <summary>
            The Z component of the vertex.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties">
            <summary>
            Classes may implement this interface to provide properties for the kinds of intersections they handle.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties.IsSolid">
            <summary>
            Gets whether or not the object that implements this interface 
            will test against "solid" objects.  Non solid objects will not be
            anchored on or used in world visibility tests.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties.IntersectionTagType">
            <summary>
            Gets the type of the tag that the object that implements this 
            interface will attach to objects.  This may be used to filter 
            out unwanted objects prior to performing intersection testing.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.IntersectResult">
            <summary>
            Defines the enumeration of possible results from an intersection test.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.IntersectResult.TotalMiss">
            <summary>
            No intersection occurred.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.IntersectResult.Collides">
            <summary>
            Intersection occurred.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.IntersectResult.ContainsStart">
            <summary>
            Intersection could not be tested since the starting position is contained.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.IntersectResult.FullIntersect">
            <summary>
            One item is fully contained within the other.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.IRay3DIntersect">
            <summary>
            Classes may implement this interface to indicate that they provide ray intersection testing code.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.IRay3DIntersect.Intersects(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Tests the specified ray against the implementing class and sets all of the intersections that occurred.
            </summary>
            <param name="intersections">List of intersections to append to with
            new intersections.</param>
            <returns>True if any intersections occurred.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.ISweptSphereDIntersect">
            <summary>
            Interface for performing intersection tests with a swept sphere.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.ISweptSphereDIntersect.Intersects(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList)">
            <summary>
            Tests to see if a swept sphere intersects with the item that implements this interface.
            </summary>
            <param name="sweptSphere"></param>
            <param name="intersections">List to which intersections should be added.</param>
            <returns>True if any intersections occurred.</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp">
            <summary>
            Encapsulates an immutible orientation described in terms of a look-at and look-up vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp"/> 
            class.
            The specified values are normalized and forced into the appropriate 
            relationship.
            </summary>
            <param name="lookAt"></param>
            <param name="lookUp"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.ToRollPitchYaw">
            <summary>
            Gets the orientation in terms of roll, pitch, and yaw along Y/X/Z.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.Transform(Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms the current orientation by the specified matrix.
            </summary>
            <param name="orientation"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.ToMatrix">
            <summary>
            Creates a matrix that transforms an item with Y-forward, X-right, 
            Z-up alignment to be oriented to this look-at, look-up pair.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp,Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp)">
            <summary>
            Overrides the equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp,Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp)">
            <summary>
            Overrides the inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.Equals(Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp)">
            <summary>
            Returns whether or not this viewpoint is exactly equal to the specified viewpoint.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.FuzzyEquals(Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp)">
            <summary>
            Returns true if the values are appoximately equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.Default">
            <summary>
            Default look-toward, look-up.  This is the default roll/pitch/yaw orientation.
            [0 1 0] [0 0 1].     
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.Down">
            <summary>s
            Default looking down.
            [0 0 -1] [0 1 0]
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.LookAt">
            <summary>
            Gets the look-at vector.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.LookUp">
            <summary>
            Gets the look-up vector.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp.Normal">
            <summary>
            Gets cross product of the look-at and look-up vectors which is a 
            vector pointing to the "right".
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D">
            <summary>
            Matrix with two rows and two columns.  This implementation provides primarily mathematical operations.
            
            | m.X.X m.X.Y |
            | m.Y.X m.Y.Y | 
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.X">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Y">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.#ctor">
            <summary>
            Initialize to the zero matrix.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Initialize with the rows of the matrix.
            </summary>
            <param name="x">The first row</param>
            <param name="y">The second row</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Create the matrix I * vec
            </summary>
            <param name="vec">Initialization vector</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize the elements of the matrix
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Add(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D)">
            <summary>
            Add this matrix and the passed-in matrix
            </summary>
            <param name="mat">Right hand side of add operation</param>
            <returns>Sum of this matrix and the argument matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D)">
            <summary>
            Create the result of subtracting a matrix from this matrix
            </summary>
            <param name="mat">Right hand side of subtract operation</param>
            <returns>Result of subtracting the argument matrix from this matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Negate">
            <summary>
            Get a copy of this matrix multiplied by -1
            </summary>
            <returns>A copy of this matrix, negated</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Multiply(System.Double)">
            <summary>
            Create a new matrix that equals this matrix scaled by s
            </summary>
            <param name="s">The scaling factor</param>
            <returns>A scaled matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Determinant">
            <summary>
            Find the determinant of this matrix
            </summary>
            <returns>The determinant of this matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D,Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D)">
            <summary>
            Addition operator
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D,Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D)">
            <summary>
            Subtraction operator
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.op_UnaryNegation(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D)">
            <summary>
            Negation operator
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D,System.Double)">
            <summary>
            Scaling operator
            </summary>
            <param name="mat"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D)">
            <summary>
            Scaling operator
            </summary>
            <param name="scale"></param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D,Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D)">
            <summary>
            Multiplication operator
            </summary>
            <param name="m0"></param>
            <param name="m1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Multiply a matrix by a vector
            </summary>
            <param name="mat"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.MakeIdentity">
            <summary>
            Builds an identity matrix.
            </summary>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Transpose">
            <summary>
            Return the transpose of this matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Rotate(System.Double)">
            <summary>
            Return a rotation matrix that will rotate a given point by the passed-in angle
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix2x2D.Determinant(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get the determinant of a 2x2 matrix with the passed in values
            </summary>
            <param name="xx"></param>
            <param name="xy"></param>
            <param name="yx"></param>
            <param name="yy"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.X">
            <summary>
            The first row of the matrix
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Y">
            <summary>
            The second row of the matrix
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Z">
            <summary>
            The third row of the matrix
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Zero">
            <summary>
            Gets an empty matrix.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.MakeIdentity">
            <summary>
            Builds an identity matrix.
            </summary>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.#ctor">
            <summary>
            Initialize to the zero matrix
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initialize with the rows of the matrix.
            </summary>
            <param name="x">The first row</param>
            <param name="y">The second row</param>
            <param name="z">The third row</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Create the matrix I * vec
            </summary>
            <param name="vec">Initialization vector</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize the elements of the matrix
            </summary>
            <param name="m00"></param>
            <param name="m01"></param>
            <param name="m02"></param>
            <param name="m10"></param>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m20"></param>
            <param name="m21"></param>
            <param name="m22"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Add(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Add this matrix and the passed-in matrix
            </summary>
            <param name="mat">Right hand side of add operation</param>
            <returns>Sum of this matrix and the argument matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Create the result of subtracting a matrix from this matrix
            </summary>
            <param name="mat">Right hand side of subtract operation</param>
            <returns>Result of subtracting the argument matrix from this matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Negate">
            <summary>
            Get a copy of this matrix multiplied by -1
            </summary>
            <returns>A copy of this matrix, negated</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Multiply(System.Double)">
            <summary>
            Create a new matrix that equals this matrix scaled by s
            </summary>
            <param name="s">The scaling factor</param>
            <returns>A scaled matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Determinant">
            <summary>
            Find the determinant of this matrix
            </summary>
            <returns>The determinant of this matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Inverse">
            <summary>
            Calculate the inverse as the adjoint divided by the determinant
            </summary>
            <returns>A copy of this matrix, inverted, or null if not invertible</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Addition operator
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Subtraction operator
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_UnaryNegation(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Negation operator
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D,System.Double)">
            <summary>
            Scaling operator
            </summary>
            <param name="mat"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Scaling operator
            </summary>
            <param name="scale"></param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Multiplication operator
            </summary>
            <param name="m0"></param>
            <param name="m1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            PRE-Multiply the input column vector by the matrix like this: matrix * vector 
            </summary>
            <param name="mat"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Transpose">
            <summary>
            Return the transpose of this matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.SkewSymmetric(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Return the skew symmetric matrix corresponding to the passed-in vector
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Rotation(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Return the matrix that represents the rotation described by the passed-in quaternion
            ALERT: the semantics of the matrix created are opposite to that of Matrix4x4D.RotationQuaternion                
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Determinant(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Return the determinant of the matrix described by the passed-in values
            </summary>
            <param name="xx"></param>
            <param name="xy"></param>
            <param name="xz"></param>
            <param name="yx"></param>
            <param name="yy"></param>
            <param name="yz"></param>
            <param name="zx"></param>
            <param name="zy"></param>
            <param name="zz"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D.Adjoint">
            <summary>
            Return the adjoint of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Normal3D">
            <summary>
            Implementation of a normalized 3D vector
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Normal3D"/> structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Normal3D"/> structure from an un-normalized vector.
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.Normalize">
            <summary>
            Normalize this vector in place.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.Lerp(Microsoft.MapPoint.Geometry.VectorMath.Normal3D,Microsoft.MapPoint.Geometry.VectorMath.Normal3D,System.Double)">
            <summary>
            Linearly interpolate by w between vectors v0 and v1
            </summary>
            <param name="norm0"></param>
            <param name="norm1"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.op_Implicit(Microsoft.MapPoint.Geometry.VectorMath.Normal3D)~Microsoft.MapPoint.Geometry.VectorMath.Vector3D">
            <summary>
            Convert the normalized vector to a regular Vector3D.
            </summary>
            <param name="norm"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.x">
            <summary>
            The x-component of the normalized vector
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.y">
            <summary>
            The y-component of the normalized vector
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Normal3D.z">
            <summary>
            The z-component of the normalized vector
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Orientation">
            <summary>
            Encapsulates an orientation of various types, converting automatically
            between them when necessary.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.OnChanging">
            <summary>
            Raises the Changing event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.OnChanged">
            <summary>
            Raises the Changed event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Orientation"/> class
            from another orientation.
            </summary>
            <param name="orientation"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.#ctor(Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Orientation"/> class 
            based on a look-at/look-up.
            </summary>
            <param name="lookAtLookUp"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.#ctor(Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Orientation"/> class 
            based on a roll/pitch/yaw.
            </summary>
            <param name="rollPitchYaw"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.#ctor(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Orientation"/> class 
            based on a quaternion.
            </summary>
            <param name="quaternion"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.#ctor(Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Orientation"/> class 
            from a snapshot.
            </summary>
            <param name="snapshot"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.CalculateRotation(Microsoft.MapPoint.Geometry.VectorMath.Orientation,Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Given two orientations, calculate the matrix to rotate between them
            </summary>
            <param name="begin">begining orientation</param>
            <param name="end">ending orientation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.SilentCopy(Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Copies from a source orientation to this, raising no events.
            This should be used with care as classes that rely on the events
            will not update properly.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.SilentCopy(Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot)">
            <summary>
            Copies from a source orientation to this, raising no events.
            This should be used with care as classes that rely on the events
            will not update properly.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Copy(Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Copies from a source orientation to this orientation, raising the 
            appropriate events.  
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Copy(Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot)">
            <summary>
            Copies from a source orientation snapshot to this orientation, 
            raising the appropriate events.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.GetHashCode">
            <summary>
            Calculates hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Orientation,Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Compares equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Orientation,Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Compares inequality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Equals(System.Object)">
            <summary>
            Compares equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Equals(Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.LookAtLookUp">
            <summary>
            Gets or sets a look-at/look-up orientation.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.RollPitchYaw">
            <summary>
            Gets or sets a roll/pitch/yaw orientation.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Quaternion">
            <summary>
            Gets or sets a quaternion orientation.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Roll">
            <summary>
            Gets or sets the roll of this orientation.
            This is a shortcut to dealing with the RollPitchYaw property.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Pitch">
            <summary>
            Gets or sets the pitch of this orientation.
            This is a shortcut to dealing with the RollPitchYaw property.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Yaw">
            <summary>
            Gets or sets the yaw of this orientation.
            This is a shortcut to dealing with the RollPitchYaw property.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.LookAt">
            <summary>
            Gets or sets the Look At vector of this orientation.
            This is a shortcut to LookAtLookUp.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Orientation.LookUp">
            <summary>
            Gets or sets the Look Up vector of this orientation.
            This is a shortcut to LookAtLookUp.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Changing">
            <summary>
            Raised just before the orientation is changed.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Geometry.VectorMath.Orientation.Changed">
            <summary>
            Raised after the orientation has changed.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Orientation.ChangeDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot">
            <summary>
            Read-only snapshot of an orientation.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Initializes a new instance of an <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot"/> 
            class from an orientation.
            </summary>
            <param name="orientation"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.Equals(System.Object)">
            <summary>
            Compares equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.GetHashCode">
            <summary>
            Returns hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.Equals(Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot,Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot)">
            <summary>
            Compares equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot,Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot)">
            <summary>
            Compares inequality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.LookAtLookUp">
            <summary>
            Gets the orientation in terms of look-at/look-up.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.RollPitchYaw">
            <summary>
            Gets the orientation in terms of roll/pitch/yaw.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.Quaternion">
            <summary>
            Gets the orientation in terms of a quaternion.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.LookAt">
            <summary>
            Gets the look-at for this orientation.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.OrientationSnapshot.LookUp">
            <summary>
            Gets the look-up for this orientation.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Point3">
            <summary>
            A Box - bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            default cstor
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Constructor
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal constructor, no validation.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Point3.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.Point3.Coordinate">
            <summary>
            The coordinate for the point
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3">
            <summary>
            Point and a radius; defines a sphere.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.CoordinateSystems.Coordinate3D,System.Double)">
            <summary>
            cstor.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinate"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.#ctor(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,System.Double,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinate"></param>
            <param name="coordinateReferenceSystem"></param>
            <param name="radius"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.GetBoundingBox">
            <summary>
            Gets the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.Coordinate">
            <summary>
            returns the coordinate of this point.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.PointRadius3.Radius">
            <summary>
            returns the radius
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Polygon3">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Geometry3.Ring3,Microsoft.MapPoint.Geometry.Ring3Collection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Polygon3"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="exteriorRing"></param>
            <param name="interiorRings"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.#ctor(Microsoft.MapPoint.Geometry.Geometry3.Ring3,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Polygon3"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="exteriorRing"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Geometry3.Ring3)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Polygon3"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="exteriorRing"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.ValidateRing(Microsoft.MapPoint.Geometry.Geometry3.Ring3,System.String)">
            <summary>
            Validates that a ring is an acceptable polygon component.
            </summary>
            <param name="ring"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.CalculatePerimeter">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.ExteriorRing">
            <summary>
            Gets the exterior ring of this polygon.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.Polygon3.InteriorRings">
            <summary>
            Gets the interior rings of this polygon.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Polyline3">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Coordinate3DCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Polyline3"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.#ctor(Microsoft.MapPoint.Geometry.Coordinate3DCollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Polyline3"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinates"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.CalculateLength">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.GetVertexDistances">
            <summary>
            Gets the distances between each of the vertices.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.Polyline3.Coordinates">
            <summary>
            Gets the coordinates for this geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Position">
            <summary>
            Encapsulates a position.  This class supports only a 3D vector 
            position, but it can be derived from to support other position 
            types.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.OnVectorChanging">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.OnVectorChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.OnChanging">
            <summary>
            Called when a position has changed, thereby raising the Changed 
            event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.OnChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.NeedVector">
            <summary>
            Derived classes can override this to recalculate the vector 
            position if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.#ctor">
            <summary>
            Derived classes can use this constructor if they are setting up the
            state of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Position"/> class.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Position"/> class.
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Position"/> class.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.#ctor(Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Position"/> class.
            </summary>
            <param name="snapshot"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.SilentCopy(Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Copies from a source position to this, raising no events.
            This should be used with care as classes that rely on the events
            will not update properly.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.SilentCopy(Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.Copy(Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Copies from a source position to this position, raising the 
            appropriate event.  
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.Copy(Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.op_Implicit(Microsoft.MapPoint.Geometry.VectorMath.Position)~Microsoft.MapPoint.Geometry.VectorMath.Vector3D">
            <summary>
            Allow implicit conversion to Vector3D.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.GetHashCode">
            <summary>
            Returns hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.Equals(System.Object)">
            <summary>
            Compares eqaulity
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.Equals(Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Position,Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Compares equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Position.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Position,Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Compares inequality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Position.Vector">
            <summary>
            Gets or sets the vector representation of a position.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Geometry.VectorMath.Position.Changing">
            <summary>
            
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Geometry.VectorMath.Position.Changed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Position.ChangeDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot">
            <summary>
            Read-only snapshot of a position.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.Vector">
            <summary>
            Gets the 3D vector representing the position.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot"/> 
            class.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot"/> 
            class.
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.Equals(System.Object)">
            <summary>
            Compares equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.GetHashCode">
            <summary>
            Returns hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.Equals(Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot,Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot)">
            <summary>
            Compares equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot,Microsoft.MapPoint.Geometry.VectorMath.PositionSnapshot)">
            <summary>
            Compares inequality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Geometry3.Ring3">
            <summary>
            Ring.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Ring3"/> class 
            that is empty.
            </summary>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.#ctor(Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem,Microsoft.MapPoint.Geometry.Coordinate3DCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Ring3"/> class.
            </summary>
            <param name="coordinateReferenceSystem"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.#ctor(Microsoft.MapPoint.Geometry.Coordinate3DCollection,Microsoft.MapPoint.CoordinateSystems.CoordinateReferenceSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Geometry3.Ring3"/> class.
            Internal only constructor that DOES NO VALIDATION
            </summary>
            <param name="coordinates"></param>
            <param name="coordinateReferenceSystem"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.CalculatePerimeter">
            <summary>
            Calculates the perimeter around the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.Clone">
            <summary>
            Deep clones this ring.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.GetVertexCount">
            <summary>
            Gets the number vertices in this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.GetBoundingBox">
            <summary>
            Returns the bounding box for this geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.BoundingBoxOverlaps(Microsoft.MapPoint.CoordinateSystems.Coordinate3D,Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Determines whether this geometry overlaps the specified box.
            </summary>
            <param name="minCoordinate"></param>
            <param name="maxCoordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.Equals(System.Object)">
            <summary>
            Compare this geometry to another geometry coordinate by coordinate.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.GetHashCode">
            <summary>
            Implement hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Geometry3.Ring3.CalculateAdditionalSizeInBytes">
            <summary>
            Returns the additional size consumed by this derivation.
            </summary>
            <returns>Size in bytes.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Geometry3.Ring3.Coordinates">
            <summary>
            Gets the coordinates for this geometry.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Ring3Collection">
            <summary>
            A read-only collection of Ring3D objects.
            </summary>
            <summary>
            A read-only collection of Ring3 objects.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.CreateUnsafe(Microsoft.MapPoint.Geometry.Geometry3.Ring3[])">
            <summary>
            Create a lightweight wrapper around an existing array. NOTE: This is
            unsafe and places the burden of caution on the caller not to modify
            the array after passing it in.
            </summary>
            <param name="valuesArray"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Ring3Collection.Empty">
            <summary>
            A read-only empty instance of the class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.CreateWrapper(Microsoft.MapPoint.Geometry.Geometry3.Ring3[])">
            <summary>
            Create a lightweight Ring3Collection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.GetWriteableCopy">
            <summary>
            Create a writeable copy of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.#ctor(Microsoft.MapPoint.Geometry.Geometry3.Ring3[])">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.CopyTo(Microsoft.MapPoint.Geometry.Geometry3.Ring3[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Ring3Collection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring3Collection.Item(System.Int32)">
            <summary>
            Gets the specified object from the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Ring3 object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring3Collection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring3Collection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Ring3Collection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection">
            <remarks>
            A writeable collection of Ring3 objects.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the collection.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.Add(Microsoft.MapPoint.Geometry.Geometry3.Ring3)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.Insert(System.Int32,Microsoft.MapPoint.Geometry.Geometry3.Ring3)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.Remove(Microsoft.MapPoint.Geometry.Geometry3.Ring3)">
            <summary>
            Remove the first instance of the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.Clear">
            <summary>
            Clear the contents of the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.Sort">
            <summary>
            Sorts the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.CreateWrapper(System.Collections.ArrayList)">
            <summary>
            Create a lightweight Ring3WriteableCollection wrapper around an
            existing list.
            </summary>
            <remarks>
            Note: Once the wrapper has been created, modifying the original
            list can have unforeseen consequences. Calling CreateWrapper()
            is assumed to give the created collection ownership of the list.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.GetReadOnlyCopy">
             <summary>
             Get a read-only copy of this collection, leaving this
             collection unaffected (still writeable).
             </summary>
             <remarks>
             This method differs from ToReadOnly() in that it makes
             a copy of the collection, but leaves the collection in
             a writeable state.
            
             Use ToReadOnly() for better performance when you don't
             need to work with the writeable collection afterward.
             Use GetReadOnlyCopy() when you want to allow modifying
             the writeable collection afterward.
             </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.ValidateItem(Microsoft.MapPoint.Geometry.Geometry3.Ring3,System.String)">
            <summary>
            Verifies that the item is valid for adding to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.ShallowClone">
            <summary>
            Clone the collection.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.CopyTo(Microsoft.MapPoint.Geometry.Geometry3.Ring3[],System.Int32)">
            <summary>
            ICollection implementation.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.GetEnumerator">
            <summary>
            IEnumerable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the specified object in the collection.
            </summary>
            <param name="index">Index of the value to retrieve.</param>
            <returns>Ring3 object.</returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.Count">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.IsSynchronized">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.WriteableCollections.Ring3WriteableCollection.SyncRoot">
            <summary>
            ICollection implementation.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection">
            <summary>
            Represents one collision in a ray intersection test.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Int32,System.Object,System.Object,Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties,System.IComparable,System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection"/> class.
            </summary>
            <param name="position"></param>
            <param name="distance"></param>
            <param name="normal"></param>
            <param name="faceIndex"></param>
            <param name="source"></param>
            <param name="tag"></param>
            <param name="properties"></param>
            <param name="presorter"></param>
            <param name="postsorter"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.CompareTo(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection)">
            <summary>
            Compares this intersection to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.CompareSorters(System.IComparable,System.IComparable)">
            <summary>
            Compare the pre or post sorters.  Since they are user-provided, we can't
            trust them to be consistent so we will arbitrate if necessary.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.CompareTo(System.Object)">
            <summary>
            Compares this intersection to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.ToString">
            <summary>
            Returns a string representation of this intersection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Position">
            <summary>
            Gets the position in space at which the ray intersected the Tag.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Distance">
            <summary>
            Gets the distance from the source to the point at which the intersection occurred.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Normal">
            <summary>
            Gets the normal of the surface on which the ray intersected.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.FaceIndex">
            <summary>
            Gets the index of the face that was hit.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Source">
            <summary>
            Gets or sets the object that initiated the intersection test that 
            caused this intersection.  Note that this value is copied from 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> if this object is added to a 
            list.  The reason for this is that multiple things may perform 
            intersection tests and their results get aggregated.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Tag">
            <summary>
            Gets a pointer to the object that was hit by this 
            intersection.
            Note that this value can be changed as its intended usage is that 
            methods higher up the call stack may create new objects with the 
            old tag stored inside in order to communicate more information 
            upward.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Properties">
            <summary>
            Provides properties about the type of intersections supported by the intersected object.
            May be null if the object did not supply them.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Presort">
            <summary>
            A comparable to use to sort intersections before accounting for distance.
            If null, distance will be used first instead.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection.Postsort">
            <summary>
            A comparable to use to sort intersections if the presort and distance are equal.
            If null, only the presort (if present) and distance will be used.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionInclude">
            <summary>
            Specify additional tests to perform intersections on.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionInclude.Normal">
            <summary>
            Include the normal objects.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionInclude.CompleteEvaluation">
            <summary>
            If set, keep checking even if distance is greater than length.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionInclude.DisabledModels">
            <summary>
            Include disabled models in the intersection.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList">
            <summary>
            Encapsulates a smart list of <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection"/> objects.  The list 
            manages the source of objects, and testing matches.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.#ctor(System.Object,Microsoft.MapPoint.Geometry.VectorMath.Ray3D)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class with no limit on the 
            length of the ray, and assuming non-complete evaluation.
            </summary>
            <param name="source">Pointer to object that is making the intersection request.</param>
            <param name="ray">The ray along which to find intersections.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.#ctor(System.Object,Microsoft.MapPoint.Geometry.VectorMath.Ray3D,System.Double)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class assuming non-complete 
            evaulation.
            </summary>
            <param name="source">Pointer to object that is making the intersection request.</param>
            <param name="ray">The ray along which to find intersections.</param>
            <param name="length">The distance along the ray to search.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.#ctor(System.Object,Microsoft.MapPoint.Geometry.VectorMath.Ray3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionInclude)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class.
            </summary>
            <param name="source">Pointer to object that is making the intersection request.</param>
            <param name="ray">The ray along which to find intersections.</param>
            <param name="length">The distance along the ray to search.</param>
            <param name="include">Additional tests to perform when intersecting.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.#ctor(System.Object,Microsoft.MapPoint.Geometry.VectorMath.Ray3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionInclude,System.Predicate{Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class.
            </summary>
            <param name="source">Pointer to object that is making the intersection request.</param>
            <param name="ray">The ray along which to find intersections.</param>
            <param name="length">The distance along the ray to search.</param>
            <param name="include">Additional tests to perform when intersecting.</param>
            <param name="propertyFilter">May be used to reject possible intersection candidates before any math is done by checking their properties.  
            If the predicate returns true it indicates the candidate should be included.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.CreateDerived(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class from a parent list, 
            transforming that list's ray into a local space for this list.
            The AddList method should be used to merge the list back in
            once it has been populated.
            </summary>
            <param name="parentList">List from which all of the values should be copied.</param>
            <param name="toLocal">Tranform to convert the parent list's ray into a local space for this list.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.CreateDerived(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList,System.Predicate{Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class from a parent list, 
            replacing the property filter with a new one.
            The AddList method should be used to merge the list back in
            once it has been populated.
            </summary>
            <param name="parentList">List from which all of the values should be copied.</param>
            <param name="propertyFilter">Replacement property filter to put on this list.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.CreateDerived(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList,System.Object)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class from a parent list, 
            replacing the source with a new one.
            The AddList method should be used to merge the list back in
            once it has been populated.
            </summary>
            <param name="parentList">List from which all of the values should be copied.</param>
            <param name="source">Replacement source to put on this list.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.CreateDerived(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList,System.Object,System.Predicate{Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class from a parent list, 
            replacing the property filter and source with new ones.
            The AddList method should be used to merge the list back in
            once it has been populated.
            </summary>
            <param name="parentList">List from which all of the values should be copied.</param>
            <param name="source">Replacement source to put on this list.</param>
            <param name="propertyFilter">Replacement property filter to put on this list.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.SetRay(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,System.Double)">
            <summary>
            Set a new ray for the list, performing transforms as appropriate.
            </summary>
            <param name="ray"></param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Clear">
            <summary>
            Removes all intersections from the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.PassesPropertyFilter(Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties)">
            <summary>
            Tests whether the given candidate should be included in the list based on its properties.
            </summary>
            <param name="candidate">The candidate to test.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.PassesPositionTest(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Tests whether the point is within the length of the ray.
            </summary>
            <param name="position">The point to test.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Int32,System.Object,Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties,System.Boolean)">
            <summary>
            Adds an intersection to the list, checking if it passes filters and transforming it as necessary.
            </summary>
            <param name="position">Point in space where the intersection occurs.</param>
            <param name="normal">Normal from the plane of intersection.</param>
            <param name="faceIndex">Index value that can be used to track down the face on which the intersection occurred.</param>
            <param name="tag">Aribtrary object.</param>
            <param name="properties">Properties that are used for filtering out test cases.</param>
            <param name="testPosition">Flag indicating or not to test the intersection position against the maximum length specified in this list.</param>
            <returns>The intersection object that was added.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Int32,System.Object,Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties,System.Boolean,System.IComparable,System.IComparable)">
            <summary>
            Adds an intersection to the list, checking if it passes filters and transforming it as necessary.
            </summary>
            <param name="position">Point in space where the intersection occurs.</param>
            <param name="normal">Normal from the plane of intersection.</param>
            <param name="faceIndex">Index value that can be used to track down the face on which the intersection occurred.</param>
            <param name="tag">Aribtrary object.</param>
            <param name="properties">Properties that are used for filtering out test cases.</param>
            <param name="testPosition">Flag indicating or not to test the intersection position against the maximum length specified in this list.</param>
            <param name="presorter"></param>
            <param name="postsorter"></param>
            <returns>The intersection object that was added.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.AddList(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList)">
            <summary>
            Adds the contents of the specified list to this list, assuming no transformations.
            </summary>
            <param name="list">List from which to copy values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.AddList(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Adds the contents of the specified list to this list, transforming 
            all of the intersections from a local space.
            </summary>
            <param name="list">List from which to copy values.</param>
            <param name="fromLocal">Transform to apply to all intersections on 
            the incoming list before they get added to this list.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.AddList(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList,Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.TagSetterHandler)">
            <summary>
            Adds the contents of the specified list to this list, updating the 
            tags of all of the intersections using the specified tag setter.
            </summary>
            <param name="list">List from which to copy values.</param>
            <param name="tagSetter">Tag setter that should be run against the 
            tag on each intersection as it is copied into this list.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.AddList(Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.TagSetterHandler,Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties)">
            <summary>
            Adds the contents of the specified list to this list, transforming 
            all of the intersections to from the local space of the list, 
            applying the specified tag setter, and checking the specified 
            properties against the current property test.
            </summary>
            <param name="list">List from which to copy values.</param>
            <param name="fromLocal">Transform to apply to all intersections on 
            the incoming list before they get added to this list.</param>
            <param name="tagSetter">Tag setter that should be run against the 
            tag on each intersection as it is copied into this list.</param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Sort">
            <summary>
            Sort all Ray3DIntersections based on their distance and any functions they have provided.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Ray">
            <summary>
            Gets the ray that was specified on the list, transformed into local space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Length">
            <summary>
            Gets the length of the ray that was specified on the list, transformed into local space.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Include">
            <summary>
            Additional tests to perform when intersecting
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.CompleteEvaluation">
            <summary>
            Gets whether or not all possible intersections should be included 
            or if known more distance intersections can be excluded.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Count">
            <summary>
            Gets the number of intersections in this list.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Item(System.Int32)">
            <summary>
            Returns the intersection at this index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.Source">
            <summary>
            Gets the current source that will be applied to all newly added intersections.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.PropertyFilter">
            <summary>
            Get the property filter for this list.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList.TagSetterHandler">
            <summary>
            Allows the constructor of the list to modify the tags set by callers to Add.
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw">
            <summary>
            Encapsulates an immutible orientation described in terms of a roll, pitch, and yaw.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.internalEmpty">
            <summary>
            A roll/pitch/yaw with all its values as zero.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw"/> class.
            </summary>
            <param name="roll">Roll in radians.</param>
            <param name="pitch">Pitch in radians.</param>
            <param name="yaw">Yaw in radians.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw"/> class
            from the rotation elements of the specified matrix.  When pitch is
            at its limit, this favors yaw over roll.
            
            This method assumes a Roll/Pitch/Yaw of Y/X/Z which is not the same
            as various DirectX methods which use Z/X/Y.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.ToQuaternion">
            <summary>
            Builds a quaternion from this roll/pitch/yaw.
            
            This method assumes a Roll/Pitch/Yaw of Y/X/Z which is not the same
            as various DirectX methods which use Z/X/Y.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.ToMatrix">
            <summary>
            Builds a matrix from this roll/pitch/yaw.
            
            This method assumes a Roll/Pitch/Yaw of Y/X/Z which is not the same
            as various DirectX methods which use Z/X/Y including 
            Matrix4x4D.RotationYawPitchRoll.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw,System.Double)">
            <summary>
            Overrides the multiplication operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw,Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Overrides the equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw,Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Overrides the inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.Equals(Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw)">
            <summary>
            Returns whether or not this viewpoint is exactly equal to the specified viewpoint.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.Empty">
            <summary>
            Gets a roll/pitch/yaw that is all 0.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.Roll">
            <summary>
            Gets the roll value.
            Virtual Earth 3D treats this as an angle in radians around the Y axis, 
            but DirectX's methods use the Z axis.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.Pitch">
            <summary>
            Gets the pitch value.
            Virtual Earth 3D treats this as an angle in radians around the X axis.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.RollPitchYaw.Yaw">
            <summary>
            Gets the yaw value.
            Virtual Earth 3D treats this as an angle in radians around the Z axis,
            but DirectX's methods use the Y axis.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND">
            <summary>
            Sparse, variable-size matrix implementation containing 3x3 submatrices.
            
            For example, a SparseMatrix3Mx3ND with M=2 (logical rows) and N=3 (logical columns)
            would have 6 actual rows and 9 actual columns.  
            
            This is primarily used for large system Jacobians, in which each of the rotational 
            and translational sub-Jacobians are 3x3 matrices.
            
            The implementation exploits sparsity for operations such as multiply, add, and equals.
            
            The current underlying implementation is as follows: Submatrix elements are stored in an arbitrary order 
            in a storage list, els.  We keep two bookkeeping arrays of dictionaries, rowVals and colVals.  Each
            dictionary in rowVals stores information about the submatrices in that row, specifically, the column the 
            submatrix lives in, and its position in the storage list.  For example, a submatrix A in logical row 2
            and logical column 4 of the SparseMatrix, which lives in the storage list at position 5 would contribute 
            the key value pair (4, 5) to the dictionary at rowVals[2], and the key value pair (2, 5) to the dictionary
            at colVals[4].  The following matrix with submatrices A, B, C and D would have this representation:
            
            Matrix:
             | A 0 0 B |
             | 0 0 C 0 |
             | 0 D 0 0 |
             
            Representation:
              els = [ A, B, C, D ]
            
              rowVals = [0] -> (0, 0), (3, 1)
                        [1] -> (2, 2)
                        [2] -> (1, 3)
              colVals = [0] -> (0, 0)
                        [1] -> (2, 3)
                        [2] -> (1, 2)
                        [3] -> (0, 1)
                      
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.logicalRows">
            <summary>
            Logical rows -- actual size is 3M
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.logicalColumns">
            <summary>
            Logical cols -- actual size is 3N
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.rowVals">
            <summary>
            rowVals holds key value pairs [columnPosition, storagePosition], where columnPosition is the
            column index of the submatrix, and storagePosition is the index of the submatrix in the storage list.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.colVals">
            <summary>
            colVals holds key value pairs [rowPosition, storagePosition], where rowPosition is the row
            index of the submatrix, and storagePosition is the index of the submatrix in the storage list.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.els">
            <summary>
            els is the storage list that holds all the submatrices in this sparse matrix.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.#ctor(System.Int32,System.Int32)">
            <summary>
            Sparse matrix constructor.
            </summary>
            <param name="m">Number of "logical rows."  Actual height of matrix is 3m.</param>
            <param name="n">Number of "logical columns."  Actual width of matrix is 3n.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D},System.Collections.Generic.Dictionary{System.Int32,System.Int32}[],System.Collections.Generic.Dictionary{System.Int32,System.Int32}[])">
            <summary>
            Construct a sparse matrix from its attributes.
            </summary>
            <param name="m">Number of logical rows</param>
            <param name="n">Number of logical columns</param>
            <param name="els">List of storage elements</param>
            <param name="rowVals">Row value indices</param>
            <param name="colVals">Column value incides</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.SetSubMatrix(System.Int32,System.Int32,Microsoft.MapPoint.Geometry.VectorMath.Matrix3x3D)">
            <summary>
            Set the submatrix of this sparse matrix.
            </summary>
            <param name="row">Logical row at which to insert the 3x3 submatrix.</param>
            <param name="col">Logical column at which to insert the 3x3 submatrix.</param>
            <param name="mat">The matrix to set</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.GetSubMatrix(System.Int32,System.Int32)">
            <summary>
            Get the submatrix at the given logical row and column.
            </summary>
            <param name="r">Logical row from which to retrieve the 3x3 submatrix.</param>
            <param name="c">Logical column from which to retrieve the 3x3 submatrix.</param>
            <returns>The value, if found, null otherwise</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Multiply(Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            Multiply this matrix by a vector.  Takes advantage of matrix sparsity.
            </summary>
            <param name="vec"></param>
            <returns>The product of the matrix and the vector</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Multiply(System.Double)">
            <summary>
            Create a new matrix that equals this matrix scaled by s
            </summary>
            <param name="s">The scaling factor</param>
            <returns>A copy of this matrix, scaled</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Multiply(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            Multiply this matrix by a matrix.
            </summary>
            <param name="mat"></param>
            <returns>The product of the two matrices</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Add(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            Add this matrix and the passed-in matrix, taking advantage of sparsity
            </summary>
            <param name="mat">Right hand side of add operation</param>
            <returns>Sum of this matrix and the argument matrix</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            Multiplication operator
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            Multiply a matrix by a vector
            </summary>
            <param name="mat"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND,System.Double)">
            <summary>
            Scaling operator
            </summary>
            <param name="mat"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            Scaling operator
            </summary>
            <param name="s"></param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            Addition operator
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            Subtraction operator
            </summary>
            <param name="mat0"></param>
            <param name="mat1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Transpose">
            <summary>
            Transpose this matrix
            </summary>
            <returns>A copy of this matrix, transposed</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Inverse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.GetPivot(Microsoft.MapPoint.Geometry.VectorMath.Vector12D[],System.Int32)">
            <summary>
            Get the pivot row, which is the row containing the maximal non-zero element in this column.
            </summary>
            <param name="rows"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.RowReplace(Microsoft.MapPoint.Geometry.VectorMath.Vector12D[]@,System.Int32,System.Int32)">
            <summary>
            Do a row replacement operation on the given row, in which we subtract a scaled version of one row from the other
            in such a way that the ith element of the second row becomes zero.
            </summary>
            <param name="rows"></param>
            <param name="j"></param>
            <param name="i"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.ScaleRow(Microsoft.MapPoint.Geometry.VectorMath.Vector12D[],System.Int32)">
            <summary>
            Scale the given row by the inverse of its ith element (causing the ith element to become 1)
            </summary>
            <param name="rows"></param>
            <param name="i"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Invert6x6Matrix(Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND)">
            <summary>
            Invert the passed-in 6x6 matrix using basic row-reduction algorithm.
            </summary>
            <param name="M">A 3*2-x-3*2 matrix</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Rows">
            <summary>
            Logical rows (m).  Actual height of matrix is 3m.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SparseMatrix3Mx3ND.Cols">
            <summary>
            Logical columns (n).  Actual width of matrix is 3n.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Vector12D">
            <summary>
            Helper 12-vector class we use to assist in 6x6 matrix inversion.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.#ctor">
            <summary>
            Initialize a 12-vector to zeros.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize a 12-vector with its elements populated.
            </summary>
            <param name="x0"></param>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="x3"></param>
            <param name="x4"></param>
            <param name="x5"></param>
            <param name="x6"></param>
            <param name="x7"></param>
            <param name="x8"></param>
            <param name="x9"></param>
            <param name="x10"></param>
            <param name="x11"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            Initialize a 12-vector from the passed-in vector.
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.Get(System.Int32)">
            <summary>
            Get the ith element of this vector.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector12D,System.Double)">
            <summary>
            Scaling operator
            </summary>
            <param name="vec"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            Scaling operator
            </summary>
            <param name="s"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Vector12D,Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            Addition operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Vector12D,Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            Subtraction operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.ToString">
            <summary>
            Return the string representation of this vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Vector12D,Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Vector12D,Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            Add this vector and the passed-in vector
            </summary>
            <param name="vec">Right hand side of add operation</param>
            <returns>Sum of this vector and the argument vector</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector12D)">
            <summary>
            Subtract a vector from this vector
            </summary>
            <param name="vec">Right hand side of subtract operation</param>
            <returns>A copy of this vector with the argument vector subtracted from it</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector12D.Multiply(System.Double)">
            <summary>
            Return the result of scaling the current vector
            </summary>
            <param name="s">Scaling factor</param>
            <returns>A copy of this vector, scaled by s</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND">
            <summary>
            Sparse, variable-size vector implementation containing 3D subvectors.
            
            For example, a SparseVector3ND with M=2 (logical rows) would have 6 actual rows.
            
            This is primarily used to facilitate operations with sparse matrices.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.logicalRows">
            <summary>
            Logical rows -- actual size is 3N
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.elements">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.#ctor(System.Int32)">
            <summary>
            Sparse vector constructor.
            </summary>
            <param name="rows">Number of "logical rows."  Actual height of vector is 3m.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.SetSubVector(System.Int32,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Set the subvector of this sparse vector.
            </summary>
            <param name="row">Logical row at which to insert the 3x3 subvector.</param>
            <param name="vec"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.GetSubVector(System.Int32)">
            <summary>
            Get the subvector of this sparse vector.
            </summary>
            <param name="row">Logical row from which to retrieve the 3x3 subvector.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.Add(Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            Add this vector and the passed-in vector
            </summary>
            <param name="vec">Right hand side of add operation</param>
            <returns>Sum of this vector and the argument vector</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.Multiply(System.Double)">
            <summary>
            Return the result of scaling the current vector
            </summary>
            <param name="s">Scaling factor</param>
            <returns>A copy of this vector, scaled by s</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            Addition operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND,Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            Subtraction operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND,System.Double)">
            <summary>
            Scaling operator
            </summary>
            <param name="vec"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND)">
            <summary>
            Scaling operator
            </summary>
            <param name="s"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SparseVector3ND.Rows">
            <summary>
            Logical rows (m).  Actual height of matrix is 3m.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations">
            <summary>
            Static container class for various spatial operations.  
            Generally this is for methods that take a pair of geometries and 
            shouldn't be duplicated on both classes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.RayIntersectsTriangle(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates whether a specified ray intersects a specified triangle.
            </summary>
            <param name="ray"></param>
            <param name="vertex0"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="intersectionPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.RayIntersectsTriangle(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates whether a specified array intersects a specified triangle.
            </summary>
            <param name="ray"></param>
            <param name="vertex0"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="parametricIntersect"></param>
            <param name="intersectionPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.LineIntersectsTriangle(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Calculates whether an infinite line intersects the specified triangle.
            </summary>
            <param name="linePoint1"></param>
            <param name="linePoint2"></param>
            <param name="trianglePointA"></param>
            <param name="trianglePointB"></param>
            <param name="trianglePointC"></param>
            <param name="intersectionPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.RayIntersectsSphere(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Tests whether this ray intersects with the specified sphere at all.
            </summary>
            <param name="ray"></param>
            <param name="sphereCenter"></param>
            <param name="sphereRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.RayIntersectsSphere(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tries to get intersection points between a ray and a sphere.
            </summary>
            <param name="ray"></param>
            <param name="sphere"></param>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns>The number of points the ray intersects (0, 1, or 2).</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.RayIntersectsBox(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tests to see if a box and a ray intersect.
            Lifted from Fast Ray-Box Intersection by Andrew Woo from "Graphics Gems", Academic Press, 1990
            </summary>
            <param name="ray"></param>
            <param name="box"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.DistancePointLine(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Boolean)">
            <summary>
            Returns the distance between a point and a line, itself defined by two points.
            </summary>
            <param name="point">The point.</param>
            <param name="line0">A point on the line.</param>
            <param name="line1">A second point on the line.</param>
            <param name="asSegment">If true, the line will be treated as a line segment.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.PointInTriangle(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Gets whether or not the point is within the specified triangle.
            </summary>
            <param name="point"></param>
            <param name="pa"></param>
            <param name="pb"></param>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.GetValidResultOfSweptSphere(Microsoft.MapPoint.Geometry.VectorMath.ISweptSphereDIntersect,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Tests the specified swept sphere against the specified intersector, 
            deflecting and sliding it to the appropriate destination to 
            avoid entering it.
            </summary>
            <param name="intersector"></param>
            <param name="sweptSphere"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.GetValidResultOfSweptSphere(Microsoft.MapPoint.Geometry.VectorMath.ISweptSphereDIntersect,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Collections.Generic.List{Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection})">
            <summary>
            Tests the specified swept sphere against the specified intersector, 
            deflecting and sliding it to the appropriate destination to 
            avoid entering it.  Also populates a list of all the deflections
            that were performed.
            </summary>
            <param name="intersector"></param>
            <param name="sweptSphere"></param>
            <param name="destination"></param>
            <param name="deflections"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.GetSweptSphereDeflection(Microsoft.MapPoint.Geometry.VectorMath.ISweptSphereDIntersect,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Collections.Generic.List{Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection})">
            <summary>
            Calculates the deflection of a swept sphere, returning the point of intersection and the new end-result of the broken sweep.
            </summary>
            <param name="intersector"></param>
            <param name="sweptSphere"></param>
            <param name="position">Set to the sphere center point at which the intersection occurs.  Incoming value is ignored.  This is not an out parameter so that the method doesn't have to set a value.</param>
            <param name="destination">Incoming value should be the end of the sweep; resulting value will be the deflected destination (if intersection occurred).</param>
            <param name="deflections">List of deflections.</param>
            <returns>False if the swept sphere didn't hit anything.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SweptSphereIntersectsPoint(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double@)">
            <summary>
            Calculates whether the specified swept sphere intersects a point, 
            and if so, at what distance along its movement the intersection 
            happens.
            </summary>
            <param name="sweptSphere">Swept sphere to test against.</param>
            <param name="point"></param>
            <param name="intersectPercentage">Percentage along the sweep at which the 
            intersection occurs; if it does occur.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SweptSphereIntersectsEdge(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double@,System.Double@)">
            <summary>
            Calculates whether the specified swept sphere intersects an edge.
            Note that this is only if the sphere actually hits the edge
            when it is tangent.  A call to SweptSphereIntersectsPoint to get
            the vertex collision.
            </summary>
            <param name="sweptSphere">Swept sphere to test against.</param>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <param name="sweepPercentage">Percentage along the sweep at which the 
            intersection occurs, if it does occur.</param>
            <param name="edgePercentage">Percentage along the edge at which the
            intersection occurs, if it does occur.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SweptSphereIntersectsPlane(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Plane3D,System.Double@)">
            <summary>
            Gets whether or not the specified swept sphere intersects a plane.
            </summary>
            <param name="sweptSphere">Swept sphere to test against.</param>
            <param name="plane"></param>
            <param name="intersectPercentage">Percentage along the sweep at which the 
            intersection occurs; if it does occur.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SweptSphereIntersectsTriangle(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double@)">
            <summary>
            Calculates whether the specified swept sphere hits a triangle, and 
            at what point along the sweep.
            </summary>
            <param name="sweptSphere">Swept sphere to test against.</param>
            <param name="pa"></param>
            <param name="pb"></param>
            <param name="pc"></param>
            <param name="intersectPercentage">Percentage along the sweep at which the 
            intersection occurs; if it does occur.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SweptSphereApproximatelyIntersectsBox(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Gets whether or not a swept sphere approximately intersects an axis aligned box.
            This test may return false positives, but not false negatives.
            </summary>
            <param name="sweptSphere"></param>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.BoxIntersectsBox(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Tests whether two axis-aligned boxes intersect.
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SqDistancePointAABB(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Calculates de squared distance of a point and an axis-aligned box.
            </summary>
            <param name="point"></param>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SqDistancePointSegment(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Calculates the squared distance between point c and segment ab.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.BoxIntersectsSphere(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,Microsoft.MapPoint.Geometry.VectorMath.SphereD)">
            <summary>
            Tests whether an axis-aligned box and a sphere intersect.
            </summary>
            <param name="box"></param>
            <param name="sphere"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SphereIntersectsSphere(Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Geometry.VectorMath.SphereD)">
            <summary>
            Tests whether two spheres intersect.
            </summary>
            <param name="sphere1"></param>
            <param name="sphere2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.SphereIntersectsSweptSphere(Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD)">
            <summary>
            Tests whether a sphere intersects a swept sphere.
            </summary>
            <param name="sphere"></param>
            <param name="sweptSphere"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.EdgeIntersectionResult">
            <summary>
            Edge intersection can fail at multiple levels, and knowing the 
            level can be helful.  For example, if the line is not intersected 
            at all, then the vertices obviously can't be either.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.EdgeIntersectionResult.IntersectsNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.EdgeIntersectionResult.IntersectsLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SpatialOperations.EdgeIntersectionResult.IntersectsEdge">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection">
            <summary>
            Encapsulates an intersection and deflection of a swept sphere.
            </summary>
            <remarks>
            This is primarily used for debugging purposes.
            </remarks>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection.#ctor(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection"/> class.
            </summary>
            <param name="intersection"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection.Intersection">
            <summary>
            Gets the swept sphere intersection.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDDeflection.Destination">
            <summary>
            Gets the destination of the deflection.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection">
            <summary>
            Represents one collision in a swept-sphere intersection test.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Int32,Microsoft.MapPoint.Geometry.VectorMath.IntersectResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection"/> class.
            </summary>
            <param name="position"></param>
            <param name="distance"></param>
            <param name="sweepPosition"></param>
            <param name="faceIndex"></param>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Plane3D,System.Int32,Microsoft.MapPoint.Geometry.VectorMath.IntersectResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection"/> class.
            </summary>
            <param name="position"></param>
            <param name="distance"></param>
            <param name="sweepPosition"></param>
            <param name="plane"></param>
            <param name="faceIndex"></param>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.CompareTo(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection)">
            <summary>
            Compares this intersection to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.CompareTo(System.Object)">
            <summary>
            Compares this intersection to another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.Position">
            <summary>
            Gets the position in space at which the sweep intersected the Tag.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.Distance">
            <summary>
            Gets the distance from the source to the point at which the intersection occurred.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.SweepPosition">
            <summary>
            Gets the position along the sweep at which the intersection occurred.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.Plane">
            <summary>
            Gets the plane against which the sphere intersected.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.FaceIndex">
            <summary>
            Gets the index of the face that was hit.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.Result">
            <summary>
            Gets the kind of intersection that took place.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.Source">
            <summary>
            Gets the object that requested the intersection test.  May be null.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection.Tag">
            <summary>
            Gets and sets a pointer to the object that was hit by this intersection.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList">
            <summary>
            Encapsulates a smart list of <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersection"/> objects.  The list 
            manages the source of objects, and testing matches.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class.
            </summary>
            <param name="completeEvaluation"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.#ctor(System.Predicate{Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties},System.Boolean)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3DIntersectionList"/> class that will only allow 
            entries that match the specified predicate.
            </summary>
            <param name="preIntersectionTest">Predicate that is called prior 
            to intersection testing to filter out results prior to performing
            an expensive intersection.</param>
            <param name="completeEvaluation"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.Clear">
            <summary>
            Removes all intersections from the list.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.IncludeIntersection(Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties)">
            <summary>
            Tests whether the specified tag type matches the kind this list 
            will keep.  This can be used to circumvent expensive tests for 
            items that would end up not getting kept in the list anyhow.
            </summary>
            <param name="intersectionProperties">Properties that are used
            to determine whether an intersection should be performed or not.
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.AddIntersection(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Plane3D,System.Int32,Microsoft.MapPoint.Geometry.VectorMath.IntersectResult,Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties)">
            <summary>
            Adds an intersection to the list.
            </summary>
            <param name="position"></param>
            <param name="distance"></param>
            <param name="sweepPosition"></param>
            <param name="plane"></param>
            <param name="faceIndex"></param>
            <param name="intersectionResult"></param>
            <param name="intersectionProperties">Properties that are used
            to determine whether the intersection should be included or not.
            If testing has already been done using the IncludeIntersection 
            method, then this can be null.
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.AddIntersection(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Int32,Microsoft.MapPoint.Geometry.VectorMath.IntersectResult,Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties)">
            <summary>
            Adds an intersection to the list.
            </summary>
            <param name="position"></param>
            <param name="distance"></param>
            <param name="sweepPosition"></param>
            <param name="faceIndex"></param>
            <param name="intersectionResult"></param>
            <param name="intersectionProperties">Properties that are used
            to determine whether the intersection should be included or not.
            If testing has already been done using the IncludeIntersection 
            method, then this can be null.
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.AddIntersection(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersection,Microsoft.MapPoint.Geometry.VectorMath.IIntersectionProperties)">
            <summary>
            Adds an intersection to the list.
            </summary>
            <param name="intersection"></param>
            <param name="intersectionProperties">Properties that are used
            to determine whether the intersection should be included or not.
            If testing has already been done using the IncludeIntersection 
            method, then this can be null.
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.Sort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.RegisterSource(System.Object)">
            <summary>
            Registers a new source which must be unregistered when done.  Any 
            subsequent adds will use the new source.     
            </summary>
            <param name="source"></param>
            <returns>A key that should be passed into UnregisterSource.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.UnregisterSource(System.Object)">
            <summary>
            Unregisters a registered in source.  Any subsequent adds will have 
            the source of the one registered before the specified one.
            </summary>
            <remarks>
            Note that the key is only handed to the class that registered the source.  
            If plug-ins could get at other keys, they could mess up intersections badly.
            </remarks>
            <param name="sourceKey">The key that was provided by RegisterSource.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.GetCurrentSource">
            <summary>
            Gets the currently registered source.
            </summary>
            <remarks>
            Note that we don't hand out the key since that could be dangerous.  
            We do, however, return the actual source.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.CompleteEvaluation">
            <summary>
            Gets a hint for the intersection code to say whether it should 
            terminate early if it finds the valid result before it has tested 
            everything.  This can only be used if the entries are sorted such 
            that it is certain that the entry is the winner.  If the
            intersector cannot do this, the value will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.Count">
            <summary>
            Gets the number of intersections in this list.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereDIntersectionList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Vector2F">
            <summary>
            Describes and manipulates a vector in two-dimensional space using floats.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Empty">
            <summary>
            Retrieves an empty 2-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.X">
            <summary>
            Represents the x component of the 2-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Y">
            <summary>
            Represents the y component of the 2-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector2F"/> structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Adds a 2-D vector to the current vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Adds two 2-D vectors together and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Subtracts a 2-D vector from the current vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Subtracts two 2-D vectors from one another and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Multiply(System.Single)">
            <summary>
            Multiplies a 2-D vector by a value.
            </summary>
            <param name="value">Source value used as a multiplier.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,System.Single)">
            <summary>
            Multiplies a 2-D vector by a value.
            </summary>
            <param name="source">Source vector structure.</param>
            <param name="value">Source value used as a multiplier.</param>
            <returns>A vector structure that is multiplied by the value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Normalize">
            <summary>
            Normalizes the current 2-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Minimize(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Minimize by the given vector
            </summary>
            <param name="toMinimize">The vector to minimize</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Maximize(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Maximize by the given vector
            </summary>
            <param name="toMaximize">The vector to maximize by</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Normalize(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Returns the normalized version of the specified 2-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Distance(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Returns the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.DistanceSq(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Returns the square of the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Length">
            <summary>
            Returns the length of the current 2-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Length(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Returns the length of the specified 2-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.LengthSq">
            <summary>
            Returns the square of the length of the current 2-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.LengthSq(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Returns the square of the length of the specified 2-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Cross(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Returns the 2D cross product of two vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Adds two 2-D vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Subtracts a 2-D vector from another 2-D vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,System.Single)">
            <summary>
            Multiplies a vector by a scalar
            </summary>
            <param name="left">Vector operand</param>
            <param name="right">Scalar operand</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.op_Division(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,System.Single)">
            <summary>
            Divides a vector by a scalar
            </summary>
            <param name="left">Vector operand</param>
            <param name="right">Scalar operand</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Get the dot product of the vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.GetAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Calculates the angle in radians between two 2D vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2F.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Vector3F">
            <summary>
            Encapsulates a 3 dimensional vector based on floats.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Empty">
            <summary>
            Retrievs an empty 3-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.X">
            <summary>
            Represents the x component of the 3-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Y">
            <summary>
            Represents the y component of the 3-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Z">
            <summary>
            Represents the z component of the 3-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector3F"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector3F"/> struct.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Adds the specified 3-D vector to the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3F@)">
            <summary>
            Adds the specified 3-D vector to the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Adds the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F@)">
            <summary>
            Adds the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3F@,Microsoft.MapPoint.Geometry.VectorMath.Vector3F@)">
            <summary>
            Adds the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Subtracts the specified 3-D vector from the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3F@)">
            <summary>
            Subtracts the specified 3-D vector from the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.ToVector3D">
            <summary>
            Initialize an instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector3D"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Subtracts the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3F@,Microsoft.MapPoint.Geometry.VectorMath.Vector3F@)">
            <summary>
            Subtracts the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Cross(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Determines the right-handed cross product of the two specified 3-D vectors.
            </summary>
            <param name="left">Forefinger pointer forward.</param>
            <param name="right">Index finder at a right angle to forefinger.</param>
            <returns>Thumb.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Determines the dot products of the two specified 3-D vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Distance(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Returns the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.DistanceSq(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Returns the square of the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Length">
            <summary>
            Returns the length of the current 3-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Length(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Returns the length of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.LengthSq">
            <summary>
            Returns the square of the length of the current 3-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.LengthSq(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Returns the square of the length of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Multiply(System.Single)">
            <summary>
            Multiplies a 3-D vector by a value.
            </summary>
            <param name="value">Source value used as a multiplier.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single)">
            <summary>
            Multiplies a 3-D vector by a value.
            </summary>
            <param name="source">Source vector structure.</param>
            <param name="value">Source value used as a multiplier.</param>
            <returns>A vector structure that is multiplied by the value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3F@,System.Single)">
            <summary>
            Multiplies a 3-D vector by a value.
            </summary>
            <param name="source">Source vector structure.</param>
            <param name="value">Source value used as a multiplier.</param>
            <returns>A vector structure that is multiplied by the value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Normalize">
            <summary>
            Normalizes the current 3-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Normalize(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Returns the normalized version of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Adds two 3-D vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Subtracts a 3-D vector from another 3-D vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.op_Multiply(System.Single,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Determines the product of a value and a 3-D vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single)">
            <summary>
            Determines the product of a 3-D vector and a value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.op_Division(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single)">
            <summary>
            Determines the division of a 3-D vector and a value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.FuzzyEquals(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.FuzzyEquals(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.GetAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Calculates the angle in radians between two 3D vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.GetAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            Gets the angle between two vectors from the origin cast against a plane specified by a normal.
            </summary>
            <param name="axis">Normal of the plane.</param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms this 3-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms a 3-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.TransformNormal(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms this 3-D vector normal by the given matrix.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.TransformNormal(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms a 3-D vector normal by the given matrix.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Pitch">
            <summary>
            Gets the look-up angle of the vector
            </summary>
            <remarks>
            This handles getting the "pitch up" for a given vector.  This assumes the coordinate system
            is Z North, X is out the Prime meridian, and Y wherever that leaves it.  Pitch is defined as
            the angle out of the YZ plane.
            </remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Vector3F.Heading">
            <summary>
            Gets the left-right angle of the vector
            </summary>
            <remarks>
            This handles getting the "heading" for a given vector.  This assumes the coordinate system
            is Z North, X is out the Prime meridian, and Y wherever that leaves it.  Heading is defined as
            the angle in the YZ plane, with North being defined as 0c1
            </remarks>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Vector4D">
            <summary>
            Encapsulates a 4 dimensional vector based on doubles.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.X">
            <summary>
            1st element of vector
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Y">
            <summary>
            2nd element of vector
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Z">
            <summary>
            3rd element of vector
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.W">
            <summary>
            4th element of vector
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector4D"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector4D"/> struct.
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Initializes a new instance of the Vector3D struct.
            </summary>
            <param name="vector3"></param>
            <param name="w"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.AddTo(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Adds a vector to the current vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Add this vector and the passed-in vector
            </summary>
            <param name="vec">Right hand side of add operation</param>
            <returns>Sum of this vector and the argument vector</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Subtract a vector from this vector
            </summary>
            <param name="vec">Right hand side of subtract operation</param>
            <returns>A copy of this vector with the argument vector subtracted from it</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Negate">
            <summary>
            Get a copy of this vector multiplied by -1
            </summary>
            <returns>A copy of this vector, negated</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Return the dot product of this vector with the passed-in vector
            </summary>
            <param name="vec">Right hand side of dot product operation</param>
            <returns>Dot product of the two vectors</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Multiply(System.Double)">
            <summary>
            Return the result of scaling the current vector
            </summary>
            <param name="s">Scaling factor</param>
            <returns>A copy of this vector, scaled by s</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.MultiplyBy(System.Double)">
            <summary>
            Multiplies a 3-D vector by a value.
            </summary>
            <param name="s">Source value used as a multiplier.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Normalize">
            <summary>
            normalise so that vector has unit length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Lerp(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,System.Double)">
            <summary>
            Linearly interpolate from this vector to the passed-in vector
            </summary>
            <param name="vec"></param>
            <param name="w">Interpolation weight</param>
            <returns>Result of the interpolation</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Min(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Return a new vector that, for each entry, contains the minimal corresponding element of the two vectors
            </summary>
            <param name="vec">Vector to minimize this vector with respect to</param>
            <returns>New vector containing the minimal of the two vectors at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Max(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Return a new vector that, for each entry, contains the maximal corresponding element of the two vectors
            </summary>
            <param name="vec">Vector to minimize this vector with respect to</param>
            <returns>New vector containing the maximal of the two vectors at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms a 4-D vector by a given matrix.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector4D@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms a 4-D vector by a given matrix.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms a 4-D vector by a given matrix.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Minimal">
            <summary>
            Get the minimal element of this vector
            </summary>
            <returns>Minimal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Maximal">
            <summary>
            Get the maximal element of this vector
            </summary>
            <returns>Maximal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.AbsMinimal">
            <summary>
            Get the minimal of the absolute values of the elements of this vector
            </summary>
            <returns>minimal of element absolute values</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.AbsMaximal">
            <summary>
            Get the maximal of the absolute values of the elements of this vector
            </summary>
            <returns>maximal of element absolute values</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Equals operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Not-equal operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Addition operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Subtraction operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_UnaryNegation(Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Negation operator
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,System.Double)">
            <summary>
            Scaling operator
            </summary>
            <param name="vec"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Scaling operator
            </summary>
            <param name="s"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Dot product operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.op_ExclusiveOr(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Cross product operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Lerp(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D,System.Double)">
            <summary>
            Linearly interpolate by w between vectors v0 and v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Min(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Return a new vector containing the minimal of each of the elements of v0 and v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Max(Microsoft.MapPoint.Geometry.VectorMath.Vector4D,Microsoft.MapPoint.Geometry.VectorMath.Vector4D)">
            <summary>
            Return a new vector containing the maximal of each of the elements of v0 and v1 
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Length">
            <summary>
            Return the length of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.UnitRandom">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4D.Random">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Vector4F">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.Empty">
            <summary>
            Retrieves an empty 4-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.X">
            <summary>
            Represents the x component of the 4-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.Y">
            <summary>
            Represents the y component of the 4-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.Z">
            <summary>
            Represents the z component of the 4-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.W">
            <summary>
            Represents the w component of the 4-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector4F"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.GetHashCode">
            <summary>
            Returns hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Vector4F,Microsoft.MapPoint.Geometry.VectorMath.Vector4F)">
            <summary>
            Compares equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Vector4F,Microsoft.MapPoint.Geometry.VectorMath.Vector4F)">
            <summary>
            Compares inequality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.Equals(System.Object)">
            <summary>
            Compares equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector4F.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector4F)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint">
            <summary>
            Encapsulates the location and orientation of a view.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.ValidateOrientation(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="lookAtLookUp"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint"/> class
            with default values.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Viewpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint"/> class
            from another viewpoint.
            </summary>
            <param name="viewpoint"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.LookAtLookUp)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint"/> class.
            </summary>
            <param name="position">The global position of the Viewpoint.</param>
            <param name="orientation">The global orientation of the Viewpoint.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.#ctor(System.Boolean)">
            <summary>
            Protected constructor that can be used by derived classes.
            </summary>
            <param name="garbage"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.NeedOrientation(Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Derived classes can override this method to ensure orientation has 
            the correct value.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.SetPosition(Microsoft.MapPoint.Geometry.VectorMath.Position)">
            <summary>
            Provided so that derived classes can set the position field 
            directly.  This should most likely only be used from a constructor.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.SetOrientation(Microsoft.MapPoint.Geometry.VectorMath.Orientation)">
            <summary>
            Provided so that derived classes can set the orientation field
            directly.  This should most likely only be used from a constructor.
            </summary>
            <param name="orientation"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.PositionChanging">
            <summary>
            Called whenever the position changes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.OrientationChanging">
            <summary>
            Called whenever the orientation changes.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.OnChanging">
            <summary>
            Called when a position has changed, thereby raising the Changed 
            event.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.SilentCopy(Microsoft.MapPoint.Geometry.VectorMath.Viewpoint)">
            <summary>
            Copies from a source orientation to this, raising no events.
            This should be used with care as classes that rely on the events
            will not update properly.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.Copy(Microsoft.MapPoint.Geometry.VectorMath.Viewpoint)">
            <summary>
            Copies from a source orientation to this orientation, raising the 
            appropriate event.  
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.Transform(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms this viewpoint by the specified matrix.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.Equals(System.Object)">
            <summary>
            Compares equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.GetHashCode">
            <summary>
            Returns hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.Equals(Microsoft.MapPoint.Geometry.VectorMath.Viewpoint)">
            <summary>
            Comapres equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Viewpoint,Microsoft.MapPoint.Geometry.VectorMath.Viewpoint)">
            <summary>
            Compares equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Viewpoint,Microsoft.MapPoint.Geometry.VectorMath.Viewpoint)">
            <summary>
            Compares inequality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.Position">
            <summary>
            Gets the position in 3D space of the eye of a viewpoint.  Position cannot be replaced, but can be modified.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.Orientation">
            <summary>
            Gets the orientation of this viewpoint.  Orientation cannot be replaced, but can be modified.
            </summary>
        </member>
        <member name="E:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.Changing">
            <summary>
            Event that is raised just before any data in the viewpoint changes.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Viewpoint.ChangeDelegate">
            <summary>
            Delegate type that is used on the Changing event.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.UnitSphereCoordinateReferenceSystem">
            <summary>
            Coordinate Reference System for Unit Sphere coordinates.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.UnitSphereCoordinateReferenceSystem.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.MapPoint.CoordinateSystems.UnitSphereCoordinateReferenceSystem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.UnitSphereCoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Tests whether the specified coordinate is a valid Proto-Miller coordinate.
            </summary>
            <param name="coordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.UnitSphereCoordinateReferenceSystem.GetSpatialOperations">
            <summary>
            Returns the spatial operations for this CRS.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.UnitSphereCoordinateReferenceSystem.Instance">
            <summary>
            Gets the instance of this class.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.UnitSphereCoordinateReferenceSystem.CoordinateSystem">
            <summary>
            returns the coordinate system of this coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem">
            <summary>
            Coordinate Reference System for WGS 84 coordinates.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate2DFixedPoint)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.IsValid(Microsoft.MapPoint.CoordinateSystems.Coordinate3D)">
            <summary>
            Returns true if the specified coordinate is valid.
            </summary>
            <param name="coordinate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.GetSpatialOperations">
            <summary>
            Returns the spatial operations for this CRS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.Instance">
            <summary>
            Gets the instance of the coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.CoordinateSystem">
            <summary>
            returns the coordinate system of this coordinate reference system.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.MapPoint.CoordinateSystems.Wgs84CoordinateReferenceSystem.SpatialOperations">
            <summary>
            Gets the spatial operations.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D">
            <summary>
            A bounding box aligned with the coordinate system axes
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Min">
            <summary>
            Min position of AABB
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Max">
            <summary>
            Max position of AABB
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Constructs a BaseAxisAlignedBoundingBoxD
            </summary>
            <param name="min">Origin of the sphere</param>
            <param name="max">Radius of the sphere</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a BaseAxisAlignedBoundingBoxD
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Constructs a BaseAxisAlignedBoundingBoxD
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Grow(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Increase the box to include this point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.GrowOrSet(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Increase the box to include this point, unless it is empty, in which case set the values.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Grow(System.Double,System.Double,System.Double)">
            <summary>
            Increase the box to include this point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Grow(System.Single,System.Single,System.Single)">
            <summary>
            Increase the box to include this point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Grow(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Increase the box to include this other box.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Contains(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns true if the given point is inside the box.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.DistanceToCenter(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the distance from the given point to the center of the box.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.DistanceToCenterSq(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the square of the distance from the given point to the center of the box.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.IsEmpty">
            <summary>
            Returns true if the box's values are not set, that is all values are zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Compares two BaseAxisAlignedBoundingBoxDs for equality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D,Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Compares two BaseAxisAlignedBoundingBoxDs for inequality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of inequality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.GetHashCode">
            <summary>
            Calculates the hash code for the BaseAxisAlignedBoundingBoxD
            </summary>
            <returns>A^B</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another. Objects not
            of type BaseAxisAlignedBoundingBoxD will always be inequal
            </summary>
            <param name="obj">Input object</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.Equals(Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.AxisAlignedBoundingBox3D.ToString">
            <summary>
            String representing the BaseAxisAlignedBoundingBoxD
            </summary>
            <returns>Min={Min},Max={Max}</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D">
            <summary>
            This represents a matrix for transforming points in 3D space.  This should not be confused with
            the system object Drawing2D.Matrix4x4 but is more akin to DirectX's matrix, except for doubles.
            <code>
            .
            | m11 m12 m13 m14 |
            | m21 m22 m23 m24 | 
            | m31 m32 m33 m34 |
            | m41 m42 m43 m44 |
            .
            </code>
            </summary>
            <remarks>Note that spaceland uses a row vector notation akin to DirectX.
            In this notation when a vector has to be transformed by a matrix the row vector is POST multiplied
            by the matrix like this: vector * Matrix. This is opposite of the column vector notation used in most
            textbooks (and also OpenGL) in which a column vector is PRE multiplied by a matrix in order to transform it,
            like this: Matrix * vector.
            </remarks>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.SizeInMemory">
            <summary>
            The size of a 4x4 matrix
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Zero">
            <summary>
            Gets an empty matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M11">
            <summary>
            Represents the element in the first row and the first column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M12">
            <summary>
            Represents the element in the first row and the second column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M13">
            <summary>
            Represents the element in the first row and the third column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M14">
            <summary>
            Represents the element in the first row and the fourth column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M21">
            <summary>
            Represents the element in the second row and the first column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M22">
            <summary>
            Represents the element in the second row and the second column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M23">
            <summary>
            Represents the element in the second row and the third column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M24">
            <summary>
            Represents the element in the second row and the fourth column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M31">
            <summary>
            Represents the element in the third row and the first column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M32">
            <summary>
            Represents the element in the third row and the second column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M33">
            <summary>
            Represents the element in the third row and the third column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M34">
            <summary>
            Represents the element in the third row and the fourth column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M41">
            <summary>
            Represents the element in the fourth row and the first column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M42">
            <summary>
            Represents the element in the fourth row and the second column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M43">
            <summary>
            Represents the element in the fourth row and the third column of the matrix.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.M44">
            <summary>
            Represents the element in the fourth row and the fourth column of the matrix.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.MakeIdentity">
            <summary>
            Builds an identity matrix.
            </summary>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.SinCos(System.Double,System.Double@,System.Double@)">
            <summary>
            Executes sin and cosine for a common angle.  
            Theoretically this could leverage the assembler command for 
            sin/cos, but IL doesn't seem to have the equivalent.
            </summary>
            <param name="angle"></param>
            <param name="sin"></param>
            <param name="cos"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D"/> class 
            with all of its cells populated.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D"/> class
            from another matrix.
            </summary>
            <param name="matrix">Source matrix from which to copy values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D"/> class
            from another matrix.
            </summary>
            <param name="matrix">Source matrix from which to copy values.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Add(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The matrix structure on the left side of the addition operator.</param>
            <param name="right">The matrix structure on the right side of the addition operator.</param>
            <returns>A matrix structure that represents the result of the addition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Add(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Adds two matrices.
            </summary>
            <param name="left">The matrix structure on the left side of the addition operator.</param>
            <param name="right">The matrix structure on the right side of the addition operator.</param>
            <returns>A matrix structure that represents the result of the addition.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="left">The matrix structure on the left side of the subtraction operator.</param>
            <param name="right">The matrix structure on the right side of the subtraction operator.</param>
            <returns>A matrix structure that represents the result of the subtraction.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="left">The matrix structure on the left side of the subtraction operator.</param>
            <param name="right">The matrix structure on the right side of the subtraction operator.</param>
            <returns>A matrix structure that represents the result of the subtraction.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Transform(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Transforms the specified point by POST multiplying the input row vector by this matrix.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Invert(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Returns the inverse of the specified matrix.
            </summary>
            <param name="source">Source matrix structure</param>
            <returns>A matrix structure that is the result of the operation.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.LookAtRH(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Builds a right-handed look-at matrix.
            </summary>
            <param name="cameraPosition">A BaseVector3D structure that defines the camera point.  This value is used in translation</param>
            <param name="cameraTarget">A BaseVector3D structure that defines the camera look-at target.</param>
            <param name="cameraUpVector">A BaseVector3D structure that defines the up direction of the current world, usually [0, 1, 0].</param>
            <returns>A matrix matrix structure that is a right-handed look-at matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.RotationYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Rotates a matrix with a specified yaw, pitch, and roll.
            NOTE, this method uses the DirectX convention of roll, pitch and yaw
            being around Z, X and Y rather than Virtual Earth 3D's convention of
            Y, X and Z.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis in radians.</param>
            <param name="roll">Roll around the z-axis in radians.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.RotationAxis(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Builds a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axisRotation">A vector structure that identifies the
            axis about which to rotate the matrix.</param>
            <param name="angle">Angle of rotation, in radians.  Angles are 
            measured counter-clockwise when looking along the rotation axis
            toward the origin.</param>
            <returns>Rotated matrix structure.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.RotationQuaternion(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Builds a matrix from a quaternion. 
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Multiplies the current matrix by the specified matrix.
            </summary>		
            <param name="right">Source matrix structure to multiply by the current instance.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Multiplies the current matrix by the specified matrix.
            </summary>		
            <param name="right">Source matrix structure to multiply by the current instance.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Returns the product of the two specified matrices.
            </summary>
            <param name="left">Source matrix structure for the left operand.</param>
            <param name="right">Source matrix structure for the right operand.</param>
            <returns>A matrix structure that is the product of the two matrices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Returns the product of the two specified matrices.
            </summary>
            <param name="left">Source matrix structure for the left operand.</param>
            <param name="right">Source matrix structure for the right operand.</param>
            <returns>A matrix structure that is the product of the two matrices.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.PerspectiveFovLH(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a left-handed perspective projection matrix based on a field of view. 
            </summary>
            <param name="fieldOfViewY">Field of view in the y direction, in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as the view space width divided by height.</param>
            <param name="zNearPlane">Z-value of the near view plane.</param>
            <param name="zFarPlane">Z-value of the far view plane.</param>
            <returns>A matrix structure that is a left-handed perspective projection matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.PerspectiveFovRH(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a right-handed perspective projection matrix based on a field of view. 
            </summary>
            <param name="fieldOfViewY">Field of view in the y direction, in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as the view space width divided by height.</param>
            <param name="zNearPlane">Z-value of the near view plane.</param>
            <param name="zFarPlane">Z-value of the far view plane.</param>
            <returns>A matrix structure that is a right-handed perspective projection matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.OrthoOffCenterRH(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a right-handed orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of view volume.</param>
            <param name="right">Maximum x-value of view volume.</param>
            <param name="bottom">Minimum y-value of view volume.</param>
            <param name="top">Maximum y-value of view volume.</param>
            <param name="znear">Minimum z-value of view volume.</param>
            <param name="zfar">Maximum z-value of view volume.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.RotationX(System.Double)">
            <summary>
            Builds a matrix that rotates around the x-axis. Uses row vector notation. In order to rotate a
            vector v about the X axis the vector must be POST multiplied by this matrix like this: v*M
            where v is the row vector and M is matrix.
            </summary>
            <param name="angle">Angle of rotation, in radians. Angles are
            measured clockwise when looking along the rotation axis toward the
            origin in a left handed coordinate system, and counter-clockwise in
            a right handed.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.RotationY(System.Double)">
            <summary>
            Builds a matrix that rotates around the y-axis.
            Uses row vector notation. In order to rotate a
            vector v about the Y axis the vector must be POST multiplied by this matrix like this: v*M
            where v is the row vector and M is matrix.
            </summary>
            <param name="angle">Angle of rotation, in radians. Angles are
            measured clockwise when looking along the rotation axis toward the
            origin in a left handed coordinate system, and counter-clockwise in
            a right handed.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.RotationZ(System.Double)">
            <summary>
            Builds a matrix that rotates around the z-axis.
            Uses row vector notation. In order to rotate a
            vector v about the Z axis the vector must be POST multiplied by this matrix like this: v*M
            where v is the row vector and M is matrix.
            </summary>
            <param name="angle">Angle of rotation, in radians. Angles are
            measured clockwise when looking along the rotation axis toward the
            origin in a left handed coordinate system, and counter-clockwise in
            a right handed.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.ProjectionOntoPlane(Microsoft.MapPoint.Geometry.VectorMath.Plane3D)">
            <summary>
            Builds a matrix that projects vectors parallel to an arbitrary plane.
            If the plane runs through the origin, the vectors will lie on the plane.
            </summary>
            <param name="plane">The plane</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Scaling(System.Double,System.Double,System.Double)">
            <summary>
            Builds a Scaling matrix.
            </summary>
            <param name="valueX">Amount to scale along the X axis.</param>
            <param name="valueY">Amount to scale along the Y axis.</param>
            <param name="valueZ">Amount to scale along the Z axis.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.TransposeMatrix(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Returns the matrix tranpose of a gived matrix.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="offsetX">Distance from the origin along the X axis.</param>
            <param name="offsetY">Distance from the origin along the Y axis.</param>
            <param name="offsetZ">Distance from the origin along the Z axis.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Translation(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="offset">Distance from the origin.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Transformation(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Builds a transformation matrix consisting of a translation and a rotation together.
            </summary>
            <param name="v">The translation component of the transformation.</param>
            <param name="q">The rotation component of the transformation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Multiplication operator for two 4x4 matrices.
            </summary>
            <param name="a">Left hand side of the multiplication</param>
            <param name="b">Right hand side of the multiplication</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Multiply the 4x4 matrix by an augmented 3-vector
            </summary>
            <param name="vec"></param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.EqualsWithinEpsilon(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@,System.Double)">
            <summary>
            Test doubles for equality within some small epsilon value
            </summary>
            <param name="other"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Read(System.IO.BinaryReader)">
            <summary>
            Serializes the matrix
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.Write(System.IO.BinaryWriter)">
            <summary>
            Deserializes the matrix
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.IsZeroMatrix">
            <summary>
            Serializes the matrix
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D.IsIdentityMatrix">
            <summary>
            Serializes the matrix
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D">
            <summary>
            A bounding box oriented along an arbitrary axis
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D,System.Double)">
            <summary>
            Constructs a OrientedBoundingBox2D
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <param name="width">Width</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Constructs a OrientedBoundingBox2D from two corners of an AABB
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.Intersects(Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D,Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D)">
            <summary>
            Calculates if two OBB intersect
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.OneWayIntersects(Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D)">
            <summary>
            Calculates if one OBB intersects another OBB 'one-way'
            </summary>
            <param name="box">OBB operand</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.Equals(Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D,Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D)">
            <summary>
            Compares two OrientedBoundingBox2D for equality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D,Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D)">
            <summary>
            Compares two OrientedBoundingBox2D for inequality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of inequality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.GetHashCode">
            <summary>
            Calculates the hash code for the OrientedBoundingBox2D
            </summary>
            <returns>A^B</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another. Objects not
            of type OrientedBoundingBox2D will always be inequal
            </summary>
            <param name="obj">Input object</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.OrientedBoundingBox2D.ToString">
            <summary>
            String representing the OrientedBoundingBox2D
            </summary>
            <returns>Min={Min},Max={Max}</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Plane3D">
            <summary>
            Representation of a plane in 3D space
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Plane3D"/> class. 
            </summary>
            <param name="a">'A' of the Plane Equation</param>
            <param name="b">'B' of the Plane Equation</param>
            <param name="c">'C' of the Plane Equation</param>
            <param name="d">'D' of the Plane Equation</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Plane3D,Microsoft.MapPoint.Geometry.VectorMath.Plane3D)">
            <summary>
            Compares two BasePlane3Ds for equality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Plane3D,Microsoft.MapPoint.Geometry.VectorMath.Plane3D)">
            <summary>
            Compares two BasePlane3Ds for inequality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of inequality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.DistanceTo(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the distance from the plane to the point. 0 means an intersection.
            Positive value means in front, and negative means behind
            </summary>
            <param name="vector">Vector to compare with</param>
            <returns>Distance scalar</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.Intersection(Microsoft.MapPoint.Geometry.VectorMath.Plane3D,Microsoft.MapPoint.Geometry.VectorMath.Ray3D@)">
            <summary>
            Computes the intersection of the ray with the plane
            </summary>
            <param name="plane"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.Intersection(Microsoft.MapPoint.Geometry.VectorMath.Plane3D,Microsoft.MapPoint.Geometry.VectorMath.Plane3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Computes the intersection between 3 planes if found.
            </summary>
            <param name="plane1"></param>
            <param name="plane2"></param>
            <param name="point"></param>
            <returns>True if an intersection point is found</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.Intersect(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Intersects the intersection point of a line segment
            with the plane
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.FromPointNormal(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Creates a new BasePlane3D from a Vector3D point and a Vector3D normal
            </summary>
            <param name="point">Input point</param>
            <param name="normal">Input normal</param>
            <returns>A new BasePlane3D represented by the inputs</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.FromPoints(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Creates a new BasePlane3D from 3 Vector3D points. (Clockwise points are facing the plane normal)
            </summary>
            <param name="p1">Input point 1</param>
            <param name="p2">Input point 2</param>
            <param name="p3">Input point 3</param>
            <returns>A new BasePlane3D represented by the inputs</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.GetHashCode">
            <summary>
            Calculates the hash code for the BasePlane3D
            </summary>
            <returns>A^B^C</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another. Objects not
            of type BasePlane3D will always be inequal
            </summary>
            <param name="obj">Input object</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.ToString">
            <summary>
            String representing the BasePlane3D object
            </summary>
            <returns>A={A},B={B},C={C}</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Plane3D)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.A">
            <summary>
            A, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.B">
            <summary>
            B, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.C">
            <summary>
            C, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.D">
            <summary>
            D, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Plane3D.Normal">
            <summary>
            Gets the normal of the plane.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Identity">
            <summary>
            Gets the identity quaternion.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Zero">
            <summary>
            Gets the zero quaternion.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.X">
            <summary>
            Gets or sets the x component of the quaternion.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Y">
            <summary>
            Gets or sets the y component of the quaternion.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Z">
            <summary>
            Gets or sets the z component of the quaternion.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.W">
            <summary>
            Gets or sets the w component of the quaternion.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD"/> structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD"/> structure from the passed-in vector, setting the W-component to zero.
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.AddTo(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Adds the specified quaternion to the current quaternion.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Add(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Adds two quaternions together and returns the result;
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Impelements the addition operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.SubtractFrom(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Subtracts the specified quaternion from the current quaternion.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Subtract(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Subtracts two quaternions from one another and returns the result;
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Impelements the subtraction operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.MultiplyDX(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Implementation of quaternion multiplication using same convention as DX does for its quaternion multiplication.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Multiply(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Multiplies two quaternions together and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Implements the multiplication operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,System.Double)">
            <summary>
            Multiply by a scalar
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Conjugate(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Returns the conjugate of a quaternion.
            </summary>
            <param name="q">Source quaternion.</param>
            <returns>A quaternion structure that is the conjugate of the q parameter.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Dot(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Length">
            <summary>
            Returns the length of this quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Length(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Returns the length of a specified quaternion.
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Normalize">
            <summary>
            Normalizes this quaternion to a unit quaternion.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Normalize(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Returns a normalized copy of the specified quaternion.
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.FromMatrix(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Creates a quaternion from a rotation matrix
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.AxisToAxis(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Computes a quaternion from an axis to axis rotation
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.RotationAxis(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Builds a quaternion that is rotated around an arbitrary axis.
            </summary>
            <param name="axis">A vector structure that identifies the axis about which to rotate the quaternion.</param>
            <param name="angle">Angle of rotation, in radians.  Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>A quaternion structure that is rotated around the specified axis.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.RotateVectorByQuaternion(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Rotates the given vector by the given quaternion
            </summary>
            <param name="vector">The vector to be rotated</param>
            <param name="quaternion">the quaternion representing the direction and rotation angle.  Must be a normalized quaternion (like those created by the RotationAxis method)</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Slerp(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,System.Double)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation. 
            </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Equals(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Performs an equality test between this quaternion and another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Equals(System.Object)">
            <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Add(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Add this and the passed-in quaternion
            </summary>
            <param name="quat">Right hand side of add operation</param>
            <returns>Sum of this quaternion and the argument</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Subtract(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Subtract a quaternion from this one
            </summary>
            <param name="quat">Right hand side of subtract operation</param>
            <returns>A copy of this quaternion with the argument subtracted from it</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Multiply(System.Double)">
            <summary>
            Return the result of scaling the current quaternion
            </summary>
            <param name="s">Scaling factor</param>
            <returns>A copy of this quaternion, scaled by s</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Divide(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Divide this quaternion by another
            </summary>
            <param name="quat">Right hand side of the divide operator</param>
            <returns>A copy of this quaternion, divided by the argument</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Negate">
            <summary>
            Get a copy of this vector multiplied by -1
            </summary>
            <returns>A copy of this vector, negated</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Reciprocal">
            <summary>
            Return the inverse of this quaternion
            </summary>
            <returns>A copy of this quaternion, inverted</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Min(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Return a new quaternion that, for each entry, contains the minimal corresponding element of the two quaternion
            </summary>
            <param name="quat">Quaternion to minimize this quaternion with respect to</param>
            <returns>New quaternion containing the minimal of the two quaternion at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Max(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Return a new quaternion that, for each entry, contains the maximal corresponding element of the two quaternion
            </summary>
            <param name="quat">Quaternion to maximize this quaternion with respect to</param>
            <returns>New quaternion containing the maximal of the two quaternion at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Lerp(Microsoft.MapPoint.Geometry.VectorMath.QuaternionD,System.Double)">
            <summary>
            Linearly interpolate from this quaternion to the passed-in quaternion
            </summary>
            <param name="quat"></param>
            <param name="w">Interpolation weight</param>
            <returns>Result of the interpolation</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Minimal">
            <summary>
            Get the minimal element of this quaternion
            </summary>
            <returns>Minimal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.Maximal">
            <summary>
            Get the maximal element of this quaternion
            </summary>
            <returns>Maximal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.AbsMinimal">
            <summary>
            Get the minimal of the absolute values of the elements of this vector
            </summary>
            <returns>Minimal of element absolute values</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.AbsMaximal">
            <summary>
            Get the maximal of the absolute values of the elements of this vector
            </summary>
            <returns>Maximal of element absolute values</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.QuaternionD.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.QuaternionD)">
            <summary>
            Scaling operator
            </summary>
            <param name="s"></param>
            <param name="quat"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Ray3D">
            <summary>
            A Ray in 3D space
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.Origin">
            <summary>
            Origin and Direction of ray
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.Direction">
            <summary>
            Origin and Direction of ray
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.Empty">
            <summary>
            Gets an empty ray.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.#ctor(System.Boolean)">
            <summary>
            This function creates an Empty Ray3D. It's private. It has to have a bool
            because you can't have parameterless constructors on structs.
            </summary>
            <param name="internalConstructor"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Constructs a Ray3D
            </summary>
            <param name="origin">Origin of Ray</param>
            <param name="direction">Direction of Ray</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Ray3D)">
            <summary>
            Constructs a BaseRay3D
            </summary>
            <param name="ray"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.IsValid">
            <summary>
            Returns true if the origin and direction of the ray are valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Ray3D)">
            <summary>
            Compares two BaseRay3Ds for equality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Ray3D,Microsoft.MapPoint.Geometry.VectorMath.Ray3D)">
            <summary>
            Compares two BaseRay3Ds for inequality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of inequality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.GetHashCode">
            <summary>
            Calculates the hash code for the BaseRay3D
            </summary>
            <returns>A^B</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another. Objects not
            of type BaseRay3D will always be inequal
            </summary>
            <param name="obj">Input object</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Ray3D)">
            <summary>
            Compares equality
            </summary>
            <param name="ray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Ray3D@)">
            <summary>
            Compares equality
            </summary>
            <param name="ray"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Ray3D.ToString">
            <summary>
            String representing the BaseRay3D
            </summary>
            <returns>Origin={Origin},Direction={Direction}</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SphereD">
            <summary>
            A sphere in 3D space
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SphereD.Default">
            <summary>
            Gets a unit sphere at the origin.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SphereD.Origin">
            <summary>
            Origin of the sphere
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.SphereD.Radius">
            <summary>
            Radius of the sphere
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Constructs a BaseSphereD
            </summary>
            <param name="origin">Origin of the sphere</param>
            <param name="radius">Radius of the sphere</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.#ctor(Microsoft.MapPoint.Geometry.VectorMath.SphereD)">
            <summary>
            Constructs a BaseSphereD
            </summary>
            <param name="sphere"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.Transform(Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms this sphere by the specified matrix.
            Note that any scale changes will not be applied to the radius as 
            that could result in a non-spherical shape.
            </summary>
            <param name="sphere"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.Transform(Microsoft.MapPoint.Geometry.VectorMath.SphereD@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms this sphere by the specified matrix.
            Note that any scale changes will not be applied to the radius as 
            that could result in a non-spherical shape.
            </summary>
            <param name="sphere"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Geometry.VectorMath.SphereD)">
            <summary>
            Compares two BaseSphereDs for equality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Geometry.VectorMath.SphereD)">
            <summary>
            Compares two BaseSphereDs for inequality
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>Truth of inequality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.GetHashCode">
            <summary>
            Calculates the hash code for the BaseSphereD
            </summary>
            <returns>A^B</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another. Objects not
            of type BaseSphereD will always be inequal
            </summary>
            <param name="obj">Input object</param>
            <returns>Truth of equality</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.Equals(Microsoft.MapPoint.Geometry.VectorMath.SphereD)">
            <summary>
            Compares equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SphereD.ToString">
            <summary>
            String representing the BaseLine3D
            </summary>
            <returns>A={A},B={B}</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD">
            <summary>
            A shape representing the volume A 3D sphere moved along a vector in 3D space will intersect
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD"/> structure.
            </summary>
            <param name="origin">Origin of the sphere</param>
            <param name="radius">Radius of the sphere</param>
            <param name="sweep"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.#ctor(Microsoft.MapPoint.Geometry.VectorMath.SphereD,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD"/> structure.
            </summary>
            <param name="sphere"></param>
            <param name="sweep"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.Transform(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms this swept sphere by the specified matrix.
            Note that any scale changes will not be applied to the radius as 
            that could result in a non-spherical shape.
            </summary>
            <param name="sweptSphere"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns>A={A},B={B}</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.Equals(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD)">
            <summary>
            Equals
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.GetHashCode">
            <summary>
            Hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD,Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.Sphere">
            <summary>
            Gets or sets the sphere that is swept.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.Sweep">
            <summary>
            Direction and magnitude of the motion of the sphere.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.SweptSphereD.SweepLength">
            <summary>
            Length of the sweep, precalculated.
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Vector2D">
            <summary>
            Describes and manipulates a vector in two-dimensional space using doubles.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Empty">
            <summary>
            Retrieves an empty 2-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.X">
            <summary>
            Represents the x component of the 2-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Y">
            <summary>
            Represents the y component of the 2-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector2D"/> structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.AddTo(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Adds a 2-D vector to the current vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Adds two 2-D vectors together and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.SubtractFrom(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Subtracts a 2-D vector from the current vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Subtracts two 2-D vectors from one another and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.MultiplyBy(System.Double)">
            <summary>
            Multiplies a 2-D vector by a value.
            </summary>
            <param name="value">Source value used as a multiplier.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,System.Double)">
            <summary>
            Multiplies a 2-D vector by a value.
            </summary>
            <param name="source">Source vector structure.</param>
            <param name="value">Source value used as a multiplier.</param>
            <returns>A vector structure that is multiplied by the value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Normalize">
            <summary>
            Normalizes the current 2-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Minimize(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Minimize by the given vector
            </summary>
            <param name="toMinimize">The vector to minimize</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Maximize(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Maximize by the given vector
            </summary>
            <param name="toMaximize">The vector to maximize by</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Normalize(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Returns the normalized version of the specified 2-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Distance(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Returns the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.DistanceSq(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Returns the square of the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Length">
            <summary>
            Returns the length of the current 2-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Length(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Returns the length of the specified 2-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.LengthSq">
            <summary>
            Returns the square of the length of the current 2-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.LengthSq(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Returns the square of the length of the specified 2-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Cross(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Returns the 2D cross product of two vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Cross(Microsoft.MapPoint.Geometry.VectorMath.Vector2D@,Microsoft.MapPoint.Geometry.VectorMath.Vector2D@)">
            <summary>
            Returns the 2D cross product of two vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Adds two 2-D vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Subtracts a 2-D vector from another 2-D vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,System.Double)">
            <summary>
            Multiplies a vector by a scalar
            </summary>
            <param name="left">Vector operand</param>
            <param name="right">Scalar operand</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            multiplies vector by scalar
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Dot product operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.op_Division(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,System.Double)">
            <summary>
            Divides a vector by a scalar
            </summary>
            <param name="left">Vector operand</param>
            <param name="right">Scalar operand</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Get the dot product of the vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector2D@,Microsoft.MapPoint.Geometry.VectorMath.Vector2D@)">
            <summary>
            Get the dot product of the vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.GetAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Calculates the angle in radians between two 2D vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.GetNormalVector(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Returns a vector normal to this vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector2D@)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Add this vector and the passed-in vector
            </summary>
            <param name="vec">Right hand side of add operation</param>
            <returns>Sum of this vector and the argument vector</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Subtract a vector from this vector
            </summary>
            <param name="vec">Right hand side of subtract operation</param>
            <returns>A copy of this vector with the argument vector subtracted from it</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Multiply(System.Double)">
            <summary>
            Return the result of scaling the current vector
            </summary>
            <param name="s">Scaling factor</param>
            <returns>A copy of this vector, scaled by s</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Return the dot product of this vector with the passed-in vector
            </summary>
            <param name="vec">Right hand side of dot product operation</param>
            <returns>Dot product of the two vectors</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Negate">
            <summary>
            Get a copy of this vector multiplied by -1
            </summary>
            <returns>A copy of this vector, negated</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Min(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Return a new vector that, for each entry, contains the minimal corresponding element of the two vectors
            </summary>
            <param name="vec">Vector to minimize this vector with respect to</param>
            <returns>New vector containing the minimal of the two vectors at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Max(Microsoft.MapPoint.Geometry.VectorMath.Vector2D)">
            <summary>
            Return a new vector that, for each entry, contains the maximal corresponding element of the two vectors
            </summary>
            <param name="vec">Vector to minimize this vector with respect to</param>
            <returns>New vector containing the maximal of the two vectors at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Lerp(Microsoft.MapPoint.Geometry.VectorMath.Vector2D,System.Double)">
            <summary>
            Linearly interpolate from this vector to the passed-in vector
            </summary>
            <param name="vec"></param>
            <param name="w">Interpolation weight</param>
            <returns>Result of the interpolation</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Minimal">
            <summary>
            Get the minimal element of this vector
            </summary>
            <returns>Minimal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.Maximal">
            <summary>
            Get the maximal element of this vector
            </summary>
            <returns>Maximal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.AbsMinimal">
            <summary>
            Get the minimal of the absolute values of the elements of this vector
            </summary>
            <returns>Minimal of element absolute values</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector2D.AbsMaximal">
            <summary>
            Get the maximal of the absolute values of the elements of this vector
            </summary>
            <returns>Maximal of element absolute values</returns>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.VectorMath.Vector3D">
            <summary>
            Encapsulates a 3 dimensional vector based on doubles.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.SmallNumber">
            <summary>
            A small number, but not double.Epsilon, which is often expensive to use.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Empty">
            <summary>
            Retrieves an empty 3-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.X">
            <summary>
            Represents the x component of the 3-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Y">
            <summary>
            Represents the y component of the 3-D vector.
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Z">
            <summary>
            Represents the z component of the 3-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector3D"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.VectorMath.Vector3D"/> struct.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.AddTo(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Adds the specified 3-D vector to the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.AddTo(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Adds the specified 3-D vector to the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Adds the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Adds the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.SubtractFrom(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Subtracts the specified 3-D vector from the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.SubtractFrom(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Subtracts the specified 3-D vector from the current 3-D vector.
            </summary>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Subtracts the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Subtracts the two specified 3-D vectors and returns the result.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Cross(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Determines the right-handed cross product of the two specified 3-D vectors.
            </summary>
            <param name="left">Forefinger pointer forward.</param>
            <param name="right">Index finder at a right angle to forefinger.</param>
            <returns>Thumb.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Cross(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Determines the right-handed cross product of the two specified 3-D vectors.
            </summary>
            <param name="left">Forefinger pointer forward.</param>
            <param name="right">Index finder at a right angle to forefinger.</param>
            <returns>Thumb.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Determines the dot products of the two specified 3-D vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Determines the dot products of the two specified 3-D vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Distance(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Distance(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Returns the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.DistanceSq(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the square of the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.DistanceSq(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Returns the square of the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Length">
            <summary>
            Returns the length of the current 3-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Length(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the length of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Length(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Returns the length of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Area(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Returns the area between the three points
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.LengthSq">
            <summary>
            Returns the square of the length of the current 3-D vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.LengthSq(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the square of the length of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.LengthSq(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Returns the square of the length of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.MultiplyBy(System.Double)">
            <summary>
            Multiplies a 3-D vector by a value.
            </summary>
            <param name="value">Source value used as a multiplier.</param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Multiplies a 3-D vector by a value.
            </summary>
            <param name="source">Source vector structure.</param>
            <param name="value">Source value used as a multiplier.</param>
            <returns>A vector structure that is multiplied by the value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,System.Double)">
            <summary>
            Multiplies a 3-D vector by a value.
            </summary>
            <param name="source">Source vector structure.</param>
            <param name="value">Source value used as a multiplier.</param>
            <returns>A vector structure that is multiplied by the value.</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Normalize">
            <summary>
            Normalizes the current 3-D vector.
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Normalize(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Returns the normalized version of the specified 3-D vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Addition(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Adds two 3-D vectors.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Subtraction(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Subtracts a 3-D vector from another 3-D vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Multiply(System.Double,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Determines the product of a value and a 3-D vector.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Determines the product of a 3-D vector and a value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Division(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Determines the division of a 3-D vector and a value.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Equality(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Inequality(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Equals(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.FuzzyEquals(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.FuzzyEquals(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.GetAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Calculates the angle in radians between two 3D vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.GetAngle(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Gets the angle between two vectors from the origin cast against a plane specified by a normal.
            </summary>
            <param name="axis">Normal of the plane.</param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms this 3-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms this 3-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms a 3-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms a 3-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformCoordinate(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms a 3-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformNormal(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms this 3-D vector normal by the given matrix.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformNormal(Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms this 3-D vector normal by the given matrix.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformNormal(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D)">
            <summary>
            Transforms a 3-D vector normal by the given matrix.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformNormal(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms a 3-D vector normal by the given matrix.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.TransformNormal(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Matrix4x4D@)">
            <summary>
            Transforms a 3-D vector normal by the given matrix.
            </summary>
            <param name="vector"></param>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_UnaryNegation(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Negation operator
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_Multiply(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Dot product operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.op_ExclusiveOr(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Cross product operator
            </summary>
            <param name="vec0"></param>
            <param name="vec1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Add(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Add this vector and the passed-in vector
            </summary>
            <param name="vec">Right hand side of add operation</param>
            <returns>Sum of this vector and the argument vector</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Subtract a vector from this vector
            </summary>
            <param name="vec">Right hand side of subtract operation</param>
            <returns>A copy of this vector with the argument vector subtracted from it</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Subtract(Microsoft.MapPoint.Geometry.VectorMath.Vector3D@)">
            <summary>
            Subtract a vector from this vector
            </summary>
            <param name="vec">Right hand side of subtract operation</param>
            <returns>A copy of this vector with the argument vector subtracted from it</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Multiply(System.Double)">
            <summary>
            Return the result of scaling the current vector
            </summary>
            <param name="s">Scaling factor</param>
            <returns>A copy of this vector, scaled by s</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Dot(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Return the dot product of this vector with the passed-in vector
            </summary>
            <param name="vec">Right hand side of dot product operation</param>
            <returns>Dot product of the two vectors</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Negate">
            <summary>
            Get a copy of this vector multiplied by -1
            </summary>
            <returns>A copy of this vector, negated</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Min(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Return a new vector that, for each entry, contains the minimal corresponding element of the two vectors
            </summary>
            <param name="vec">Vector to minimize this vector with respect to</param>
            <returns>New vector containing the minimal of the two vectors at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Max(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Return a new vector that, for each entry, contains the maximal corresponding element of the two vectors
            </summary>
            <param name="vec">Vector to minimize this vector with respect to</param>
            <returns>New vector containing the maximal of the two vectors at each element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Min(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Return a new vector containing the minimal of each of the elements of v0 and v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Max(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Return a new vector containing the maximal of each of the elements of v0 and v1 
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Lerp(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Linearly interpolate from this vector to the passed-in vector
            </summary>
            <param name="vec"></param>
            <param name="w">Interpolation weight</param>
            <returns>Result of the interpolation</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Lerp(Microsoft.MapPoint.Geometry.VectorMath.Vector3D,Microsoft.MapPoint.Geometry.VectorMath.Vector3D,System.Double)">
            <summary>
            Linearly interpolate by w between vectors v0 and v1
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Minimal">
            <summary>
            Get the minimal element of this vector
            </summary>
            <returns>Minimal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Maximal">
            <summary>
            Get the maximal element of this vector
            </summary>
            <returns>Maximal element</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.AbsMinimal">
            <summary>
            Get the minimal of the absolute values of the elements of this vector
            </summary>
            <returns>minimal of element absolute values</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.AbsMaximal">
            <summary>
            Get the maximal of the absolute values of the elements of this vector
            </summary>
            <returns>maximal of element absolute values</returns>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.ValidatePosition(Microsoft.MapPoint.Geometry.VectorMath.Vector3D)">
            <summary>
            Validates that the specified vector is within somewhat reasonable values.
            </summary>
            <param name="position"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Pitch">
            <summary>
            Gets the look-up angle of the vector
            </summary>
            <remarks>
            This handles getting the "pitch up" for a given vector.  This assumes the coordinate system
            is Z North, X is out the Prime meridian, and Y wherever that leaves it.  Pitch is defined as
            the angle out of the YZ plane.
            </remarks>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.VectorMath.Vector3D.Heading">
            <summary>
            Gets the left-right angle of the vector
            </summary>
            <remarks>
            This handles getting the "heading" for a given vector.  This assumes the coordinate system
            is Z North, X is out the Prime meridian, and Y wherever that leaves it.  Heading is defined as
            the angle in the YZ plane, with North being defined as 0c1
            </remarks>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionColored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionColored.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionColored.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColored.#ctor(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColored.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColored.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColored.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.Argb">
            <summary>
            Gets or sets the color value as an ARGB int.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColored.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="color"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="color"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.Argb">
            <summary>
            Gets or sets the color value as an ARGB int.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.TextureCoordinate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionColoredTextured.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormal.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Argb">
            <summary>
            Gets or sets the color value of this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColored.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
            <param name="color"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <param name="color"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalColoredTextured.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="u1"></param>
            <param name="v1"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <param name="textureCoordinate"></param>
            <param name="textureCoordinate1"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.U">
            <summary>
            Gets or sets the horizontal, U component of the first texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.V">
            <summary>
            Gets or sets the horizontal, V component of the first texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.U1">
            <summary>
            Gets or sets the horizontal, U component of the second texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.V1">
            <summary>
            Gets or sets the horizontal, V component of the second texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexTex.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTextured.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionOnly.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Vertex.PositionTextured"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Vertex.PositionTextured"/> struct.
            </summary>
            <param name="position"></param>
            <param name="textureCoordinate"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTextured.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Vertex.PositionTextured"/> struct.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="u1"></param>
            <param name="v1"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F,Microsoft.MapPoint.Geometry.VectorMath.Vector2F)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.MapPoint.Geometry.Vertex.PositionTextured"/> struct.
            </summary>
            <param name="position"></param>
            <param name="textureCoordinate"></param>
            <param name="textureCoordinate1"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.U">
            <summary>
            Gets or sets the horizontal, U component of the first texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.V">
            <summary>
            Gets or sets the horizontal, V component of the first texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.U1">
            <summary>
            Gets or sets the horizontal, U component of the second texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.V1">
            <summary>
            Gets or sets the horizontal, V component of the second texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionTexTex.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.Transformed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.Transformed.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.Transformed.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.Transformed.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rhw"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.Transformed.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector4F)">
            <summary>
            
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.Transformed.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.Transformed.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.Transformed.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.Transformed.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.Transformed.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.Transformed.Rhw">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.Transformed.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.Transformed.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.Transformed.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.TransformedColored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rhw"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector4F,System.Int32)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="color"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.Rhw">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColored.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rhw"></param>
            <param name="color"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector4F,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="color"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.Rhw">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedColoredTextured.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="rhw"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector4F,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.Rhw">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.TransformedTextured.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,System.Single,System.Single,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="tex1"></param>
            <param name="tex2"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Texture1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.U1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.V1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.W1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.U2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.V2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.W2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTexturedTex1Tex2.Texture2">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.#ctor(Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F,Microsoft.MapPoint.Geometry.VectorMath.Vector3F)">
            <summary>
            
            </summary>
            <param name="vector"></param>
            <param name="normal"></param>
            <param name="tex0"></param>
            <param name="tex1"></param>
            <param name="tex2"></param>
            <param name="tex3"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.U0">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.V0">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.W0">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Stride">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Tex0">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Tex1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Tex2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.Tex3">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.U1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.V1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.W1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.U2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.V2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.W2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.U3">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.V3">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.PositionNormalTex0Tex1Tex2Tex3.W3">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.VertexFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.StrideSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="bx"></param>
            <param name="by"></param>
            <param name="bz"></param>
            <param name="indices">4 indices encoded into a single int. Assuming indices A,B,C they should be ordered: CBA</param>
            <param name="nx"></param>
            <param name="ny"></param>
            <param name="nz"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.BinaryWrite(System.IO.BinaryWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.BinaryRead(System.IO.BinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.X">
            <summary>
            Gets or sets the X component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Y">
            <summary>
            Gets or sets the Y component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Z">
            <summary>
            Gets or sets the Z component of the position specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Bx">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.By">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Bz">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Indices">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Nx">
            <summary>
            Gets or sets the X component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Ny">
            <summary>
            Gets or sets the Y component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Nz">
            <summary>
            Gets or sets the Z component of the normal specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.U">
            <summary>
            Gets or sets the horizontal, U component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.V">
            <summary>
            Gets or sets the horizontal, V component of the texture coordinate specified in this vertex.
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.MapPoint.Geometry.Vertex.AnimatedPositionNormalTextured.Stride">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
